// DO NOT EDIT: This file is autogenerated via the builtin command.

package influxdb

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 49,
					Line:   5,
				},
				Source: "package influxdb\n\nmeasurement = (bucket,m) =>\n    from(bucket:bucket)\n        |> filter(fn:(r) => r._measurement == m)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 49,
						Line:   5,
					},
					Source: "measurement = (bucket,m) =>\n    from(bucket:bucket)\n        |> filter(fn:(r) => r._measurement == m)",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   3,
						},
						Source: "measurement",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "measurement",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   5,
						},
						Source: "(bucket,m) =>\n    from(bucket:bucket)\n        |> filter(fn:(r) => r._measurement == m)",
						Start: ast.Position{
							Column: 15,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   4,
									},
									Source: "bucket:bucket",
									Start: ast.Position{
										Column: 10,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   4,
										},
										Source: "bucket:bucket",
										Start: ast.Position{
											Column: 10,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   4,
											},
											Source: "bucket",
											Start: ast.Position{
												Column: 10,
												Line:   4,
											},
										},
									},
									Name: "bucket",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   4,
											},
											Source: "bucket",
											Start: ast.Position{
												Column: 17,
												Line:   4,
											},
										},
									},
									Name: "bucket",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   4,
								},
								Source: "from(bucket:bucket)",
								Start: ast.Position{
									Column: 5,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   4,
									},
									Source: "from",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Name: "from",
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   5,
							},
							Source: "from(bucket:bucket)\n        |> filter(fn:(r) => r._measurement == m)",
							Start: ast.Position{
								Column: 5,
								Line:   4,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   5,
									},
									Source: "fn:(r) => r._measurement == m",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   5,
										},
										Source: "fn:(r) => r._measurement == m",
										Start: ast.Position{
											Column: 19,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   5,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 19,
												Line:   5,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   5,
											},
											Source: "(r) => r._measurement == m",
											Start: ast.Position{
												Column: 22,
												Line:   5,
											},
										},
									},
									Body: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   5,
												},
												Source: "r._measurement == m",
												Start: ast.Position{
													Column: 29,
													Line:   5,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   5,
													},
													Source: "r._measurement",
													Start: ast.Position{
														Column: 29,
														Line:   5,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   5,
														},
														Source: "r",
														Start: ast.Position{
															Column: 29,
															Line:   5,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   5,
														},
														Source: "_measurement",
														Start: ast.Position{
															Column: 31,
															Line:   5,
														},
													},
												},
												Name: "_measurement",
											},
										},
										Operator: 14,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   5,
													},
													Source: "m",
													Start: ast.Position{
														Column: 47,
														Line:   5,
													},
												},
											},
											Name: "m",
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   5,
												},
												Source: "r",
												Start: ast.Position{
													Column: 23,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   5,
													},
													Source: "r",
													Start: ast.Position{
														Column: 23,
														Line:   5,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   5,
								},
								Source: "filter(fn:(r) => r._measurement == m)",
								Start: ast.Position{
									Column: 12,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   5,
									},
									Source: "filter",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Name: "filter",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   3,
							},
							Source: "bucket",
							Start: ast.Position{
								Column: 16,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   3,
								},
								Source: "bucket",
								Start: ast.Position{
									Column: 16,
									Line:   3,
								},
							},
						},
						Name: "bucket",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   3,
							},
							Source: "m",
							Start: ast.Position{
								Column: 23,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   3,
								},
								Source: "m",
								Start: ast.Position{
									Column: 23,
									Line:   3,
								},
							},
						},
						Name: "m",
					},
					Value: nil,
				}},
			},
		}},
		Imports: nil,
		Name:    "measurement.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   1,
					},
					Source: "package influxdb",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						Source: "influxdb",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxdb",
			},
		},
	}},
	Package: "influxdb",
	Path:    "influxdb",
}
