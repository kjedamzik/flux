// DO NOT EDIT: This file is autogenerated via the builtin command.

package main

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
	"regexp"
	"time"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 154,
					Line:   6,
				},
				Source: "aggregate_window = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T00:00:00Z, stop:2018-05-22T00:01:00Z)\n  |> aggregateWindow(every:30s,fn:mean)\n\ntestingTest(name: \"aggregate_window\", load: testLoadData, infile: \"aggregate_window.in.csv\", outfile: \"aggregate_window.out.csv\", test: aggregate_window)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   4,
					},
					Source: "aggregate_window = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T00:00:00Z, stop:2018-05-22T00:01:00Z)\n  |> aggregateWindow(every:30s,fn:mean)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						Source: "aggregate_window",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "aggregate_window",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T00:00:00Z, stop:2018-05-22T00:01:00Z)\n  |> aggregateWindow(every:30s,fn:mean)",
						Start: ast.Position{
							Column: 20,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   3,
								},
								Source: "table\n  |> range(start: 2018-05-22T00:00:00Z, stop:2018-05-22T00:01:00Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   3,
										},
										Source: "start: 2018-05-22T00:00:00Z, stop:2018-05-22T00:01:00Z",
										Start: ast.Position{
											Column: 12,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "start: 2018-05-22T00:00:00Z",
											Start: ast.Position{
												Column: 12,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "2018-05-22T00:00:00Z",
												Start: ast.Position{
													Column: 19,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   3,
											},
											Source: "stop:2018-05-22T00:01:00Z",
											Start: ast.Position{
												Column: 41,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   3,
												},
												Source: "stop",
												Start: ast.Position{
													Column: 41,
													Line:   3,
												},
											},
										},
										Name: "stop",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   3,
												},
												Source: "2018-05-22T00:01:00Z",
												Start: ast.Position{
													Column: 46,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   3,
									},
									Source: "range(start: 2018-05-22T00:00:00Z, stop:2018-05-22T00:01:00Z)",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   4,
							},
							Source: "table\n  |> range(start: 2018-05-22T00:00:00Z, stop:2018-05-22T00:01:00Z)\n  |> aggregateWindow(every:30s,fn:mean)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   4,
									},
									Source: "every:30s,fn:mean",
									Start: ast.Position{
										Column: 22,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   4,
										},
										Source: "every:30s",
										Start: ast.Position{
											Column: 22,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   4,
											},
											Source: "every",
											Start: ast.Position{
												Column: 22,
												Line:   4,
											},
										},
									},
									Name: "every",
								},
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   4,
											},
											Source: "30s",
											Start: ast.Position{
												Column: 28,
												Line:   4,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(30),
										Unit:      "s",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   4,
										},
										Source: "fn:mean",
										Start: ast.Position{
											Column: 32,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   4,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 32,
												Line:   4,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   4,
											},
											Source: "mean",
											Start: ast.Position{
												Column: 35,
												Line:   4,
											},
										},
									},
									Name: "mean",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   4,
								},
								Source: "aggregateWindow(every:30s,fn:mean)",
								Start: ast.Position{
									Column: 6,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   4,
									},
									Source: "aggregateWindow",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Name: "aggregateWindow",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 21,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 154,
						Line:   6,
					},
					Source: "testingTest(name: \"aggregate_window\", load: testLoadData, infile: \"aggregate_window.in.csv\", outfile: \"aggregate_window.out.csv\", test: aggregate_window)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 153,
								Line:   6,
							},
							Source: "name: \"aggregate_window\", load: testLoadData, infile: \"aggregate_window.in.csv\", outfile: \"aggregate_window.out.csv\", test: aggregate_window",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   6,
								},
								Source: "name: \"aggregate_window\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   6,
									},
									Source: "\"aggregate_window\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "aggregate_window",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 39,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 39,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 45,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 92,
									Line:   6,
								},
								Source: "infile: \"aggregate_window.in.csv\"",
								Start: ast.Position{
									Column: 59,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 59,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 92,
										Line:   6,
									},
									Source: "\"aggregate_window.in.csv\"",
									Start: ast.Position{
										Column: 67,
										Line:   6,
									},
								},
							},
							Value: "aggregate_window.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 129,
									Line:   6,
								},
								Source: "outfile: \"aggregate_window.out.csv\"",
								Start: ast.Position{
									Column: 94,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 101,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 94,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   6,
									},
									Source: "\"aggregate_window.out.csv\"",
									Start: ast.Position{
										Column: 103,
										Line:   6,
									},
								},
							},
							Value: "aggregate_window.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 153,
									Line:   6,
								},
								Source: "test: aggregate_window",
								Start: ast.Position{
									Column: 131,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 131,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 153,
										Line:   6,
									},
									Source: "aggregate_window",
									Start: ast.Position{
										Column: 137,
										Line:   6,
									},
								},
							},
							Name: "aggregate_window",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 154,
							Line:   6,
						},
						Source: "testingTest(name: \"aggregate_window\", load: testLoadData, infile: \"aggregate_window.in.csv\", outfile: \"aggregate_window.out.csv\", test: aggregate_window)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "aggregate_window.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 112,
					Line:   7,
				},
				Source: "option now = () => 2018-12-18T21:00:00Z\n\nt_count = (table=<-) => table\n  |> range(start: -10m)\n  |> count()\n\ntestingTest(name: \"count\", load: testLoadData, infile: \"count.in.csv\", outfile: \"count.out.csv\", test: t_count)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-18T21:00:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-18T21:00:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-18T21:00:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-18T21:00:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   5,
					},
					Source: "t_count = (table=<-) => table\n  |> range(start: -10m)\n  |> count()",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   3,
						},
						Source: "t_count",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_count",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   5,
						},
						Source: "(table=<-) => table\n  |> range(start: -10m)\n  |> count()",
						Start: ast.Position{
							Column: 11,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 25,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   4,
								},
								Source: "table\n  |> range(start: -10m)",
								Start: ast.Position{
									Column: 25,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   4,
										},
										Source: "start: -10m",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   4,
											},
											Source: "start: -10m",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   4,
													},
													Source: "10m",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(10),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   4,
												},
												Source: "-10m",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   4,
									},
									Source: "range(start: -10m)",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   5,
							},
							Source: "table\n  |> range(start: -10m)\n  |> count()",
							Start: ast.Position{
								Column: 25,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   5,
								},
								Source: "count()",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "count",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "count",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 12,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 12,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 112,
						Line:   7,
					},
					Source: "testingTest(name: \"count\", load: testLoadData, infile: \"count.in.csv\", outfile: \"count.out.csv\", test: t_count)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 111,
								Line:   7,
							},
							Source: "name: \"count\", load: testLoadData, infile: \"count.in.csv\", outfile: \"count.out.csv\", test: t_count",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   7,
								},
								Source: "name: \"count\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   7,
									},
									Source: "\"count\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "count",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 28,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 28,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 34,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   7,
								},
								Source: "infile: \"count.in.csv\"",
								Start: ast.Position{
									Column: 48,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 48,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   7,
									},
									Source: "\"count.in.csv\"",
									Start: ast.Position{
										Column: 56,
										Line:   7,
									},
								},
							},
							Value: "count.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   7,
								},
								Source: "outfile: \"count.out.csv\"",
								Start: ast.Position{
									Column: 72,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 72,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   7,
									},
									Source: "\"count.out.csv\"",
									Start: ast.Position{
										Column: 81,
										Line:   7,
									},
								},
							},
							Value: "count.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   7,
								},
								Source: "test: t_count",
								Start: ast.Position{
									Column: 98,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 98,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   7,
									},
									Source: "t_count",
									Start: ast.Position{
										Column: 104,
										Line:   7,
									},
								},
							},
							Name: "t_count",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 112,
							Line:   7,
						},
						Source: "testingTest(name: \"count\", load: testLoadData, infile: \"count.in.csv\", outfile: \"count.out.csv\", test: t_count)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "count.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 8,
					Line:   19,
				},
				Source: "t_cov = () => {\n    left = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"_measurement\"])\n\n    right = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])\n\n    got = cov(x:left, y:right, on: [\"_time\", \"_measurement\"])\n    want = testLoadData(file: \"cov.out.csv\")\n    return assertEquals(name: \"cov\", want: want, got: got)\n}\n\nt_cov()",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   17,
					},
					Source: "t_cov = () => {\n    left = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"_measurement\"])\n\n    right = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])\n\n    got = cov(x:left, y:right, on: [\"_time\", \"_measurement\"])\n    want = testLoadData(file: \"cov.out.csv\")\n    return assertEquals(name: \"cov\", want: want, got: got)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   1,
						},
						Source: "t_cov",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_cov",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   17,
						},
						Source: "() => {\n    left = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"_measurement\"])\n\n    right = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])\n\n    got = cov(x:left, y:right, on: [\"_time\", \"_measurement\"])\n    want = testLoadData(file: \"cov.out.csv\")\n    return assertEquals(name: \"cov\", want: want, got: got)\n}",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   17,
							},
							Source: "{\n    left = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"_measurement\"])\n\n    right = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])\n\n    got = cov(x:left, y:right, on: [\"_time\", \"_measurement\"])\n    want = testLoadData(file: \"cov.out.csv\")\n    return assertEquals(name: \"cov\", want: want, got: got)\n}",
							Start: ast.Position{
								Column: 15,
								Line:   1,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   6,
								},
								Source: "left = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"_measurement\"])",
								Start: ast.Position{
									Column: 5,
									Line:   2,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   2,
									},
									Source: "left",
									Start: ast.Position{
										Column: 5,
										Line:   2,
									},
								},
							},
							Name: "left",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   2,
														},
														Source: "file: \"cov.in.csv\"",
														Start: ast.Position{
															Column: 25,
															Line:   2,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   2,
															},
															Source: "file: \"cov.in.csv\"",
															Start: ast.Position{
																Column: 25,
																Line:   2,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 29,
																	Line:   2,
																},
																Source: "file",
																Start: ast.Position{
																	Column: 25,
																	Line:   2,
																},
															},
														},
														Name: "file",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   2,
																},
																Source: "\"cov.in.csv\"",
																Start: ast.Position{
																	Column: 31,
																	Line:   2,
																},
															},
														},
														Value: "cov.in.csv",
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   2,
													},
													Source: "testLoadData(file: \"cov.in.csv\")",
													Start: ast.Position{
														Column: 12,
														Line:   2,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   2,
														},
														Source: "testLoadData",
														Start: ast.Position{
															Column: 12,
															Line:   2,
														},
													},
												},
												Name: "testLoadData",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   3,
												},
												Source: "testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
												Start: ast.Position{
													Column: 12,
													Line:   2,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 71,
															Line:   3,
														},
														Source: "start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z",
														Start: ast.Position{
															Column: 18,
															Line:   3,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   3,
															},
															Source: "start:2018-05-22T19:53:00Z",
															Start: ast.Position{
																Column: 18,
																Line:   3,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 23,
																	Line:   3,
																},
																Source: "start",
																Start: ast.Position{
																	Column: 18,
																	Line:   3,
																},
															},
														},
														Name: "start",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   3,
																},
																Source: "2018-05-22T19:53:00Z",
																Start: ast.Position{
																	Column: 24,
																	Line:   3,
																},
															},
														},
														Value: time.Time{},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 71,
																Line:   3,
															},
															Source: "stop:2018-05-22T19:55:00Z",
															Start: ast.Position{
																Column: 46,
																Line:   3,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   3,
																},
																Source: "stop",
																Start: ast.Position{
																	Column: 46,
																	Line:   3,
																},
															},
														},
														Name: "stop",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 71,
																	Line:   3,
																},
																Source: "2018-05-22T19:55:00Z",
																Start: ast.Position{
																	Column: 51,
																	Line:   3,
																},
															},
														},
														Value: time.Time{},
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 72,
														Line:   3,
													},
													Source: "range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   3,
														},
														Source: "range",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Name: "range",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   4,
											},
											Source: "testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])",
											Start: ast.Position{
												Column: 12,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   4,
													},
													Source: "columns: [\"_start\", \"_stop\"]",
													Start: ast.Position{
														Column: 17,
														Line:   4,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   4,
														},
														Source: "columns: [\"_start\", \"_stop\"]",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   4,
															},
															Source: "columns",
															Start: ast.Position{
																Column: 17,
																Line:   4,
															},
														},
													},
													Name: "columns",
												},
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   4,
															},
															Source: "[\"_start\", \"_stop\"]",
															Start: ast.Position{
																Column: 26,
																Line:   4,
															},
														},
													},
													Elements: []ast.Expression{&ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   4,
																},
																Source: "\"_start\"",
																Start: ast.Position{
																	Column: 27,
																	Line:   4,
																},
															},
														},
														Value: "_start",
													}, &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   4,
																},
																Source: "\"_stop\"",
																Start: ast.Position{
																	Column: 37,
																	Line:   4,
																},
															},
														},
														Value: "_stop",
													}},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   4,
												},
												Source: "drop(columns: [\"_start\", \"_stop\"])",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   4,
													},
													Source: "drop",
													Start: ast.Position{
														Column: 12,
														Line:   4,
													},
												},
											},
											Name: "drop",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   5,
										},
										Source: "testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")",
										Start: ast.Position{
											Column: 12,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   5,
												},
												Source: "fn: (r) => r.user == \"user1\"",
												Start: ast.Position{
													Column: 19,
													Line:   5,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   5,
													},
													Source: "fn: (r) => r.user == \"user1\"",
													Start: ast.Position{
														Column: 19,
														Line:   5,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   5,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 19,
															Line:   5,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   5,
														},
														Source: "(r) => r.user == \"user1\"",
														Start: ast.Position{
															Column: 23,
															Line:   5,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   5,
															},
															Source: "r.user == \"user1\"",
															Start: ast.Position{
																Column: 30,
																Line:   5,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   5,
																},
																Source: "r.user",
																Start: ast.Position{
																	Column: 30,
																	Line:   5,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   5,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 30,
																		Line:   5,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   5,
																	},
																	Source: "user",
																	Start: ast.Position{
																		Column: 32,
																		Line:   5,
																	},
																},
															},
															Name: "user",
														},
													},
													Operator: 14,
													Right: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   5,
																},
																Source: "\"user1\"",
																Start: ast.Position{
																	Column: 40,
																	Line:   5,
																},
															},
														},
														Value: "user1",
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   5,
															},
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   5,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   5,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   5,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   5,
											},
											Source: "filter(fn: (r) => r.user == \"user1\")",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   5,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 12,
													Line:   5,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   6,
									},
									Source: "testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"_measurement\"])",
									Start: ast.Position{
										Column: 12,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   6,
											},
											Source: "columns: [\"_measurement\"]",
											Start: ast.Position{
												Column: 18,
												Line:   6,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   6,
												},
												Source: "columns: [\"_measurement\"]",
												Start: ast.Position{
													Column: 18,
													Line:   6,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   6,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 18,
														Line:   6,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   6,
													},
													Source: "[\"_measurement\"]",
													Start: ast.Position{
														Column: 27,
														Line:   6,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   6,
														},
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 28,
															Line:   6,
														},
													},
												},
												Value: "_measurement",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   6,
										},
										Source: "group(columns: [\"_measurement\"])",
										Start: ast.Position{
											Column: 12,
											Line:   6,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   6,
											},
											Source: "group",
											Start: ast.Position{
												Column: 12,
												Line:   6,
											},
										},
									},
									Name: "group",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   12,
								},
								Source: "right = testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   8,
									},
									Source: "right",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "right",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   8,
														},
														Source: "file: \"cov.in.csv\"",
														Start: ast.Position{
															Column: 26,
															Line:   8,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   8,
															},
															Source: "file: \"cov.in.csv\"",
															Start: ast.Position{
																Column: 26,
																Line:   8,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   8,
																},
																Source: "file",
																Start: ast.Position{
																	Column: 26,
																	Line:   8,
																},
															},
														},
														Name: "file",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   8,
																},
																Source: "\"cov.in.csv\"",
																Start: ast.Position{
																	Column: 32,
																	Line:   8,
																},
															},
														},
														Value: "cov.in.csv",
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   8,
													},
													Source: "testLoadData(file: \"cov.in.csv\")",
													Start: ast.Position{
														Column: 13,
														Line:   8,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   8,
														},
														Source: "testLoadData",
														Start: ast.Position{
															Column: 13,
															Line:   8,
														},
													},
												},
												Name: "testLoadData",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   9,
												},
												Source: "testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
												Start: ast.Position{
													Column: 13,
													Line:   8,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 71,
															Line:   9,
														},
														Source: "start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z",
														Start: ast.Position{
															Column: 18,
															Line:   9,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   9,
															},
															Source: "start:2018-05-22T19:53:00Z",
															Start: ast.Position{
																Column: 18,
																Line:   9,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 23,
																	Line:   9,
																},
																Source: "start",
																Start: ast.Position{
																	Column: 18,
																	Line:   9,
																},
															},
														},
														Name: "start",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   9,
																},
																Source: "2018-05-22T19:53:00Z",
																Start: ast.Position{
																	Column: 24,
																	Line:   9,
																},
															},
														},
														Value: time.Time{},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 71,
																Line:   9,
															},
															Source: "stop:2018-05-22T19:55:00Z",
															Start: ast.Position{
																Column: 46,
																Line:   9,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   9,
																},
																Source: "stop",
																Start: ast.Position{
																	Column: 46,
																	Line:   9,
																},
															},
														},
														Name: "stop",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 71,
																	Line:   9,
																},
																Source: "2018-05-22T19:55:00Z",
																Start: ast.Position{
																	Column: 51,
																	Line:   9,
																},
															},
														},
														Value: time.Time{},
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 72,
														Line:   9,
													},
													Source: "range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
													Start: ast.Position{
														Column: 12,
														Line:   9,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   9,
														},
														Source: "range",
														Start: ast.Position{
															Column: 12,
															Line:   9,
														},
													},
												},
												Name: "range",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   10,
											},
											Source: "testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])",
											Start: ast.Position{
												Column: 13,
												Line:   8,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   10,
													},
													Source: "columns: [\"_start\", \"_stop\"]",
													Start: ast.Position{
														Column: 17,
														Line:   10,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   10,
														},
														Source: "columns: [\"_start\", \"_stop\"]",
														Start: ast.Position{
															Column: 17,
															Line:   10,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   10,
															},
															Source: "columns",
															Start: ast.Position{
																Column: 17,
																Line:   10,
															},
														},
													},
													Name: "columns",
												},
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   10,
															},
															Source: "[\"_start\", \"_stop\"]",
															Start: ast.Position{
																Column: 26,
																Line:   10,
															},
														},
													},
													Elements: []ast.Expression{&ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   10,
																},
																Source: "\"_start\"",
																Start: ast.Position{
																	Column: 27,
																	Line:   10,
																},
															},
														},
														Value: "_start",
													}, &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   10,
																},
																Source: "\"_stop\"",
																Start: ast.Position{
																	Column: 37,
																	Line:   10,
																},
															},
														},
														Value: "_stop",
													}},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   10,
												},
												Source: "drop(columns: [\"_start\", \"_stop\"])",
												Start: ast.Position{
													Column: 12,
													Line:   10,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   10,
													},
													Source: "drop",
													Start: ast.Position{
														Column: 12,
														Line:   10,
													},
												},
											},
											Name: "drop",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   11,
										},
										Source: "testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")",
										Start: ast.Position{
											Column: 13,
											Line:   8,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   11,
												},
												Source: "fn: (r) => r.user == \"user2\"",
												Start: ast.Position{
													Column: 19,
													Line:   11,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   11,
													},
													Source: "fn: (r) => r.user == \"user2\"",
													Start: ast.Position{
														Column: 19,
														Line:   11,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   11,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 19,
															Line:   11,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   11,
														},
														Source: "(r) => r.user == \"user2\"",
														Start: ast.Position{
															Column: 23,
															Line:   11,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   11,
															},
															Source: "r.user == \"user2\"",
															Start: ast.Position{
																Column: 30,
																Line:   11,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   11,
																},
																Source: "r.user",
																Start: ast.Position{
																	Column: 30,
																	Line:   11,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   11,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 30,
																		Line:   11,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   11,
																	},
																	Source: "user",
																	Start: ast.Position{
																		Column: 32,
																		Line:   11,
																	},
																},
															},
															Name: "user",
														},
													},
													Operator: 14,
													Right: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   11,
																},
																Source: "\"user2\"",
																Start: ast.Position{
																	Column: 40,
																	Line:   11,
																},
															},
														},
														Value: "user2",
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   11,
															},
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   11,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   11,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   11,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   11,
											},
											Source: "filter(fn: (r) => r.user == \"user2\")",
											Start: ast.Position{
												Column: 12,
												Line:   11,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   11,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 12,
													Line:   11,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   12,
									},
									Source: "testLoadData(file: \"cov.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   12,
											},
											Source: "columns: [\"_measurement\"]",
											Start: ast.Position{
												Column: 18,
												Line:   12,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   12,
												},
												Source: "columns: [\"_measurement\"]",
												Start: ast.Position{
													Column: 18,
													Line:   12,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   12,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 18,
														Line:   12,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   12,
													},
													Source: "[\"_measurement\"]",
													Start: ast.Position{
														Column: 27,
														Line:   12,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   12,
														},
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 28,
															Line:   12,
														},
													},
												},
												Value: "_measurement",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   12,
										},
										Source: "group(columns: [\"_measurement\"])",
										Start: ast.Position{
											Column: 12,
											Line:   12,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   12,
											},
											Source: "group",
											Start: ast.Position{
												Column: 12,
												Line:   12,
											},
										},
									},
									Name: "group",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   14,
								},
								Source: "got = cov(x:left, y:right, on: [\"_time\", \"_measurement\"])",
								Start: ast.Position{
									Column: 5,
									Line:   14,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   14,
									},
									Source: "got",
									Start: ast.Position{
										Column: 5,
										Line:   14,
									},
								},
							},
							Name: "got",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   14,
										},
										Source: "x:left, y:right, on: [\"_time\", \"_measurement\"]",
										Start: ast.Position{
											Column: 15,
											Line:   14,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   14,
											},
											Source: "x:left",
											Start: ast.Position{
												Column: 15,
												Line:   14,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   14,
												},
												Source: "x",
												Start: ast.Position{
													Column: 15,
													Line:   14,
												},
											},
										},
										Name: "x",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   14,
												},
												Source: "left",
												Start: ast.Position{
													Column: 17,
													Line:   14,
												},
											},
										},
										Name: "left",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   14,
											},
											Source: "y:right",
											Start: ast.Position{
												Column: 23,
												Line:   14,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   14,
												},
												Source: "y",
												Start: ast.Position{
													Column: 23,
													Line:   14,
												},
											},
										},
										Name: "y",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   14,
												},
												Source: "right",
												Start: ast.Position{
													Column: 25,
													Line:   14,
												},
											},
										},
										Name: "right",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   14,
											},
											Source: "on: [\"_time\", \"_measurement\"]",
											Start: ast.Position{
												Column: 32,
												Line:   14,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   14,
												},
												Source: "on",
												Start: ast.Position{
													Column: 32,
													Line:   14,
												},
											},
										},
										Name: "on",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   14,
												},
												Source: "[\"_time\", \"_measurement\"]",
												Start: ast.Position{
													Column: 36,
													Line:   14,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   14,
													},
													Source: "\"_time\"",
													Start: ast.Position{
														Column: 37,
														Line:   14,
													},
												},
											},
											Value: "_time",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   14,
													},
													Source: "\"_measurement\"",
													Start: ast.Position{
														Column: 46,
														Line:   14,
													},
												},
											},
											Value: "_measurement",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   14,
									},
									Source: "cov(x:left, y:right, on: [\"_time\", \"_measurement\"])",
									Start: ast.Position{
										Column: 11,
										Line:   14,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   14,
										},
										Source: "cov",
										Start: ast.Position{
											Column: 11,
											Line:   14,
										},
									},
								},
								Name: "cov",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   15,
								},
								Source: "want = testLoadData(file: \"cov.out.csv\")",
								Start: ast.Position{
									Column: 5,
									Line:   15,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   15,
									},
									Source: "want",
									Start: ast.Position{
										Column: 5,
										Line:   15,
									},
								},
							},
							Name: "want",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   15,
										},
										Source: "file: \"cov.out.csv\"",
										Start: ast.Position{
											Column: 25,
											Line:   15,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   15,
											},
											Source: "file: \"cov.out.csv\"",
											Start: ast.Position{
												Column: 25,
												Line:   15,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   15,
												},
												Source: "file",
												Start: ast.Position{
													Column: 25,
													Line:   15,
												},
											},
										},
										Name: "file",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   15,
												},
												Source: "\"cov.out.csv\"",
												Start: ast.Position{
													Column: 31,
													Line:   15,
												},
											},
										},
										Value: "cov.out.csv",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   15,
									},
									Source: "testLoadData(file: \"cov.out.csv\")",
									Start: ast.Position{
										Column: 12,
										Line:   15,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   15,
										},
										Source: "testLoadData",
										Start: ast.Position{
											Column: 12,
											Line:   15,
										},
									},
								},
								Name: "testLoadData",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   16,
										},
										Source: "name: \"cov\", want: want, got: got",
										Start: ast.Position{
											Column: 25,
											Line:   16,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   16,
											},
											Source: "name: \"cov\"",
											Start: ast.Position{
												Column: 25,
												Line:   16,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   16,
												},
												Source: "name",
												Start: ast.Position{
													Column: 25,
													Line:   16,
												},
											},
										},
										Name: "name",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   16,
												},
												Source: "\"cov\"",
												Start: ast.Position{
													Column: 31,
													Line:   16,
												},
											},
										},
										Value: "cov",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   16,
											},
											Source: "want: want",
											Start: ast.Position{
												Column: 38,
												Line:   16,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   16,
												},
												Source: "want",
												Start: ast.Position{
													Column: 38,
													Line:   16,
												},
											},
										},
										Name: "want",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   16,
												},
												Source: "want",
												Start: ast.Position{
													Column: 44,
													Line:   16,
												},
											},
										},
										Name: "want",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   16,
											},
											Source: "got: got",
											Start: ast.Position{
												Column: 50,
												Line:   16,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   16,
												},
												Source: "got",
												Start: ast.Position{
													Column: 50,
													Line:   16,
												},
											},
										},
										Name: "got",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   16,
												},
												Source: "got",
												Start: ast.Position{
													Column: 55,
													Line:   16,
												},
											},
										},
										Name: "got",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   16,
									},
									Source: "assertEquals(name: \"cov\", want: want, got: got)",
									Start: ast.Position{
										Column: 12,
										Line:   16,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   16,
										},
										Source: "assertEquals",
										Start: ast.Position{
											Column: 12,
											Line:   16,
										},
									},
								},
								Name: "assertEquals",
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   16,
								},
								Source: "return assertEquals(name: \"cov\", want: want, got: got)",
								Start: ast.Position{
									Column: 5,
									Line:   16,
								},
							},
						},
					}},
				},
				Params: nil,
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 8,
						Line:   19,
					},
					Source: "t_cov()",
					Start: ast.Position{
						Column: 1,
						Line:   19,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: nil,
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   19,
						},
						Source: "t_cov()",
						Start: ast.Position{
							Column: 1,
							Line:   19,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 6,
								Line:   19,
							},
							Source: "t_cov",
							Start: ast.Position{
								Column: 1,
								Line:   19,
							},
						},
					},
					Name: "t_cov",
				},
			},
		}},
		Imports: nil,
		Name:    "cov.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 134,
					Line:   6,
				},
				Source: "t_covariance = (tables=<-) =>\n  tables\n    |> range(start: 2018-05-22T19:53:26Z)\n    |> covariance(columns: [\"x\", \"y\"])\n\ntestingTest(name: \"t_covariance\", load: testLoadData, infile: \"covariance.in.csv\", outfile: \"covariance.out.csv\", test: t_covariance)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 39,
						Line:   4,
					},
					Source: "t_covariance = (tables=<-) =>\n  tables\n    |> range(start: 2018-05-22T19:53:26Z)\n    |> covariance(columns: [\"x\", \"y\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						Source: "t_covariance",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_covariance",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 39,
							Line:   4,
						},
						Source: "(tables=<-) =>\n  tables\n    |> range(start: 2018-05-22T19:53:26Z)\n    |> covariance(columns: [\"x\", \"y\"])",
						Start: ast.Position{
							Column: 16,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   2,
									},
									Source: "tables",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   3,
								},
								Source: "tables\n    |> range(start: 2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "start: 2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 21,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   3,
									},
									Source: "range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   4,
							},
							Source: "tables\n    |> range(start: 2018-05-22T19:53:26Z)\n    |> covariance(columns: [\"x\", \"y\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   4,
									},
									Source: "columns: [\"x\", \"y\"]",
									Start: ast.Position{
										Column: 19,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   4,
										},
										Source: "columns: [\"x\", \"y\"]",
										Start: ast.Position{
											Column: 19,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   4,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 19,
												Line:   4,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   4,
											},
											Source: "[\"x\", \"y\"]",
											Start: ast.Position{
												Column: 28,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   4,
												},
												Source: "\"x\"",
												Start: ast.Position{
													Column: 29,
													Line:   4,
												},
											},
										},
										Value: "x",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   4,
												},
												Source: "\"y\"",
												Start: ast.Position{
													Column: 34,
													Line:   4,
												},
											},
										},
										Value: "y",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   4,
								},
								Source: "covariance(columns: [\"x\", \"y\"])",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   4,
									},
									Source: "covariance",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "covariance",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   1,
							},
							Source: "tables=<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   1,
								},
								Source: "tables",
								Start: ast.Position{
									Column: 17,
									Line:   1,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 24,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 134,
						Line:   6,
					},
					Source: "testingTest(name: \"t_covariance\", load: testLoadData, infile: \"covariance.in.csv\", outfile: \"covariance.out.csv\", test: t_covariance)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 133,
								Line:   6,
							},
							Source: "name: \"t_covariance\", load: testLoadData, infile: \"covariance.in.csv\", outfile: \"covariance.out.csv\", test: t_covariance",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   6,
								},
								Source: "name: \"t_covariance\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   6,
									},
									Source: "\"t_covariance\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "t_covariance",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 35,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 35,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 41,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   6,
								},
								Source: "infile: \"covariance.in.csv\"",
								Start: ast.Position{
									Column: 55,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 55,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 82,
										Line:   6,
									},
									Source: "\"covariance.in.csv\"",
									Start: ast.Position{
										Column: 63,
										Line:   6,
									},
								},
							},
							Value: "covariance.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 113,
									Line:   6,
								},
								Source: "outfile: \"covariance.out.csv\"",
								Start: ast.Position{
									Column: 84,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 91,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 84,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 113,
										Line:   6,
									},
									Source: "\"covariance.out.csv\"",
									Start: ast.Position{
										Column: 93,
										Line:   6,
									},
								},
							},
							Value: "covariance.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 133,
									Line:   6,
								},
								Source: "test: t_covariance",
								Start: ast.Position{
									Column: 115,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 119,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 115,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 133,
										Line:   6,
									},
									Source: "t_covariance",
									Start: ast.Position{
										Column: 121,
										Line:   6,
									},
								},
							},
							Name: "t_covariance",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 134,
							Line:   6,
						},
						Source: "testingTest(name: \"t_covariance\", load: testLoadData, infile: \"covariance.in.csv\", outfile: \"covariance.out.csv\", test: t_covariance)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "covariance.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 198,
					Line:   8,
				},
				Source: "covariance_missing_column_1 = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n    |> covariance(columns: [\"x\", \"r\"])\n\t|> yield(name: \"0\")\n\n\ntestingTest(name: \"covariance_missing_column_1\", load: testLoadData, infile: \"covariance_missing_column_1.in.csv\", outfile: \"covariance_missing_column_1.out.csv\", test: covariance_missing_column_1)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   5,
					},
					Source: "covariance_missing_column_1 = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n    |> covariance(columns: [\"x\", \"r\"])\n\t|> yield(name: \"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   1,
						},
						Source: "covariance_missing_column_1",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "covariance_missing_column_1",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n    |> covariance(columns: [\"x\", \"r\"])\n\t|> yield(name: \"0\")",
						Start: ast.Position{
							Column: 31,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   3,
									},
									Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   3,
												},
												Source: "start: 2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 18,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "range(start: 2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   4,
								},
								Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n    |> covariance(columns: [\"x\", \"r\"])",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   4,
										},
										Source: "columns: [\"x\", \"r\"]",
										Start: ast.Position{
											Column: 19,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   4,
											},
											Source: "columns: [\"x\", \"r\"]",
											Start: ast.Position{
												Column: 19,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   4,
												},
												Source: "[\"x\", \"r\"]",
												Start: ast.Position{
													Column: 28,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   4,
													},
													Source: "\"x\"",
													Start: ast.Position{
														Column: 29,
														Line:   4,
													},
												},
											},
											Value: "x",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   4,
													},
													Source: "\"r\"",
													Start: ast.Position{
														Column: 34,
														Line:   4,
													},
												},
											},
											Value: "r",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   4,
									},
									Source: "covariance(columns: [\"x\", \"r\"])",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   4,
										},
										Source: "covariance",
										Start: ast.Position{
											Column: 8,
											Line:   4,
										},
									},
								},
								Name: "covariance",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   5,
							},
							Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n    |> covariance(columns: [\"x\", \"r\"])\n\t|> yield(name: \"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   5,
									},
									Source: "name: \"0\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   5,
										},
										Source: "name: \"0\"",
										Start: ast.Position{
											Column: 11,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   5,
											},
											Source: "name",
											Start: ast.Position{
												Column: 11,
												Line:   5,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   5,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   5,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   5,
								},
								Source: "yield(name: \"0\")",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   5,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 32,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 32,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 38,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 198,
						Line:   8,
					},
					Source: "testingTest(name: \"covariance_missing_column_1\", load: testLoadData, infile: \"covariance_missing_column_1.in.csv\", outfile: \"covariance_missing_column_1.out.csv\", test: covariance_missing_column_1)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 197,
								Line:   8,
							},
							Source: "name: \"covariance_missing_column_1\", load: testLoadData, infile: \"covariance_missing_column_1.in.csv\", outfile: \"covariance_missing_column_1.out.csv\", test: covariance_missing_column_1",
							Start: ast.Position{
								Column: 13,
								Line:   8,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   8,
								},
								Source: "name: \"covariance_missing_column_1\"",
								Start: ast.Position{
									Column: 13,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   8,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   8,
									},
									Source: "\"covariance_missing_column_1\"",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Value: "covariance_missing_column_1",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   8,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 50,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   8,
									},
									Source: "load",
									Start: ast.Position{
										Column: 50,
										Line:   8,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   8,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 56,
										Line:   8,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   8,
								},
								Source: "infile: \"covariance_missing_column_1.in.csv\"",
								Start: ast.Position{
									Column: 70,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 76,
										Line:   8,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 70,
										Line:   8,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   8,
									},
									Source: "\"covariance_missing_column_1.in.csv\"",
									Start: ast.Position{
										Column: 78,
										Line:   8,
									},
								},
							},
							Value: "covariance_missing_column_1.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 162,
									Line:   8,
								},
								Source: "outfile: \"covariance_missing_column_1.out.csv\"",
								Start: ast.Position{
									Column: 116,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 116,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 162,
										Line:   8,
									},
									Source: "\"covariance_missing_column_1.out.csv\"",
									Start: ast.Position{
										Column: 125,
										Line:   8,
									},
								},
							},
							Value: "covariance_missing_column_1.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 197,
									Line:   8,
								},
								Source: "test: covariance_missing_column_1",
								Start: ast.Position{
									Column: 164,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 168,
										Line:   8,
									},
									Source: "test",
									Start: ast.Position{
										Column: 164,
										Line:   8,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 197,
										Line:   8,
									},
									Source: "covariance_missing_column_1",
									Start: ast.Position{
										Column: 170,
										Line:   8,
									},
								},
							},
							Name: "covariance_missing_column_1",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 198,
							Line:   8,
						},
						Source: "testingTest(name: \"covariance_missing_column_1\", load: testLoadData, infile: \"covariance_missing_column_1.in.csv\", outfile: \"covariance_missing_column_1.out.csv\", test: covariance_missing_column_1)",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   8,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   8,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "covariance_missing_column_1.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 198,
					Line:   8,
				},
				Source: "covariance_missing_column_2 = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n  |> covariance(columns: [\"x\", \"y\"])\n\t|> yield(name: \"0\")\n\n\ntestingTest(name: \"covariance_missing_column_2\", load: testLoadData, infile: \"covariance_missing_column_2.in.csv\", outfile: \"covariance_missing_column_2.out.csv\", test: covariance_missing_column_2)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   5,
					},
					Source: "covariance_missing_column_2 = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n  |> covariance(columns: [\"x\", \"y\"])\n\t|> yield(name: \"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   1,
						},
						Source: "covariance_missing_column_2",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "covariance_missing_column_2",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n  |> covariance(columns: [\"x\", \"y\"])\n\t|> yield(name: \"0\")",
						Start: ast.Position{
							Column: 31,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   3,
									},
									Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   3,
												},
												Source: "start: 2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 18,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "range(start: 2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   4,
								},
								Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n  |> covariance(columns: [\"x\", \"y\"])",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   4,
										},
										Source: "columns: [\"x\", \"y\"]",
										Start: ast.Position{
											Column: 17,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   4,
											},
											Source: "columns: [\"x\", \"y\"]",
											Start: ast.Position{
												Column: 17,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 17,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   4,
												},
												Source: "[\"x\", \"y\"]",
												Start: ast.Position{
													Column: 26,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   4,
													},
													Source: "\"x\"",
													Start: ast.Position{
														Column: 27,
														Line:   4,
													},
												},
											},
											Value: "x",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   4,
													},
													Source: "\"y\"",
													Start: ast.Position{
														Column: 32,
														Line:   4,
													},
												},
											},
											Value: "y",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   4,
									},
									Source: "covariance(columns: [\"x\", \"y\"])",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   4,
										},
										Source: "covariance",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "covariance",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   5,
							},
							Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n  |> covariance(columns: [\"x\", \"y\"])\n\t|> yield(name: \"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   5,
									},
									Source: "name: \"0\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   5,
										},
										Source: "name: \"0\"",
										Start: ast.Position{
											Column: 11,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   5,
											},
											Source: "name",
											Start: ast.Position{
												Column: 11,
												Line:   5,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   5,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   5,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   5,
								},
								Source: "yield(name: \"0\")",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   5,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 32,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 32,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 38,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 198,
						Line:   8,
					},
					Source: "testingTest(name: \"covariance_missing_column_2\", load: testLoadData, infile: \"covariance_missing_column_2.in.csv\", outfile: \"covariance_missing_column_2.out.csv\", test: covariance_missing_column_2)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 197,
								Line:   8,
							},
							Source: "name: \"covariance_missing_column_2\", load: testLoadData, infile: \"covariance_missing_column_2.in.csv\", outfile: \"covariance_missing_column_2.out.csv\", test: covariance_missing_column_2",
							Start: ast.Position{
								Column: 13,
								Line:   8,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   8,
								},
								Source: "name: \"covariance_missing_column_2\"",
								Start: ast.Position{
									Column: 13,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   8,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   8,
									},
									Source: "\"covariance_missing_column_2\"",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Value: "covariance_missing_column_2",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   8,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 50,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   8,
									},
									Source: "load",
									Start: ast.Position{
										Column: 50,
										Line:   8,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   8,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 56,
										Line:   8,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   8,
								},
								Source: "infile: \"covariance_missing_column_2.in.csv\"",
								Start: ast.Position{
									Column: 70,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 76,
										Line:   8,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 70,
										Line:   8,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   8,
									},
									Source: "\"covariance_missing_column_2.in.csv\"",
									Start: ast.Position{
										Column: 78,
										Line:   8,
									},
								},
							},
							Value: "covariance_missing_column_2.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 162,
									Line:   8,
								},
								Source: "outfile: \"covariance_missing_column_2.out.csv\"",
								Start: ast.Position{
									Column: 116,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 116,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 162,
										Line:   8,
									},
									Source: "\"covariance_missing_column_2.out.csv\"",
									Start: ast.Position{
										Column: 125,
										Line:   8,
									},
								},
							},
							Value: "covariance_missing_column_2.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 197,
									Line:   8,
								},
								Source: "test: covariance_missing_column_2",
								Start: ast.Position{
									Column: 164,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 168,
										Line:   8,
									},
									Source: "test",
									Start: ast.Position{
										Column: 164,
										Line:   8,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 197,
										Line:   8,
									},
									Source: "covariance_missing_column_2",
									Start: ast.Position{
										Column: 170,
										Line:   8,
									},
								},
							},
							Name: "covariance_missing_column_2",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 198,
							Line:   8,
						},
						Source: "testingTest(name: \"covariance_missing_column_2\", load: testLoadData, infile: \"covariance_missing_column_2.in.csv\", outfile: \"covariance_missing_column_2.out.csv\", test: covariance_missing_column_2)",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   8,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   8,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "covariance_missing_column_2.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   10,
				},
				Source: "t_cumulative_sum = (table=<-) => table\n  |> cumulativeSum(columns: [\"v0\", \"v1\"])\n\ntestingTest(\n    name: \"cumulative_sum\", \n    load: testLoadData,\n    infile: \"cumulative_sum.in.csv\",\n    outfile: \"cumulative_sum.out.csv\", \n    test: t_cumulative_sum\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 42,
						Line:   2,
					},
					Source: "t_cumulative_sum = (table=<-) => table\n  |> cumulativeSum(columns: [\"v0\", \"v1\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						Source: "t_cumulative_sum",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_cumulative_sum",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 42,
							Line:   2,
						},
						Source: "(table=<-) => table\n  |> cumulativeSum(columns: [\"v0\", \"v1\"])",
						Start: ast.Position{
							Column: 20,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 34,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   2,
							},
							Source: "table\n  |> cumulativeSum(columns: [\"v0\", \"v1\"])",
							Start: ast.Position{
								Column: 34,
								Line:   1,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   2,
									},
									Source: "columns: [\"v0\", \"v1\"]",
									Start: ast.Position{
										Column: 20,
										Line:   2,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   2,
										},
										Source: "columns: [\"v0\", \"v1\"]",
										Start: ast.Position{
											Column: 20,
											Line:   2,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   2,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 20,
												Line:   2,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   2,
											},
											Source: "[\"v0\", \"v1\"]",
											Start: ast.Position{
												Column: 29,
												Line:   2,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   2,
												},
												Source: "\"v0\"",
												Start: ast.Position{
													Column: 30,
													Line:   2,
												},
											},
										},
										Value: "v0",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   2,
												},
												Source: "\"v1\"",
												Start: ast.Position{
													Column: 36,
													Line:   2,
												},
											},
										},
										Value: "v1",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   2,
								},
								Source: "cumulativeSum(columns: [\"v0\", \"v1\"])",
								Start: ast.Position{
									Column: 6,
									Line:   2,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   2,
									},
									Source: "cumulativeSum",
									Start: ast.Position{
										Column: 6,
										Line:   2,
									},
								},
							},
							Name: "cumulativeSum",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 21,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   10,
					},
					Source: "testingTest(\n    name: \"cumulative_sum\", \n    load: testLoadData,\n    infile: \"cumulative_sum.in.csv\",\n    outfile: \"cumulative_sum.out.csv\", \n    test: t_cumulative_sum\n)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   9,
							},
							Source: "name: \"cumulative_sum\", \n    load: testLoadData,\n    infile: \"cumulative_sum.in.csv\",\n    outfile: \"cumulative_sum.out.csv\", \n    test: t_cumulative_sum",
							Start: ast.Position{
								Column: 5,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   5,
								},
								Source: "name: \"cumulative_sum\"",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   5,
									},
									Source: "\"cumulative_sum\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Value: "cumulative_sum",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   7,
								},
								Source: "infile: \"cumulative_sum.in.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   7,
									},
									Source: "\"cumulative_sum.in.csv\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Value: "cumulative_sum.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   8,
								},
								Source: "outfile: \"cumulative_sum.out.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   8,
									},
									Source: "\"cumulative_sum.out.csv\"",
									Start: ast.Position{
										Column: 14,
										Line:   8,
									},
								},
							},
							Value: "cumulative_sum.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   9,
								},
								Source: "test: t_cumulative_sum",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   9,
									},
									Source: "t_cumulative_sum",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Name: "t_cumulative_sum",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   10,
						},
						Source: "testingTest(\n    name: \"cumulative_sum\", \n    load: testLoadData,\n    infile: \"cumulative_sum.in.csv\",\n    outfile: \"cumulative_sum.out.csv\", \n    test: t_cumulative_sum\n)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "cumulative_sum.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   10,
				},
				Source: "t_cumulative_sum_default = (table=<-) => table\n  |> cumulativeSum()\n\ntestingTest(\n    name: \"cumulative_sum_default\", \n    load: testLoadData,\n    infile: \"cumulative_sum_default.in.csv\",\n    outfile: \"cumulative_sum_default.out.csv\", \n    test: t_cumulative_sum_default\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   2,
					},
					Source: "t_cumulative_sum_default = (table=<-) => table\n  |> cumulativeSum()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   1,
						},
						Source: "t_cumulative_sum_default",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_cumulative_sum_default",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   2,
						},
						Source: "(table=<-) => table\n  |> cumulativeSum()",
						Start: ast.Position{
							Column: 28,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 42,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   2,
							},
							Source: "table\n  |> cumulativeSum()",
							Start: ast.Position{
								Column: 42,
								Line:   1,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   2,
								},
								Source: "cumulativeSum()",
								Start: ast.Position{
									Column: 6,
									Line:   2,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   2,
									},
									Source: "cumulativeSum",
									Start: ast.Position{
										Column: 6,
										Line:   2,
									},
								},
							},
							Name: "cumulativeSum",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 29,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 29,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 35,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   10,
					},
					Source: "testingTest(\n    name: \"cumulative_sum_default\", \n    load: testLoadData,\n    infile: \"cumulative_sum_default.in.csv\",\n    outfile: \"cumulative_sum_default.out.csv\", \n    test: t_cumulative_sum_default\n)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   9,
							},
							Source: "name: \"cumulative_sum_default\", \n    load: testLoadData,\n    infile: \"cumulative_sum_default.in.csv\",\n    outfile: \"cumulative_sum_default.out.csv\", \n    test: t_cumulative_sum_default",
							Start: ast.Position{
								Column: 5,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   5,
								},
								Source: "name: \"cumulative_sum_default\"",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   5,
									},
									Source: "\"cumulative_sum_default\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Value: "cumulative_sum_default",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   7,
								},
								Source: "infile: \"cumulative_sum_default.in.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   7,
									},
									Source: "\"cumulative_sum_default.in.csv\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Value: "cumulative_sum_default.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   8,
								},
								Source: "outfile: \"cumulative_sum_default.out.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   8,
									},
									Source: "\"cumulative_sum_default.out.csv\"",
									Start: ast.Position{
										Column: 14,
										Line:   8,
									},
								},
							},
							Value: "cumulative_sum_default.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   9,
								},
								Source: "test: t_cumulative_sum_default",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   9,
									},
									Source: "t_cumulative_sum_default",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Name: "t_cumulative_sum_default",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   10,
						},
						Source: "testingTest(\n    name: \"cumulative_sum_default\", \n    load: testLoadData,\n    infile: \"cumulative_sum_default.in.csv\",\n    outfile: \"cumulative_sum_default.out.csv\", \n    test: t_cumulative_sum_default\n)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "cumulative_sum_default.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   10,
				},
				Source: "t_cumulative_sum_noop = (table=<-) => table\n  |> cumulativeSum()\n\ntestingTest(\n    name: \"cumulative_sum_noop\", \n    load: testLoadData,\n    infile: \"cumulative_sum_noop.in.csv\",\n    outfile: \"cumulative_sum_noop.out.csv\", \n    test: t_cumulative_sum_noop\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   2,
					},
					Source: "t_cumulative_sum_noop = (table=<-) => table\n  |> cumulativeSum()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						Source: "t_cumulative_sum_noop",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_cumulative_sum_noop",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   2,
						},
						Source: "(table=<-) => table\n  |> cumulativeSum()",
						Start: ast.Position{
							Column: 25,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 39,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   2,
							},
							Source: "table\n  |> cumulativeSum()",
							Start: ast.Position{
								Column: 39,
								Line:   1,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   2,
								},
								Source: "cumulativeSum()",
								Start: ast.Position{
									Column: 6,
									Line:   2,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   2,
									},
									Source: "cumulativeSum",
									Start: ast.Position{
										Column: 6,
										Line:   2,
									},
								},
							},
							Name: "cumulativeSum",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 26,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 26,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 32,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   10,
					},
					Source: "testingTest(\n    name: \"cumulative_sum_noop\", \n    load: testLoadData,\n    infile: \"cumulative_sum_noop.in.csv\",\n    outfile: \"cumulative_sum_noop.out.csv\", \n    test: t_cumulative_sum_noop\n)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   9,
							},
							Source: "name: \"cumulative_sum_noop\", \n    load: testLoadData,\n    infile: \"cumulative_sum_noop.in.csv\",\n    outfile: \"cumulative_sum_noop.out.csv\", \n    test: t_cumulative_sum_noop",
							Start: ast.Position{
								Column: 5,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   5,
								},
								Source: "name: \"cumulative_sum_noop\"",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   5,
									},
									Source: "\"cumulative_sum_noop\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Value: "cumulative_sum_noop",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   7,
								},
								Source: "infile: \"cumulative_sum_noop.in.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   7,
									},
									Source: "\"cumulative_sum_noop.in.csv\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Value: "cumulative_sum_noop.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   8,
								},
								Source: "outfile: \"cumulative_sum_noop.out.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   8,
									},
									Source: "\"cumulative_sum_noop.out.csv\"",
									Start: ast.Position{
										Column: 14,
										Line:   8,
									},
								},
							},
							Value: "cumulative_sum_noop.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   9,
								},
								Source: "test: t_cumulative_sum_noop",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   9,
									},
									Source: "t_cumulative_sum_noop",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Name: "t_cumulative_sum_noop",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   10,
						},
						Source: "testingTest(\n    name: \"cumulative_sum_noop\", \n    load: testLoadData,\n    infile: \"cumulative_sum_noop.in.csv\",\n    outfile: \"cumulative_sum_noop.out.csv\", \n    test: t_cumulative_sum_noop\n)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "cumulative_sum_noop.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 132,
					Line:   6,
				},
				Source: "t_derivative = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> derivative(unit:100ms)\n\ntestingTest(name: \"derivative\", load: testLoadData, infile: \"derivative.in.csv\", outfile: \"derivative.out.csv\", test: t_derivative)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 28,
						Line:   4,
					},
					Source: "t_derivative = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> derivative(unit:100ms)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						Source: "t_derivative",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_derivative",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> derivative(unit:100ms)",
						Start: ast.Position{
							Column: 16,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   3,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "start: 2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 12,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 12,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 19,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   3,
									},
									Source: "range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   4,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> derivative(unit:100ms)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   4,
									},
									Source: "unit:100ms",
									Start: ast.Position{
										Column: 17,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   4,
										},
										Source: "unit:100ms",
										Start: ast.Position{
											Column: 17,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   4,
											},
											Source: "unit",
											Start: ast.Position{
												Column: 17,
												Line:   4,
											},
										},
									},
									Name: "unit",
								},
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   4,
											},
											Source: "100ms",
											Start: ast.Position{
												Column: 22,
												Line:   4,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(100),
										Unit:      "ms",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   4,
								},
								Source: "derivative(unit:100ms)",
								Start: ast.Position{
									Column: 6,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   4,
									},
									Source: "derivative",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Name: "derivative",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 132,
						Line:   6,
					},
					Source: "testingTest(name: \"derivative\", load: testLoadData, infile: \"derivative.in.csv\", outfile: \"derivative.out.csv\", test: t_derivative)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 131,
								Line:   6,
							},
							Source: "name: \"derivative\", load: testLoadData, infile: \"derivative.in.csv\", outfile: \"derivative.out.csv\", test: t_derivative",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   6,
								},
								Source: "name: \"derivative\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   6,
									},
									Source: "\"derivative\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "derivative",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 33,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 33,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 39,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   6,
								},
								Source: "infile: \"derivative.in.csv\"",
								Start: ast.Position{
									Column: 53,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 53,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   6,
									},
									Source: "\"derivative.in.csv\"",
									Start: ast.Position{
										Column: 61,
										Line:   6,
									},
								},
							},
							Value: "derivative.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   6,
								},
								Source: "outfile: \"derivative.out.csv\"",
								Start: ast.Position{
									Column: 82,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 82,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   6,
									},
									Source: "\"derivative.out.csv\"",
									Start: ast.Position{
										Column: 91,
										Line:   6,
									},
								},
							},
							Value: "derivative.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 131,
									Line:   6,
								},
								Source: "test: t_derivative",
								Start: ast.Position{
									Column: 113,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 113,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 131,
										Line:   6,
									},
									Source: "t_derivative",
									Start: ast.Position{
										Column: 119,
										Line:   6,
									},
								},
							},
							Name: "t_derivative",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 132,
							Line:   6,
						},
						Source: "testingTest(name: \"derivative\", load: testLoadData, infile: \"derivative.in.csv\", outfile: \"derivative.out.csv\", test: t_derivative)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "derivative.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 178,
					Line:   6,
				},
				Source: "derivative_nonnegative = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> derivative(unit:100ms, nonNegative: true)\n\ntestingTest(name: \"derivative_nonnegative\", load: testLoadData, infile: \"derivative_nonnegative.in.csv\", outfile: \"derivative_nonnegative.out.csv\", test: derivative_nonnegative)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 49,
						Line:   4,
					},
					Source: "derivative_nonnegative = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> derivative(unit:100ms, nonNegative: true)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   1,
						},
						Source: "derivative_nonnegative",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "derivative_nonnegative",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> derivative(unit:100ms, nonNegative: true)",
						Start: ast.Position{
							Column: 26,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> derivative(unit:100ms, nonNegative: true)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   4,
									},
									Source: "unit:100ms, nonNegative: true",
									Start: ast.Position{
										Column: 19,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   4,
										},
										Source: "unit:100ms",
										Start: ast.Position{
											Column: 19,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   4,
											},
											Source: "unit",
											Start: ast.Position{
												Column: 19,
												Line:   4,
											},
										},
									},
									Name: "unit",
								},
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   4,
											},
											Source: "100ms",
											Start: ast.Position{
												Column: 24,
												Line:   4,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(100),
										Unit:      "ms",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   4,
										},
										Source: "nonNegative: true",
										Start: ast.Position{
											Column: 31,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   4,
											},
											Source: "nonNegative",
											Start: ast.Position{
												Column: 31,
												Line:   4,
											},
										},
									},
									Name: "nonNegative",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   4,
											},
											Source: "true",
											Start: ast.Position{
												Column: 44,
												Line:   4,
											},
										},
									},
									Name: "true",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   4,
								},
								Source: "derivative(unit:100ms, nonNegative: true)",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   4,
									},
									Source: "derivative",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "derivative",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 27,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 33,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 178,
						Line:   6,
					},
					Source: "testingTest(name: \"derivative_nonnegative\", load: testLoadData, infile: \"derivative_nonnegative.in.csv\", outfile: \"derivative_nonnegative.out.csv\", test: derivative_nonnegative)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 177,
								Line:   6,
							},
							Source: "name: \"derivative_nonnegative\", load: testLoadData, infile: \"derivative_nonnegative.in.csv\", outfile: \"derivative_nonnegative.out.csv\", test: derivative_nonnegative",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   6,
								},
								Source: "name: \"derivative_nonnegative\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   6,
									},
									Source: "\"derivative_nonnegative\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "derivative_nonnegative",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 45,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 45,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 51,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 104,
									Line:   6,
								},
								Source: "infile: \"derivative_nonnegative.in.csv\"",
								Start: ast.Position{
									Column: 65,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 65,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 104,
										Line:   6,
									},
									Source: "\"derivative_nonnegative.in.csv\"",
									Start: ast.Position{
										Column: 73,
										Line:   6,
									},
								},
							},
							Value: "derivative_nonnegative.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   6,
								},
								Source: "outfile: \"derivative_nonnegative.out.csv\"",
								Start: ast.Position{
									Column: 106,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 113,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 106,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   6,
									},
									Source: "\"derivative_nonnegative.out.csv\"",
									Start: ast.Position{
										Column: 115,
										Line:   6,
									},
								},
							},
							Value: "derivative_nonnegative.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 177,
									Line:   6,
								},
								Source: "test: derivative_nonnegative",
								Start: ast.Position{
									Column: 149,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 153,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 149,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 177,
										Line:   6,
									},
									Source: "derivative_nonnegative",
									Start: ast.Position{
										Column: 155,
										Line:   6,
									},
								},
							},
							Name: "derivative_nonnegative",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 178,
							Line:   6,
						},
						Source: "testingTest(name: \"derivative_nonnegative\", load: testLoadData, infile: \"derivative_nonnegative.in.csv\", outfile: \"derivative_nonnegative.out.csv\", test: derivative_nonnegative)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "derivative_nonnegative.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 132,
					Line:   6,
				},
				Source: "t_difference = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> difference()\n\ntestingTest(name: \"difference\", load: testLoadData, infile: \"difference.in.csv\", outfile: \"difference.out.csv\", test: t_difference)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   4,
					},
					Source: "t_difference = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> difference()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						Source: "t_difference",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_difference",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> difference()",
						Start: ast.Position{
							Column: 16,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> difference()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   4,
								},
								Source: "difference()",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   4,
									},
									Source: "difference",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "difference",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 132,
						Line:   6,
					},
					Source: "testingTest(name: \"difference\", load: testLoadData, infile: \"difference.in.csv\", outfile: \"difference.out.csv\", test: t_difference)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 131,
								Line:   6,
							},
							Source: "name: \"difference\", load: testLoadData, infile: \"difference.in.csv\", outfile: \"difference.out.csv\", test: t_difference",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   6,
								},
								Source: "name: \"difference\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   6,
									},
									Source: "\"difference\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "difference",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 33,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 33,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 39,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   6,
								},
								Source: "infile: \"difference.in.csv\"",
								Start: ast.Position{
									Column: 53,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 53,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   6,
									},
									Source: "\"difference.in.csv\"",
									Start: ast.Position{
										Column: 61,
										Line:   6,
									},
								},
							},
							Value: "difference.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   6,
								},
								Source: "outfile: \"difference.out.csv\"",
								Start: ast.Position{
									Column: 82,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 82,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   6,
									},
									Source: "\"difference.out.csv\"",
									Start: ast.Position{
										Column: 91,
										Line:   6,
									},
								},
							},
							Value: "difference.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 131,
									Line:   6,
								},
								Source: "test: t_difference",
								Start: ast.Position{
									Column: 113,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 113,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 131,
										Line:   6,
									},
									Source: "t_difference",
									Start: ast.Position{
										Column: 119,
										Line:   6,
									},
								},
							},
							Name: "t_difference",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 132,
							Line:   6,
						},
						Source: "testingTest(name: \"difference\", load: testLoadData, infile: \"difference.in.csv\", outfile: \"difference.out.csv\", test: t_difference)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "difference.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 170,
					Line:   6,
				},
				Source: "difference_one_value = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> difference(nonNegative:true)\n\ntestingTest(name: \"difference_one_value\", load: testLoadData, infile: \"difference_one_value.in.csv\", outfile: \"difference_one_value.out.csv\", test: difference_one_value)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 36,
						Line:   4,
					},
					Source: "difference_one_value = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> difference(nonNegative:true)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   1,
						},
						Source: "difference_one_value",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "difference_one_value",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> difference(nonNegative:true)",
						Start: ast.Position{
							Column: 24,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> difference(nonNegative:true)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   4,
									},
									Source: "nonNegative:true",
									Start: ast.Position{
										Column: 19,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   4,
										},
										Source: "nonNegative:true",
										Start: ast.Position{
											Column: 19,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   4,
											},
											Source: "nonNegative",
											Start: ast.Position{
												Column: 19,
												Line:   4,
											},
										},
									},
									Name: "nonNegative",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   4,
											},
											Source: "true",
											Start: ast.Position{
												Column: 31,
												Line:   4,
											},
										},
									},
									Name: "true",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   4,
								},
								Source: "difference(nonNegative:true)",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   4,
									},
									Source: "difference",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "difference",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 25,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 25,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 31,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 170,
						Line:   6,
					},
					Source: "testingTest(name: \"difference_one_value\", load: testLoadData, infile: \"difference_one_value.in.csv\", outfile: \"difference_one_value.out.csv\", test: difference_one_value)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 169,
								Line:   6,
							},
							Source: "name: \"difference_one_value\", load: testLoadData, infile: \"difference_one_value.in.csv\", outfile: \"difference_one_value.out.csv\", test: difference_one_value",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   6,
								},
								Source: "name: \"difference_one_value\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   6,
									},
									Source: "\"difference_one_value\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "difference_one_value",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 43,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 43,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 49,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 100,
									Line:   6,
								},
								Source: "infile: \"difference_one_value.in.csv\"",
								Start: ast.Position{
									Column: 63,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 63,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 100,
										Line:   6,
									},
									Source: "\"difference_one_value.in.csv\"",
									Start: ast.Position{
										Column: 71,
										Line:   6,
									},
								},
							},
							Value: "difference_one_value.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 141,
									Line:   6,
								},
								Source: "outfile: \"difference_one_value.out.csv\"",
								Start: ast.Position{
									Column: 102,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 102,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   6,
									},
									Source: "\"difference_one_value.out.csv\"",
									Start: ast.Position{
										Column: 111,
										Line:   6,
									},
								},
							},
							Value: "difference_one_value.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 169,
									Line:   6,
								},
								Source: "test: difference_one_value",
								Start: ast.Position{
									Column: 143,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 143,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 169,
										Line:   6,
									},
									Source: "difference_one_value",
									Start: ast.Position{
										Column: 149,
										Line:   6,
									},
								},
							},
							Name: "difference_one_value",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 170,
							Line:   6,
						},
						Source: "testingTest(name: \"difference_one_value\", load: testLoadData, infile: \"difference_one_value.in.csv\", outfile: \"difference_one_value.out.csv\", test: difference_one_value)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "difference_one_value.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 156,
					Line:   9,
				},
				Source: "t_difference_panic = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._field == \"no_exist\")\n    |> difference()\n\n\n\ntestingTest(name: \"difference_panic\", load: testLoadData, infile: \"difference_panic.in.csv\", outfile: \"difference_panic.out.csv\", test: t_difference_panic)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   5,
					},
					Source: "t_difference_panic = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._field == \"no_exist\")\n    |> difference()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   1,
						},
						Source: "t_difference_panic",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_difference_panic",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._field == \"no_exist\")\n    |> difference()",
						Start: ast.Position{
							Column: 22,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 14,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 20,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 8,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   4,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._field == \"no_exist\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   4,
										},
										Source: "fn: (r) => r._field == \"no_exist\"",
										Start: ast.Position{
											Column: 15,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   4,
											},
											Source: "fn: (r) => r._field == \"no_exist\"",
											Start: ast.Position{
												Column: 15,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 15,
													Line:   4,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   4,
												},
												Source: "(r) => r._field == \"no_exist\"",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Body: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   4,
													},
													Source: "r._field == \"no_exist\"",
													Start: ast.Position{
														Column: 26,
														Line:   4,
													},
												},
											},
											Left: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   4,
														},
														Source: "r._field",
														Start: ast.Position{
															Column: 26,
															Line:   4,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 27,
																Line:   4,
															},
															Source: "r",
															Start: ast.Position{
																Column: 26,
																Line:   4,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   4,
															},
															Source: "_field",
															Start: ast.Position{
																Column: 28,
																Line:   4,
															},
														},
													},
													Name: "_field",
												},
											},
											Operator: 14,
											Right: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   4,
														},
														Source: "\"no_exist\"",
														Start: ast.Position{
															Column: 38,
															Line:   4,
														},
													},
												},
												Value: "no_exist",
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   4,
													},
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   4,
														},
														Source: "r",
														Start: ast.Position{
															Column: 20,
															Line:   4,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   4,
									},
									Source: "filter(fn: (r) => r._field == \"no_exist\")",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   4,
										},
										Source: "filter",
										Start: ast.Position{
											Column: 8,
											Line:   4,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   5,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._field == \"no_exist\")\n    |> difference()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   5,
								},
								Source: "difference()",
								Start: ast.Position{
									Column: 8,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   5,
									},
									Source: "difference",
									Start: ast.Position{
										Column: 8,
										Line:   5,
									},
								},
							},
							Name: "difference",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 23,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 29,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 156,
						Line:   9,
					},
					Source: "testingTest(name: \"difference_panic\", load: testLoadData, infile: \"difference_panic.in.csv\", outfile: \"difference_panic.out.csv\", test: t_difference_panic)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 155,
								Line:   9,
							},
							Source: "name: \"difference_panic\", load: testLoadData, infile: \"difference_panic.in.csv\", outfile: \"difference_panic.out.csv\", test: t_difference_panic",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   9,
								},
								Source: "name: \"difference_panic\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   9,
									},
									Source: "\"difference_panic\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "difference_panic",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 39,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 39,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 45,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 92,
									Line:   9,
								},
								Source: "infile: \"difference_panic.in.csv\"",
								Start: ast.Position{
									Column: 59,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 59,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 92,
										Line:   9,
									},
									Source: "\"difference_panic.in.csv\"",
									Start: ast.Position{
										Column: 67,
										Line:   9,
									},
								},
							},
							Value: "difference_panic.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 129,
									Line:   9,
								},
								Source: "outfile: \"difference_panic.out.csv\"",
								Start: ast.Position{
									Column: 94,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 101,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 94,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   9,
									},
									Source: "\"difference_panic.out.csv\"",
									Start: ast.Position{
										Column: 103,
										Line:   9,
									},
								},
							},
							Value: "difference_panic.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 155,
									Line:   9,
								},
								Source: "test: t_difference_panic",
								Start: ast.Position{
									Column: 131,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 131,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 155,
										Line:   9,
									},
									Source: "t_difference_panic",
									Start: ast.Position{
										Column: 137,
										Line:   9,
									},
								},
							},
							Name: "t_difference_panic",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 156,
							Line:   9,
						},
						Source: "testingTest(name: \"difference_panic\", load: testLoadData, infile: \"difference_panic.in.csv\", outfile: \"difference_panic.out.csv\", test: t_difference_panic)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "difference_panic.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 124,
					Line:   7,
				},
				Source: "t_distinct = (table=<-) =>\n  table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> distinct(column:\"_value\")\n  |> yield(name:\"0\")\n\ntestingTest(name: \"distinct\", load: testLoadData, infile: \"distinct.in.csv\", outfile: \"distinct.out.csv\", test: t_distinct)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   5,
					},
					Source: "t_distinct = (table=<-) =>\n  table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> distinct(column:\"_value\")\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   1,
						},
						Source: "t_distinct",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_distinct",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> distinct(column:\"_value\")\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 14,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   3,
									},
									Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "start: 2018-05-20T19:53:26Z",
											Start: ast.Position{
												Column: 12,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "start: 2018-05-20T19:53:26Z",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   3,
													},
													Source: "2018-05-20T19:53:26Z",
													Start: ast.Position{
														Column: 19,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "range(start: 2018-05-20T19:53:26Z)",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 6,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   4,
								},
								Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> distinct(column:\"_value\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   4,
										},
										Source: "column:\"_value\"",
										Start: ast.Position{
											Column: 15,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   4,
											},
											Source: "column:\"_value\"",
											Start: ast.Position{
												Column: 15,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   4,
												},
												Source: "column",
												Start: ast.Position{
													Column: 15,
													Line:   4,
												},
											},
										},
										Name: "column",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   4,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 22,
													Line:   4,
												},
											},
										},
										Value: "_value",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   4,
									},
									Source: "distinct(column:\"_value\")",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   4,
										},
										Source: "distinct",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "distinct",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   5,
							},
							Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> distinct(column:\"_value\")\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   5,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   5,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   5,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   5,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   5,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   5,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 15,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 15,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 124,
						Line:   7,
					},
					Source: "testingTest(name: \"distinct\", load: testLoadData, infile: \"distinct.in.csv\", outfile: \"distinct.out.csv\", test: t_distinct)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 123,
								Line:   7,
							},
							Source: "name: \"distinct\", load: testLoadData, infile: \"distinct.in.csv\", outfile: \"distinct.out.csv\", test: t_distinct",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   7,
								},
								Source: "name: \"distinct\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   7,
									},
									Source: "\"distinct\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "distinct",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 31,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 31,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 37,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   7,
								},
								Source: "infile: \"distinct.in.csv\"",
								Start: ast.Position{
									Column: 51,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 51,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 76,
										Line:   7,
									},
									Source: "\"distinct.in.csv\"",
									Start: ast.Position{
										Column: 59,
										Line:   7,
									},
								},
							},
							Value: "distinct.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 105,
									Line:   7,
								},
								Source: "outfile: \"distinct.out.csv\"",
								Start: ast.Position{
									Column: 78,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 85,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 78,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   7,
									},
									Source: "\"distinct.out.csv\"",
									Start: ast.Position{
										Column: 87,
										Line:   7,
									},
								},
							},
							Value: "distinct.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   7,
								},
								Source: "test: t_distinct",
								Start: ast.Position{
									Column: 107,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 107,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   7,
									},
									Source: "t_distinct",
									Start: ast.Position{
										Column: 113,
										Line:   7,
									},
								},
							},
							Name: "t_distinct",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 124,
							Line:   7,
						},
						Source: "testingTest(name: \"distinct\", load: testLoadData, infile: \"distinct.in.csv\", outfile: \"distinct.out.csv\", test: t_distinct)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "distinct.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 158,
					Line:   7,
				},
				Source: "drop_after_rename = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns: {old: \"new\"})\n\t|> drop(columns: [\"old\"])\n\ntestingTest(name: \"drop_after_rename\", load: testLoadData, infile: \"drop_after_rename.in.csv\", outfile: \"drop_after_rename.out.csv\", test: drop_after_rename)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   5,
					},
					Source: "drop_after_rename = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns: {old: \"new\"})\n\t|> drop(columns: [\"old\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1,
						},
						Source: "drop_after_rename",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "drop_after_rename",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns: {old: \"new\"})\n\t|> drop(columns: [\"old\"])",
						Start: ast.Position{
							Column: 21,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   3,
									},
									Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   3,
												},
												Source: "start: 2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 18,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "range(start: 2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   4,
								},
								Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns: {old: \"new\"})",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   4,
										},
										Source: "columns: {old: \"new\"}",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   4,
											},
											Source: "columns: {old: \"new\"}",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   4,
												},
												Source: "{old: \"new\"}",
												Start: ast.Position{
													Column: 21,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   4,
													},
													Source: "old: \"new\"",
													Start: ast.Position{
														Column: 22,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   4,
														},
														Source: "old",
														Start: ast.Position{
															Column: 22,
															Line:   4,
														},
													},
												},
												Name: "old",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   4,
														},
														Source: "\"new\"",
														Start: ast.Position{
															Column: 27,
															Line:   4,
														},
													},
												},
												Value: "new",
											},
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   4,
									},
									Source: "rename(columns: {old: \"new\"})",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "rename",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "rename",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   5,
							},
							Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns: {old: \"new\"})\n\t|> drop(columns: [\"old\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   5,
									},
									Source: "columns: [\"old\"]",
									Start: ast.Position{
										Column: 10,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   5,
										},
										Source: "columns: [\"old\"]",
										Start: ast.Position{
											Column: 10,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   5,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   5,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   5,
											},
											Source: "[\"old\"]",
											Start: ast.Position{
												Column: 19,
												Line:   5,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   5,
												},
												Source: "\"old\"",
												Start: ast.Position{
													Column: 20,
													Line:   5,
												},
											},
										},
										Value: "old",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   5,
								},
								Source: "drop(columns: [\"old\"])",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 22,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 158,
						Line:   7,
					},
					Source: "testingTest(name: \"drop_after_rename\", load: testLoadData, infile: \"drop_after_rename.in.csv\", outfile: \"drop_after_rename.out.csv\", test: drop_after_rename)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 157,
								Line:   7,
							},
							Source: "name: \"drop_after_rename\", load: testLoadData, infile: \"drop_after_rename.in.csv\", outfile: \"drop_after_rename.out.csv\", test: drop_after_rename",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   7,
								},
								Source: "name: \"drop_after_rename\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   7,
									},
									Source: "\"drop_after_rename\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "drop_after_rename",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 40,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 40,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 46,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   7,
								},
								Source: "infile: \"drop_after_rename.in.csv\"",
								Start: ast.Position{
									Column: 60,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 60,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 94,
										Line:   7,
									},
									Source: "\"drop_after_rename.in.csv\"",
									Start: ast.Position{
										Column: 68,
										Line:   7,
									},
								},
							},
							Value: "drop_after_rename.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 132,
									Line:   7,
								},
								Source: "outfile: \"drop_after_rename.out.csv\"",
								Start: ast.Position{
									Column: 96,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 96,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   7,
									},
									Source: "\"drop_after_rename.out.csv\"",
									Start: ast.Position{
										Column: 105,
										Line:   7,
									},
								},
							},
							Value: "drop_after_rename.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 157,
									Line:   7,
								},
								Source: "test: drop_after_rename",
								Start: ast.Position{
									Column: 134,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 138,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 134,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 157,
										Line:   7,
									},
									Source: "drop_after_rename",
									Start: ast.Position{
										Column: 140,
										Line:   7,
									},
								},
							},
							Name: "drop_after_rename",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 158,
							Line:   7,
						},
						Source: "testingTest(name: \"drop_after_rename\", load: testLoadData, infile: \"drop_after_rename.in.csv\", outfile: \"drop_after_rename.out.csv\", test: drop_after_rename)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "drop_after_rename.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 162,
					Line:   9,
				},
				Source: "drop_before_rename = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"old\"])\n\t|> rename(columns: {old: \"new\"})\n\t|> yield(name: \"0\")\n\n\ntestingTest(name: \"drop_before_rename\", load: testLoadData, infile: \"drop_before_rename.in.csv\", outfile: \"drop_before_rename.out.csv\", test: drop_before_rename)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   6,
					},
					Source: "drop_before_rename = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"old\"])\n\t|> rename(columns: {old: \"new\"})\n\t|> yield(name: \"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   1,
						},
						Source: "drop_before_rename",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "drop_before_rename",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   6,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"old\"])\n\t|> rename(columns: {old: \"new\"})\n\t|> yield(name: \"0\")",
						Start: ast.Position{
							Column: 22,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 8,
												Line:   2,
											},
											Source: "table",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Name: "table",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   3,
												},
												Source: "start: 2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   3,
													},
													Source: "start: 2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   3,
														},
														Source: "start",
														Start: ast.Position{
															Column: 11,
															Line:   3,
														},
													},
												},
												Name: "start",
											},
											Value: &ast.DateTimeLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   3,
														},
														Source: "2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 18,
															Line:   3,
														},
													},
												},
												Value: time.Time{},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "range(start: 2018-05-22T19:53:26Z)",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   3,
												},
												Source: "range",
												Start: ast.Position{
													Column: 5,
													Line:   3,
												},
											},
										},
										Name: "range",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   4,
									},
									Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"old\"])",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   4,
											},
											Source: "columns: [\"old\"]",
											Start: ast.Position{
												Column: 10,
												Line:   4,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   4,
												},
												Source: "columns: [\"old\"]",
												Start: ast.Position{
													Column: 10,
													Line:   4,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   4,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 10,
														Line:   4,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   4,
													},
													Source: "[\"old\"]",
													Start: ast.Position{
														Column: 19,
														Line:   4,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   4,
														},
														Source: "\"old\"",
														Start: ast.Position{
															Column: 20,
															Line:   4,
														},
													},
												},
												Value: "old",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   4,
										},
										Source: "drop(columns: [\"old\"])",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 9,
												Line:   4,
											},
											Source: "drop",
											Start: ast.Position{
												Column: 5,
												Line:   4,
											},
										},
									},
									Name: "drop",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   5,
								},
								Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"old\"])\n\t|> rename(columns: {old: \"new\"})",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   5,
										},
										Source: "columns: {old: \"new\"}",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   5,
											},
											Source: "columns: {old: \"new\"}",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   5,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 12,
													Line:   5,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   5,
												},
												Source: "{old: \"new\"}",
												Start: ast.Position{
													Column: 21,
													Line:   5,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   5,
													},
													Source: "old: \"new\"",
													Start: ast.Position{
														Column: 22,
														Line:   5,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   5,
														},
														Source: "old",
														Start: ast.Position{
															Column: 22,
															Line:   5,
														},
													},
												},
												Name: "old",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   5,
														},
														Source: "\"new\"",
														Start: ast.Position{
															Column: 27,
															Line:   5,
														},
													},
												},
												Value: "new",
											},
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   5,
									},
									Source: "rename(columns: {old: \"new\"})",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   5,
										},
										Source: "rename",
										Start: ast.Position{
											Column: 5,
											Line:   5,
										},
									},
								},
								Name: "rename",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   6,
							},
							Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"old\"])\n\t|> rename(columns: {old: \"new\"})\n\t|> yield(name: \"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   6,
									},
									Source: "name: \"0\"",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   6,
										},
										Source: "name: \"0\"",
										Start: ast.Position{
											Column: 11,
											Line:   6,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   6,
											},
											Source: "name",
											Start: ast.Position{
												Column: 11,
												Line:   6,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   6,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   6,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   6,
								},
								Source: "yield(name: \"0\")",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   6,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 23,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 29,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 162,
						Line:   9,
					},
					Source: "testingTest(name: \"drop_before_rename\", load: testLoadData, infile: \"drop_before_rename.in.csv\", outfile: \"drop_before_rename.out.csv\", test: drop_before_rename)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 161,
								Line:   9,
							},
							Source: "name: \"drop_before_rename\", load: testLoadData, infile: \"drop_before_rename.in.csv\", outfile: \"drop_before_rename.out.csv\", test: drop_before_rename",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   9,
								},
								Source: "name: \"drop_before_rename\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   9,
									},
									Source: "\"drop_before_rename\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "drop_before_rename",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 41,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 41,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 47,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   9,
								},
								Source: "infile: \"drop_before_rename.in.csv\"",
								Start: ast.Position{
									Column: 61,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 61,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   9,
									},
									Source: "\"drop_before_rename.in.csv\"",
									Start: ast.Position{
										Column: 69,
										Line:   9,
									},
								},
							},
							Value: "drop_before_rename.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   9,
								},
								Source: "outfile: \"drop_before_rename.out.csv\"",
								Start: ast.Position{
									Column: 98,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 98,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   9,
									},
									Source: "\"drop_before_rename.out.csv\"",
									Start: ast.Position{
										Column: 107,
										Line:   9,
									},
								},
							},
							Value: "drop_before_rename.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 161,
									Line:   9,
								},
								Source: "test: drop_before_rename",
								Start: ast.Position{
									Column: 137,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 137,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 161,
										Line:   9,
									},
									Source: "drop_before_rename",
									Start: ast.Position{
										Column: 143,
										Line:   9,
									},
								},
							},
							Name: "drop_before_rename",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 162,
							Line:   9,
						},
						Source: "testingTest(name: \"drop_before_rename\", load: testLoadData, infile: \"drop_before_rename.in.csv\", outfile: \"drop_before_rename.out.csv\", test: drop_before_rename)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "drop_before_rename.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 162,
					Line:   7,
				},
				Source: "drop_newname_after = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns:{old:\"new\"})\n\t|> drop(columns: [\"new\"])\n\ntestingTest(name: \"drop_newname_after\", load: testLoadData, infile: \"drop_newname_after.in.csv\", outfile: \"drop_newname_after.out.csv\", test: drop_newname_after)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   5,
					},
					Source: "drop_newname_after = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns:{old:\"new\"})\n\t|> drop(columns: [\"new\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   1,
						},
						Source: "drop_newname_after",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "drop_newname_after",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns:{old:\"new\"})\n\t|> drop(columns: [\"new\"])",
						Start: ast.Position{
							Column: 22,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   3,
									},
									Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   3,
												},
												Source: "start: 2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 18,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "range(start: 2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   4,
								},
								Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns:{old:\"new\"})",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   4,
										},
										Source: "columns:{old:\"new\"}",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   4,
											},
											Source: "columns:{old:\"new\"}",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   4,
												},
												Source: "{old:\"new\"}",
												Start: ast.Position{
													Column: 20,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   4,
													},
													Source: "old:\"new\"",
													Start: ast.Position{
														Column: 21,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   4,
														},
														Source: "old",
														Start: ast.Position{
															Column: 21,
															Line:   4,
														},
													},
												},
												Name: "old",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   4,
														},
														Source: "\"new\"",
														Start: ast.Position{
															Column: 25,
															Line:   4,
														},
													},
												},
												Value: "new",
											},
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   4,
									},
									Source: "rename(columns:{old:\"new\"})",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "rename",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "rename",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   5,
							},
							Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> rename(columns:{old:\"new\"})\n\t|> drop(columns: [\"new\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   5,
									},
									Source: "columns: [\"new\"]",
									Start: ast.Position{
										Column: 10,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   5,
										},
										Source: "columns: [\"new\"]",
										Start: ast.Position{
											Column: 10,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   5,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   5,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   5,
											},
											Source: "[\"new\"]",
											Start: ast.Position{
												Column: 19,
												Line:   5,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   5,
												},
												Source: "\"new\"",
												Start: ast.Position{
													Column: 20,
													Line:   5,
												},
											},
										},
										Value: "new",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   5,
								},
								Source: "drop(columns: [\"new\"])",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 23,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 29,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 162,
						Line:   7,
					},
					Source: "testingTest(name: \"drop_newname_after\", load: testLoadData, infile: \"drop_newname_after.in.csv\", outfile: \"drop_newname_after.out.csv\", test: drop_newname_after)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 161,
								Line:   7,
							},
							Source: "name: \"drop_newname_after\", load: testLoadData, infile: \"drop_newname_after.in.csv\", outfile: \"drop_newname_after.out.csv\", test: drop_newname_after",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   7,
								},
								Source: "name: \"drop_newname_after\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   7,
									},
									Source: "\"drop_newname_after\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "drop_newname_after",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 41,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 41,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 47,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   7,
								},
								Source: "infile: \"drop_newname_after.in.csv\"",
								Start: ast.Position{
									Column: 61,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 61,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   7,
									},
									Source: "\"drop_newname_after.in.csv\"",
									Start: ast.Position{
										Column: 69,
										Line:   7,
									},
								},
							},
							Value: "drop_newname_after.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   7,
								},
								Source: "outfile: \"drop_newname_after.out.csv\"",
								Start: ast.Position{
									Column: 98,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 98,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   7,
									},
									Source: "\"drop_newname_after.out.csv\"",
									Start: ast.Position{
										Column: 107,
										Line:   7,
									},
								},
							},
							Value: "drop_newname_after.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 161,
									Line:   7,
								},
								Source: "test: drop_newname_after",
								Start: ast.Position{
									Column: 137,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 137,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 161,
										Line:   7,
									},
									Source: "drop_newname_after",
									Start: ast.Position{
										Column: 143,
										Line:   7,
									},
								},
							},
							Name: "drop_newname_after",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 162,
							Line:   7,
						},
						Source: "testingTest(name: \"drop_newname_after\", load: testLoadData, infile: \"drop_newname_after.in.csv\", outfile: \"drop_newname_after.out.csv\", test: drop_newname_after)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "drop_newname_after.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 166,
					Line:   7,
				},
				Source: "drop_newname_before = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns:[\"new\"])\n\t|> rename(columns: {old:\"new\"})\n\ntestingTest(name: \"drop_newname_before\", load: testLoadData, infile: \"drop_newname_before.in.csv\", outfile: \"drop_newname_before.out.csv\", test: drop_newname_before)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 33,
						Line:   5,
					},
					Source: "drop_newname_before = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns:[\"new\"])\n\t|> rename(columns: {old:\"new\"})",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   1,
						},
						Source: "drop_newname_before",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "drop_newname_before",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns:[\"new\"])\n\t|> rename(columns: {old:\"new\"})",
						Start: ast.Position{
							Column: 23,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   3,
									},
									Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 17,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   3,
										},
										Source: "range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   4,
								},
								Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns:[\"new\"])",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   4,
										},
										Source: "columns:[\"new\"]",
										Start: ast.Position{
											Column: 10,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   4,
											},
											Source: "columns:[\"new\"]",
											Start: ast.Position{
												Column: 10,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 10,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   4,
												},
												Source: "[\"new\"]",
												Start: ast.Position{
													Column: 18,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   4,
													},
													Source: "\"new\"",
													Start: ast.Position{
														Column: 19,
														Line:   4,
													},
												},
											},
											Value: "new",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   4,
									},
									Source: "drop(columns:[\"new\"])",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   4,
										},
										Source: "drop",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "drop",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   5,
							},
							Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns:[\"new\"])\n\t|> rename(columns: {old:\"new\"})",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   5,
									},
									Source: "columns: {old:\"new\"}",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   5,
										},
										Source: "columns: {old:\"new\"}",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   5,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   5,
											},
											Source: "{old:\"new\"}",
											Start: ast.Position{
												Column: 21,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   5,
												},
												Source: "old:\"new\"",
												Start: ast.Position{
													Column: 22,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   5,
													},
													Source: "old",
													Start: ast.Position{
														Column: 22,
														Line:   5,
													},
												},
											},
											Name: "old",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   5,
													},
													Source: "\"new\"",
													Start: ast.Position{
														Column: 26,
														Line:   5,
													},
												},
											},
											Value: "new",
										},
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   5,
								},
								Source: "rename(columns: {old:\"new\"})",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "rename",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "rename",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 24,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 24,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 30,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 166,
						Line:   7,
					},
					Source: "testingTest(name: \"drop_newname_before\", load: testLoadData, infile: \"drop_newname_before.in.csv\", outfile: \"drop_newname_before.out.csv\", test: drop_newname_before)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 165,
								Line:   7,
							},
							Source: "name: \"drop_newname_before\", load: testLoadData, infile: \"drop_newname_before.in.csv\", outfile: \"drop_newname_before.out.csv\", test: drop_newname_before",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   7,
								},
								Source: "name: \"drop_newname_before\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   7,
									},
									Source: "\"drop_newname_before\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "drop_newname_before",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 42,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 42,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 48,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 98,
									Line:   7,
								},
								Source: "infile: \"drop_newname_before.in.csv\"",
								Start: ast.Position{
									Column: 62,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 62,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 98,
										Line:   7,
									},
									Source: "\"drop_newname_before.in.csv\"",
									Start: ast.Position{
										Column: 70,
										Line:   7,
									},
								},
							},
							Value: "drop_newname_before.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 138,
									Line:   7,
								},
								Source: "outfile: \"drop_newname_before.out.csv\"",
								Start: ast.Position{
									Column: 100,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 107,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 100,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 138,
										Line:   7,
									},
									Source: "\"drop_newname_before.out.csv\"",
									Start: ast.Position{
										Column: 109,
										Line:   7,
									},
								},
							},
							Value: "drop_newname_before.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 165,
									Line:   7,
								},
								Source: "test: drop_newname_before",
								Start: ast.Position{
									Column: 140,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 144,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 140,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 165,
										Line:   7,
									},
									Source: "drop_newname_before",
									Start: ast.Position{
										Column: 146,
										Line:   7,
									},
								},
							},
							Name: "drop_newname_before",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 166,
							Line:   7,
						},
						Source: "testingTest(name: \"drop_newname_before\", load: testLoadData, infile: \"drop_newname_before.in.csv\", outfile: \"drop_newname_before.out.csv\", test: drop_newname_before)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "drop_newname_before.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 150,
					Line:   7,
				},
				Source: "drop_referenced = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_field\"])\n\t|> filter(fn: (r) => r._field == \"usage_guest\")\n\ntestingTest(name: \"drop_referenced\", load: testLoadData, infile: \"drop_referenced.in.csv\", outfile: \"drop_referenced.out.csv\", test: drop_referenced)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 49,
						Line:   5,
					},
					Source: "drop_referenced = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_field\"])\n\t|> filter(fn: (r) => r._field == \"usage_guest\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						Source: "drop_referenced",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "drop_referenced",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_field\"])\n\t|> filter(fn: (r) => r._field == \"usage_guest\")",
						Start: ast.Position{
							Column: 19,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   3,
									},
									Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 17,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   3,
										},
										Source: "range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   4,
								},
								Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_field\"])",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   4,
										},
										Source: "columns: [\"_field\"]",
										Start: ast.Position{
											Column: 10,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   4,
											},
											Source: "columns: [\"_field\"]",
											Start: ast.Position{
												Column: 10,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 10,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   4,
												},
												Source: "[\"_field\"]",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   4,
													},
													Source: "\"_field\"",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Value: "_field",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   4,
									},
									Source: "drop(columns: [\"_field\"])",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   4,
										},
										Source: "drop",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "drop",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   5,
							},
							Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_field\"])\n\t|> filter(fn: (r) => r._field == \"usage_guest\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   5,
									},
									Source: "fn: (r) => r._field == \"usage_guest\"",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   5,
										},
										Source: "fn: (r) => r._field == \"usage_guest\"",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   5,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   5,
											},
											Source: "(r) => r._field == \"usage_guest\"",
											Start: ast.Position{
												Column: 16,
												Line:   5,
											},
										},
									},
									Body: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   5,
												},
												Source: "r._field == \"usage_guest\"",
												Start: ast.Position{
													Column: 23,
													Line:   5,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   5,
													},
													Source: "r._field",
													Start: ast.Position{
														Column: 23,
														Line:   5,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   5,
														},
														Source: "r",
														Start: ast.Position{
															Column: 23,
															Line:   5,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   5,
														},
														Source: "_field",
														Start: ast.Position{
															Column: 25,
															Line:   5,
														},
													},
												},
												Name: "_field",
											},
										},
										Operator: 14,
										Right: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   5,
													},
													Source: "\"usage_guest\"",
													Start: ast.Position{
														Column: 35,
														Line:   5,
													},
												},
											},
											Value: "usage_guest",
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   5,
												},
												Source: "r",
												Start: ast.Position{
													Column: 17,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   5,
													},
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   5,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   5,
								},
								Source: "filter(fn: (r) => r._field == \"usage_guest\")",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "filter",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "filter",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 20,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 26,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 150,
						Line:   7,
					},
					Source: "testingTest(name: \"drop_referenced\", load: testLoadData, infile: \"drop_referenced.in.csv\", outfile: \"drop_referenced.out.csv\", test: drop_referenced)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 149,
								Line:   7,
							},
							Source: "name: \"drop_referenced\", load: testLoadData, infile: \"drop_referenced.in.csv\", outfile: \"drop_referenced.out.csv\", test: drop_referenced",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   7,
								},
								Source: "name: \"drop_referenced\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   7,
									},
									Source: "\"drop_referenced\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "drop_referenced",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 38,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 38,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 44,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   7,
								},
								Source: "infile: \"drop_referenced.in.csv\"",
								Start: ast.Position{
									Column: 58,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 58,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   7,
									},
									Source: "\"drop_referenced.in.csv\"",
									Start: ast.Position{
										Column: 66,
										Line:   7,
									},
								},
							},
							Value: "drop_referenced.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 126,
									Line:   7,
								},
								Source: "outfile: \"drop_referenced.out.csv\"",
								Start: ast.Position{
									Column: 92,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 92,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   7,
									},
									Source: "\"drop_referenced.out.csv\"",
									Start: ast.Position{
										Column: 101,
										Line:   7,
									},
								},
							},
							Value: "drop_referenced.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 149,
									Line:   7,
								},
								Source: "test: drop_referenced",
								Start: ast.Position{
									Column: 128,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 128,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 149,
										Line:   7,
									},
									Source: "drop_referenced",
									Start: ast.Position{
										Column: 134,
										Line:   7,
									},
								},
							},
							Name: "drop_referenced",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 150,
							Line:   7,
						},
						Source: "testingTest(name: \"drop_referenced\", load: testLoadData, infile: \"drop_referenced.in.csv\", outfile: \"drop_referenced.out.csv\", test: drop_referenced)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "drop_referenced.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 134,
					Line:   7,
				},
				Source: "drop_unused = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_measurement\"])\n\t|> filter(fn: (r) => r._field == \"usage_guest\")\n\ntestingTest(name: \"drop_unused\", load: testLoadData, infile: \"drop_unused.in.csv\", outfile: \"drop_unused.out.csv\", test: drop_unused)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 49,
						Line:   5,
					},
					Source: "drop_unused = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_measurement\"])\n\t|> filter(fn: (r) => r._field == \"usage_guest\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1,
						},
						Source: "drop_unused",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "drop_unused",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_measurement\"])\n\t|> filter(fn: (r) => r._field == \"usage_guest\")",
						Start: ast.Position{
							Column: 15,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   3,
									},
									Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 17,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   3,
										},
										Source: "range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   4,
								},
								Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_measurement\"])",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   4,
										},
										Source: "columns: [\"_measurement\"]",
										Start: ast.Position{
											Column: 10,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   4,
											},
											Source: "columns: [\"_measurement\"]",
											Start: ast.Position{
												Column: 10,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 10,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   4,
												},
												Source: "[\"_measurement\"]",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   4,
													},
													Source: "\"_measurement\"",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Value: "_measurement",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   4,
									},
									Source: "drop(columns: [\"_measurement\"])",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   4,
										},
										Source: "drop",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "drop",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   5,
							},
							Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> drop(columns: [\"_measurement\"])\n\t|> filter(fn: (r) => r._field == \"usage_guest\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   5,
									},
									Source: "fn: (r) => r._field == \"usage_guest\"",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   5,
										},
										Source: "fn: (r) => r._field == \"usage_guest\"",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   5,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   5,
											},
											Source: "(r) => r._field == \"usage_guest\"",
											Start: ast.Position{
												Column: 16,
												Line:   5,
											},
										},
									},
									Body: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   5,
												},
												Source: "r._field == \"usage_guest\"",
												Start: ast.Position{
													Column: 23,
													Line:   5,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   5,
													},
													Source: "r._field",
													Start: ast.Position{
														Column: 23,
														Line:   5,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   5,
														},
														Source: "r",
														Start: ast.Position{
															Column: 23,
															Line:   5,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   5,
														},
														Source: "_field",
														Start: ast.Position{
															Column: 25,
															Line:   5,
														},
													},
												},
												Name: "_field",
											},
										},
										Operator: 14,
										Right: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   5,
													},
													Source: "\"usage_guest\"",
													Start: ast.Position{
														Column: 35,
														Line:   5,
													},
												},
											},
											Value: "usage_guest",
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   5,
												},
												Source: "r",
												Start: ast.Position{
													Column: 17,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   5,
													},
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   5,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   5,
								},
								Source: "filter(fn: (r) => r._field == \"usage_guest\")",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "filter",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "filter",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 16,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 134,
						Line:   7,
					},
					Source: "testingTest(name: \"drop_unused\", load: testLoadData, infile: \"drop_unused.in.csv\", outfile: \"drop_unused.out.csv\", test: drop_unused)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 133,
								Line:   7,
							},
							Source: "name: \"drop_unused\", load: testLoadData, infile: \"drop_unused.in.csv\", outfile: \"drop_unused.out.csv\", test: drop_unused",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   7,
								},
								Source: "name: \"drop_unused\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   7,
									},
									Source: "\"drop_unused\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "drop_unused",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 34,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 34,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 40,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   7,
								},
								Source: "infile: \"drop_unused.in.csv\"",
								Start: ast.Position{
									Column: 54,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 54,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 82,
										Line:   7,
									},
									Source: "\"drop_unused.in.csv\"",
									Start: ast.Position{
										Column: 62,
										Line:   7,
									},
								},
							},
							Value: "drop_unused.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   7,
								},
								Source: "outfile: \"drop_unused.out.csv\"",
								Start: ast.Position{
									Column: 84,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 91,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 84,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   7,
									},
									Source: "\"drop_unused.out.csv\"",
									Start: ast.Position{
										Column: 93,
										Line:   7,
									},
								},
							},
							Value: "drop_unused.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 133,
									Line:   7,
								},
								Source: "test: drop_unused",
								Start: ast.Position{
									Column: 116,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 116,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 133,
										Line:   7,
									},
									Source: "drop_unused",
									Start: ast.Position{
										Column: 122,
										Line:   7,
									},
								},
							},
							Name: "drop_unused",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 134,
							Line:   7,
						},
						Source: "testingTest(name: \"drop_unused\", load: testLoadData, infile: \"drop_unused.in.csv\", outfile: \"drop_unused.out.csv\", test: drop_unused)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "drop_unused.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 128,
					Line:   6,
				},
				Source: "t_duplicate = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> duplicate(column: \"host\", as: \"host_new\")\n\ntestingTest(name: \"duplicate\", load: testLoadData, infile: \"duplicate.in.csv\", outfile: \"duplicate.out.csv\", test: t_duplicate)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 46,
						Line:   4,
					},
					Source: "t_duplicate = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> duplicate(column: \"host\", as: \"host_new\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1,
						},
						Source: "t_duplicate",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_duplicate",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 46,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> duplicate(column: \"host\", as: \"host_new\")",
						Start: ast.Position{
							Column: 15,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   3,
								},
								Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 11,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 17,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 5,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 46,
								Line:   4,
							},
							Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> duplicate(column: \"host\", as: \"host_new\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   4,
									},
									Source: "column: \"host\", as: \"host_new\"",
									Start: ast.Position{
										Column: 15,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   4,
										},
										Source: "column: \"host\"",
										Start: ast.Position{
											Column: 15,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   4,
											},
											Source: "column",
											Start: ast.Position{
												Column: 15,
												Line:   4,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   4,
											},
											Source: "\"host\"",
											Start: ast.Position{
												Column: 23,
												Line:   4,
											},
										},
									},
									Value: "host",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   4,
										},
										Source: "as: \"host_new\"",
										Start: ast.Position{
											Column: 31,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   4,
											},
											Source: "as",
											Start: ast.Position{
												Column: 31,
												Line:   4,
											},
										},
									},
									Name: "as",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   4,
											},
											Source: "\"host_new\"",
											Start: ast.Position{
												Column: 35,
												Line:   4,
											},
										},
									},
									Value: "host_new",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   4,
								},
								Source: "duplicate(column: \"host\", as: \"host_new\")",
								Start: ast.Position{
									Column: 5,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   4,
									},
									Source: "duplicate",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Name: "duplicate",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 16,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 128,
						Line:   6,
					},
					Source: "testingTest(name: \"duplicate\", load: testLoadData, infile: \"duplicate.in.csv\", outfile: \"duplicate.out.csv\", test: t_duplicate)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 127,
								Line:   6,
							},
							Source: "name: \"duplicate\", load: testLoadData, infile: \"duplicate.in.csv\", outfile: \"duplicate.out.csv\", test: t_duplicate",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   6,
								},
								Source: "name: \"duplicate\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   6,
									},
									Source: "\"duplicate\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "duplicate",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 32,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 32,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 38,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   6,
								},
								Source: "infile: \"duplicate.in.csv\"",
								Start: ast.Position{
									Column: 52,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 52,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   6,
									},
									Source: "\"duplicate.in.csv\"",
									Start: ast.Position{
										Column: 60,
										Line:   6,
									},
								},
							},
							Value: "duplicate.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   6,
								},
								Source: "outfile: \"duplicate.out.csv\"",
								Start: ast.Position{
									Column: 80,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 87,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 80,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 108,
										Line:   6,
									},
									Source: "\"duplicate.out.csv\"",
									Start: ast.Position{
										Column: 89,
										Line:   6,
									},
								},
							},
							Value: "duplicate.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 127,
									Line:   6,
								},
								Source: "test: t_duplicate",
								Start: ast.Position{
									Column: 110,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 110,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 127,
										Line:   6,
									},
									Source: "t_duplicate",
									Start: ast.Position{
										Column: 116,
										Line:   6,
									},
								},
							},
							Name: "t_duplicate",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 128,
							Line:   6,
						},
						Source: "testingTest(name: \"duplicate\", load: testLoadData, infile: \"duplicate.in.csv\", outfile: \"duplicate.out.csv\", test: t_duplicate)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "duplicate.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 152,
					Line:   8,
				},
				Source: "t_filter_by_regex = (table=<-) =>\ntable\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] =~ /.*0/)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))\n  |> yield(name:\"0\")\ntestingTest(name: \"filter_by_regex\", load: testLoadData, infile: \"filter_by_regex.in.csv\", outfile: \"filter_by_regex.out.csv\", test: t_filter_by_regex)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   7,
					},
					Source: "t_filter_by_regex = (table=<-) =>\ntable\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] =~ /.*0/)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1,
						},
						Source: "t_filter_by_regex",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_filter_by_regex",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   7,
						},
						Source: "(table=<-) =>\ntable\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] =~ /.*0/)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 21,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 6,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 1,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)",
											Start: ast.Position{
												Column: 1,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   3,
													},
													Source: "start: 2018-05-20T19:53:26Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   3,
														},
														Source: "start: 2018-05-20T19:53:26Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   3,
															},
															Source: "2018-05-20T19:53:26Z",
															Start: ast.Position{
																Column: 19,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "range(start: 2018-05-20T19:53:26Z)",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   4,
										},
										Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] =~ /.*0/)",
										Start: ast.Position{
											Column: 1,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   4,
												},
												Source: "fn: (r) => r[\"name\"] =~ /.*0/",
												Start: ast.Position{
													Column: 13,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   4,
													},
													Source: "fn: (r) => r[\"name\"] =~ /.*0/",
													Start: ast.Position{
														Column: 13,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   4,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 13,
															Line:   4,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   4,
														},
														Source: "(r) => r[\"name\"] =~ /.*0/",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   4,
															},
															Source: "r[\"name\"] =~ /.*0/",
															Start: ast.Position{
																Column: 24,
																Line:   4,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   4,
																},
																Source: "r[\"name\"]",
																Start: ast.Position{
																	Column: 24,
																	Line:   4,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   4,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 24,
																		Line:   4,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 32,
																		Line:   4,
																	},
																	Source: "\"name\"",
																	Start: ast.Position{
																		Column: 26,
																		Line:   4,
																	},
																},
															},
															Value: "name",
														},
													},
													Operator: 16,
													Right: &ast.RegexpLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   4,
																},
																Source: "/.*0/",
																Start: ast.Position{
																	Column: 37,
																	Line:   4,
																},
															},
														},
														Value: &regexp.Regexp{},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   4,
															},
															Source: "r",
															Start: ast.Position{
																Column: 18,
																Line:   4,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 18,
																	Line:   4,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   4,
											},
											Source: "filter(fn: (r) => r[\"name\"] =~ /.*0/)",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   4,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   5,
									},
									Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] =~ /.*0/)\n  |> group(columns: [\"_measurement\", \"_start\"])",
									Start: ast.Position{
										Column: 1,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   5,
											},
											Source: "columns: [\"_measurement\", \"_start\"]",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   5,
												},
												Source: "columns: [\"_measurement\", \"_start\"]",
												Start: ast.Position{
													Column: 12,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   5,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 12,
														Line:   5,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   5,
													},
													Source: "[\"_measurement\", \"_start\"]",
													Start: ast.Position{
														Column: 21,
														Line:   5,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   5,
														},
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 22,
															Line:   5,
														},
													},
												},
												Value: "_measurement",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   5,
														},
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 38,
															Line:   5,
														},
													},
												},
												Value: "_start",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   5,
										},
										Source: "group(columns: [\"_measurement\", \"_start\"])",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   5,
											},
											Source: "group",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   6,
								},
								Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] =~ /.*0/)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))",
								Start: ast.Position{
									Column: 1,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   6,
										},
										Source: "fn: (r) => ({_time: r._time, io_time: r._value}",
										Start: ast.Position{
											Column: 10,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   6,
											},
											Source: "fn: (r) => ({_time: r._time, io_time: r._value}",
											Start: ast.Position{
												Column: 10,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   6,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   6,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   6,
												},
												Source: "(r) => ({_time: r._time, io_time: r._value}",
												Start: ast.Position{
													Column: 14,
													Line:   6,
												},
											},
										},
										Body: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 57,
														Line:   6,
													},
													Source: "{_time: r._time, io_time: r._value}",
													Start: ast.Position{
														Column: 22,
														Line:   6,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   6,
														},
														Source: "_time: r._time",
														Start: ast.Position{
															Column: 23,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   6,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 23,
																Line:   6,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   6,
															},
															Source: "r._time",
															Start: ast.Position{
																Column: 30,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   6,
																},
																Source: "_time",
																Start: ast.Position{
																	Column: 32,
																	Line:   6,
																},
															},
														},
														Name: "_time",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   6,
														},
														Source: "io_time: r._value",
														Start: ast.Position{
															Column: 39,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   6,
															},
															Source: "io_time",
															Start: ast.Position{
																Column: 39,
																Line:   6,
															},
														},
													},
													Name: "io_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   6,
															},
															Source: "r._value",
															Start: ast.Position{
																Column: 48,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 48,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 56,
																	Line:   6,
																},
																Source: "_value",
																Start: ast.Position{
																	Column: 50,
																	Line:   6,
																},
															},
														},
														Name: "_value",
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   6,
													},
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   6,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   6,
														},
														Source: "r",
														Start: ast.Position{
															Column: 15,
															Line:   6,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   6,
									},
									Source: "map(fn: (r) => ({_time: r._time, io_time: r._value}))",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   6,
										},
										Source: "map",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   7,
							},
							Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] =~ /.*0/)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 1,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   7,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   7,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   7,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   7,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   7,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   7,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   7,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 22,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 152,
						Line:   8,
					},
					Source: "testingTest(name: \"filter_by_regex\", load: testLoadData, infile: \"filter_by_regex.in.csv\", outfile: \"filter_by_regex.out.csv\", test: t_filter_by_regex)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 151,
								Line:   8,
							},
							Source: "name: \"filter_by_regex\", load: testLoadData, infile: \"filter_by_regex.in.csv\", outfile: \"filter_by_regex.out.csv\", test: t_filter_by_regex",
							Start: ast.Position{
								Column: 13,
								Line:   8,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   8,
								},
								Source: "name: \"filter_by_regex\"",
								Start: ast.Position{
									Column: 13,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   8,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   8,
									},
									Source: "\"filter_by_regex\"",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Value: "filter_by_regex",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   8,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 38,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   8,
									},
									Source: "load",
									Start: ast.Position{
										Column: 38,
										Line:   8,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   8,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 44,
										Line:   8,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   8,
								},
								Source: "infile: \"filter_by_regex.in.csv\"",
								Start: ast.Position{
									Column: 58,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   8,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 58,
										Line:   8,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   8,
									},
									Source: "\"filter_by_regex.in.csv\"",
									Start: ast.Position{
										Column: 66,
										Line:   8,
									},
								},
							},
							Value: "filter_by_regex.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 126,
									Line:   8,
								},
								Source: "outfile: \"filter_by_regex.out.csv\"",
								Start: ast.Position{
									Column: 92,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 92,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   8,
									},
									Source: "\"filter_by_regex.out.csv\"",
									Start: ast.Position{
										Column: 101,
										Line:   8,
									},
								},
							},
							Value: "filter_by_regex.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 151,
									Line:   8,
								},
								Source: "test: t_filter_by_regex",
								Start: ast.Position{
									Column: 128,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   8,
									},
									Source: "test",
									Start: ast.Position{
										Column: 128,
										Line:   8,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 151,
										Line:   8,
									},
									Source: "t_filter_by_regex",
									Start: ast.Position{
										Column: 134,
										Line:   8,
									},
								},
							},
							Name: "t_filter_by_regex",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 152,
							Line:   8,
						},
						Source: "testingTest(name: \"filter_by_regex\", load: testLoadData, infile: \"filter_by_regex.in.csv\", outfile: \"filter_by_regex.out.csv\", test: t_filter_by_regex)",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   8,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   8,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "filter_by_regex.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 188,
					Line:   11,
				},
				Source: "regexFunc = (table=<-, regLiteral) =>\n   table\n     |>  range(start:2018-05-20T19:53:26Z)\n     |>  filter(fn: (r) => r._field =~ regLiteral)\n     |>  max()\n\n\nt_filter_by_regex_function = (table=<-) =>\n  table\n  |> regexFunc(regLiteral: /io.*/)\ntestingTest(name: \"filter_by_regex_function\", load: testLoadData, infile: \"filter_by_regex_function.in.csv\", outfile: \"filter_by_regex_function.out.csv\", test: t_filter_by_regex_function)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   5,
					},
					Source: "regexFunc = (table=<-, regLiteral) =>\n   table\n     |>  range(start:2018-05-20T19:53:26Z)\n     |>  filter(fn: (r) => r._field =~ regLiteral)\n     |>  max()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   1,
						},
						Source: "regexFunc",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "regexFunc",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   5,
						},
						Source: "(table=<-, regLiteral) =>\n   table\n     |>  range(start:2018-05-20T19:53:26Z)\n     |>  filter(fn: (r) => r._field =~ regLiteral)\n     |>  max()",
						Start: ast.Position{
							Column: 13,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 4,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   3,
									},
									Source: "table\n     |>  range(start:2018-05-20T19:53:26Z)",
									Start: ast.Position{
										Column: 4,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   3,
											},
											Source: "start:2018-05-20T19:53:26Z",
											Start: ast.Position{
												Column: 16,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   3,
												},
												Source: "start:2018-05-20T19:53:26Z",
												Start: ast.Position{
													Column: 16,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 16,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   3,
													},
													Source: "2018-05-20T19:53:26Z",
													Start: ast.Position{
														Column: 22,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   3,
										},
										Source: "range(start:2018-05-20T19:53:26Z)",
										Start: ast.Position{
											Column: 10,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 10,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   4,
								},
								Source: "table\n     |>  range(start:2018-05-20T19:53:26Z)\n     |>  filter(fn: (r) => r._field =~ regLiteral)",
								Start: ast.Position{
									Column: 4,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   4,
										},
										Source: "fn: (r) => r._field =~ regLiteral",
										Start: ast.Position{
											Column: 17,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   4,
											},
											Source: "fn: (r) => r._field =~ regLiteral",
											Start: ast.Position{
												Column: 17,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   4,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 17,
													Line:   4,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   4,
												},
												Source: "(r) => r._field =~ regLiteral",
												Start: ast.Position{
													Column: 21,
													Line:   4,
												},
											},
										},
										Body: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 50,
														Line:   4,
													},
													Source: "r._field =~ regLiteral",
													Start: ast.Position{
														Column: 28,
														Line:   4,
													},
												},
											},
											Left: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   4,
														},
														Source: "r._field",
														Start: ast.Position{
															Column: 28,
															Line:   4,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   4,
															},
															Source: "r",
															Start: ast.Position{
																Column: 28,
																Line:   4,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   4,
															},
															Source: "_field",
															Start: ast.Position{
																Column: 30,
																Line:   4,
															},
														},
													},
													Name: "_field",
												},
											},
											Operator: 16,
											Right: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   4,
														},
														Source: "regLiteral",
														Start: ast.Position{
															Column: 40,
															Line:   4,
														},
													},
												},
												Name: "regLiteral",
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   4,
													},
													Source: "r",
													Start: ast.Position{
														Column: 22,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   4,
														},
														Source: "r",
														Start: ast.Position{
															Column: 22,
															Line:   4,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   4,
									},
									Source: "filter(fn: (r) => r._field =~ regLiteral)",
									Start: ast.Position{
										Column: 10,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   4,
										},
										Source: "filter",
										Start: ast.Position{
											Column: 10,
											Line:   4,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   5,
							},
							Source: "table\n     |>  range(start:2018-05-20T19:53:26Z)\n     |>  filter(fn: (r) => r._field =~ regLiteral)\n     |>  max()",
							Start: ast.Position{
								Column: 4,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   5,
								},
								Source: "max()",
								Start: ast.Position{
									Column: 10,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   5,
									},
									Source: "max",
									Start: ast.Position{
										Column: 10,
										Line:   5,
									},
								},
							},
							Name: "max",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 14,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 20,
								Line:   1,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   1,
							},
							Source: "regLiteral",
							Start: ast.Position{
								Column: 24,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   1,
								},
								Source: "regLiteral",
								Start: ast.Position{
									Column: 24,
									Line:   1,
								},
							},
						},
						Name: "regLiteral",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 35,
						Line:   10,
					},
					Source: "t_filter_by_regex_function = (table=<-) =>\n  table\n  |> regexFunc(regLiteral: /io.*/)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   8,
						},
						Source: "t_filter_by_regex_function",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Name: "t_filter_by_regex_function",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 35,
							Line:   10,
						},
						Source: "(table=<-) =>\n  table\n  |> regexFunc(regLiteral: /io.*/)",
						Start: ast.Position{
							Column: 30,
							Line:   8,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   9,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   9,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   10,
							},
							Source: "table\n  |> regexFunc(regLiteral: /io.*/)",
							Start: ast.Position{
								Column: 3,
								Line:   9,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   10,
									},
									Source: "regLiteral: /io.*/",
									Start: ast.Position{
										Column: 16,
										Line:   10,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   10,
										},
										Source: "regLiteral: /io.*/",
										Start: ast.Position{
											Column: 16,
											Line:   10,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   10,
											},
											Source: "regLiteral",
											Start: ast.Position{
												Column: 16,
												Line:   10,
											},
										},
									},
									Name: "regLiteral",
								},
								Value: &ast.RegexpLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   10,
											},
											Source: "/io.*/",
											Start: ast.Position{
												Column: 28,
												Line:   10,
											},
										},
									},
									Value: &regexp.Regexp{},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   10,
								},
								Source: "regexFunc(regLiteral: /io.*/)",
								Start: ast.Position{
									Column: 6,
									Line:   10,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   10,
									},
									Source: "regexFunc",
									Start: ast.Position{
										Column: 6,
										Line:   10,
									},
								},
							},
							Name: "regexFunc",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   8,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 31,
								Line:   8,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   8,
								},
								Source: "table",
								Start: ast.Position{
									Column: 31,
									Line:   8,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   8,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 37,
								Line:   8,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 188,
						Line:   11,
					},
					Source: "testingTest(name: \"filter_by_regex_function\", load: testLoadData, infile: \"filter_by_regex_function.in.csv\", outfile: \"filter_by_regex_function.out.csv\", test: t_filter_by_regex_function)",
					Start: ast.Position{
						Column: 1,
						Line:   11,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 187,
								Line:   11,
							},
							Source: "name: \"filter_by_regex_function\", load: testLoadData, infile: \"filter_by_regex_function.in.csv\", outfile: \"filter_by_regex_function.out.csv\", test: t_filter_by_regex_function",
							Start: ast.Position{
								Column: 13,
								Line:   11,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   11,
								},
								Source: "name: \"filter_by_regex_function\"",
								Start: ast.Position{
									Column: 13,
									Line:   11,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   11,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   11,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   11,
									},
									Source: "\"filter_by_regex_function\"",
									Start: ast.Position{
										Column: 19,
										Line:   11,
									},
								},
							},
							Value: "filter_by_regex_function",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   11,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 47,
									Line:   11,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   11,
									},
									Source: "load",
									Start: ast.Position{
										Column: 47,
										Line:   11,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   11,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 53,
										Line:   11,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   11,
								},
								Source: "infile: \"filter_by_regex_function.in.csv\"",
								Start: ast.Position{
									Column: 67,
									Line:   11,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 73,
										Line:   11,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 67,
										Line:   11,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 108,
										Line:   11,
									},
									Source: "\"filter_by_regex_function.in.csv\"",
									Start: ast.Position{
										Column: 75,
										Line:   11,
									},
								},
							},
							Value: "filter_by_regex_function.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 153,
									Line:   11,
								},
								Source: "outfile: \"filter_by_regex_function.out.csv\"",
								Start: ast.Position{
									Column: 110,
									Line:   11,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   11,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 110,
										Line:   11,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 153,
										Line:   11,
									},
									Source: "\"filter_by_regex_function.out.csv\"",
									Start: ast.Position{
										Column: 119,
										Line:   11,
									},
								},
							},
							Value: "filter_by_regex_function.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 187,
									Line:   11,
								},
								Source: "test: t_filter_by_regex_function",
								Start: ast.Position{
									Column: 155,
									Line:   11,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 159,
										Line:   11,
									},
									Source: "test",
									Start: ast.Position{
										Column: 155,
										Line:   11,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 187,
										Line:   11,
									},
									Source: "t_filter_by_regex_function",
									Start: ast.Position{
										Column: 161,
										Line:   11,
									},
								},
							},
							Name: "t_filter_by_regex_function",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 188,
							Line:   11,
						},
						Source: "testingTest(name: \"filter_by_regex_function\", load: testLoadData, infile: \"filter_by_regex_function.in.csv\", outfile: \"filter_by_regex_function.out.csv\", test: t_filter_by_regex_function)",
						Start: ast.Position{
							Column: 1,
							Line:   11,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   11,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   11,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "filter_by_regex_function.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 148,
					Line:   9,
				},
				Source: "t_filter_by_tags = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] == \"disk0\")\n  |> group(columns: [\"_measurement\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))\n  |> yield(name:\"0\")\n\ntestingTest(name: \"filter_by_tags\", load: testLoadData, infile: \"filter_by_tags.in.csv\", outfile: \"filter_by_tags.out.csv\", test: t_filter_by_tags)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   7,
					},
					Source: "t_filter_by_tags = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] == \"disk0\")\n  |> group(columns: [\"_measurement\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						Source: "t_filter_by_tags",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_filter_by_tags",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] == \"disk0\")\n  |> group(columns: [\"_measurement\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 20,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   3,
													},
													Source: "start: 2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   3,
														},
														Source: "start: 2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   3,
															},
															Source: "2018-05-22T19:53:26Z",
															Start: ast.Position{
																Column: 19,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "range(start: 2018-05-22T19:53:26Z)",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   4,
										},
										Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] == \"disk0\")",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   4,
												},
												Source: "fn: (r) => r[\"name\"] == \"disk0\"",
												Start: ast.Position{
													Column: 13,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   4,
													},
													Source: "fn: (r) => r[\"name\"] == \"disk0\"",
													Start: ast.Position{
														Column: 13,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   4,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 13,
															Line:   4,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   4,
														},
														Source: "(r) => r[\"name\"] == \"disk0\"",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   4,
															},
															Source: "r[\"name\"] == \"disk0\"",
															Start: ast.Position{
																Column: 24,
																Line:   4,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   4,
																},
																Source: "r[\"name\"]",
																Start: ast.Position{
																	Column: 24,
																	Line:   4,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   4,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 24,
																		Line:   4,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 32,
																		Line:   4,
																	},
																	Source: "\"name\"",
																	Start: ast.Position{
																		Column: 26,
																		Line:   4,
																	},
																},
															},
															Value: "name",
														},
													},
													Operator: 14,
													Right: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   4,
																},
																Source: "\"disk0\"",
																Start: ast.Position{
																	Column: 37,
																	Line:   4,
																},
															},
														},
														Value: "disk0",
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   4,
															},
															Source: "r",
															Start: ast.Position{
																Column: 18,
																Line:   4,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 18,
																	Line:   4,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   4,
											},
											Source: "filter(fn: (r) => r[\"name\"] == \"disk0\")",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   4,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   5,
									},
									Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] == \"disk0\")\n  |> group(columns: [\"_measurement\"])",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   5,
											},
											Source: "columns: [\"_measurement\"]",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   5,
												},
												Source: "columns: [\"_measurement\"]",
												Start: ast.Position{
													Column: 12,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   5,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 12,
														Line:   5,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   5,
													},
													Source: "[\"_measurement\"]",
													Start: ast.Position{
														Column: 21,
														Line:   5,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   5,
														},
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 22,
															Line:   5,
														},
													},
												},
												Value: "_measurement",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   5,
										},
										Source: "group(columns: [\"_measurement\"])",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   5,
											},
											Source: "group",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   6,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] == \"disk0\")\n  |> group(columns: [\"_measurement\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   6,
										},
										Source: "fn: (r) => ({_time: r._time, io_time: r._value}",
										Start: ast.Position{
											Column: 10,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   6,
											},
											Source: "fn: (r) => ({_time: r._time, io_time: r._value}",
											Start: ast.Position{
												Column: 10,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   6,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   6,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   6,
												},
												Source: "(r) => ({_time: r._time, io_time: r._value}",
												Start: ast.Position{
													Column: 14,
													Line:   6,
												},
											},
										},
										Body: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 57,
														Line:   6,
													},
													Source: "{_time: r._time, io_time: r._value}",
													Start: ast.Position{
														Column: 22,
														Line:   6,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   6,
														},
														Source: "_time: r._time",
														Start: ast.Position{
															Column: 23,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   6,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 23,
																Line:   6,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   6,
															},
															Source: "r._time",
															Start: ast.Position{
																Column: 30,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   6,
																},
																Source: "_time",
																Start: ast.Position{
																	Column: 32,
																	Line:   6,
																},
															},
														},
														Name: "_time",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   6,
														},
														Source: "io_time: r._value",
														Start: ast.Position{
															Column: 39,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   6,
															},
															Source: "io_time",
															Start: ast.Position{
																Column: 39,
																Line:   6,
															},
														},
													},
													Name: "io_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   6,
															},
															Source: "r._value",
															Start: ast.Position{
																Column: 48,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 48,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 56,
																	Line:   6,
																},
																Source: "_value",
																Start: ast.Position{
																	Column: 50,
																	Line:   6,
																},
															},
														},
														Name: "_value",
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   6,
													},
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   6,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   6,
														},
														Source: "r",
														Start: ast.Position{
															Column: 15,
															Line:   6,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   6,
									},
									Source: "map(fn: (r) => ({_time: r._time, io_time: r._value}))",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   6,
										},
										Source: "map",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   7,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r[\"name\"] == \"disk0\")\n  |> group(columns: [\"_measurement\"])\n  |> map(fn: (r) => ({_time: r._time, io_time: r._value}))\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   7,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   7,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   7,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   7,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   7,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   7,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   7,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 21,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 148,
						Line:   9,
					},
					Source: "testingTest(name: \"filter_by_tags\", load: testLoadData, infile: \"filter_by_tags.in.csv\", outfile: \"filter_by_tags.out.csv\", test: t_filter_by_tags)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 147,
								Line:   9,
							},
							Source: "name: \"filter_by_tags\", load: testLoadData, infile: \"filter_by_tags.in.csv\", outfile: \"filter_by_tags.out.csv\", test: t_filter_by_tags",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   9,
								},
								Source: "name: \"filter_by_tags\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   9,
									},
									Source: "\"filter_by_tags\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "filter_by_tags",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 37,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 37,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 43,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   9,
								},
								Source: "infile: \"filter_by_tags.in.csv\"",
								Start: ast.Position{
									Column: 57,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 57,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   9,
									},
									Source: "\"filter_by_tags.in.csv\"",
									Start: ast.Position{
										Column: 65,
										Line:   9,
									},
								},
							},
							Value: "filter_by_tags.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   9,
								},
								Source: "outfile: \"filter_by_tags.out.csv\"",
								Start: ast.Position{
									Column: 90,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 90,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   9,
									},
									Source: "\"filter_by_tags.out.csv\"",
									Start: ast.Position{
										Column: 99,
										Line:   9,
									},
								},
							},
							Value: "filter_by_tags.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   9,
								},
								Source: "test: t_filter_by_tags",
								Start: ast.Position{
									Column: 125,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 125,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   9,
									},
									Source: "t_filter_by_tags",
									Start: ast.Position{
										Column: 131,
										Line:   9,
									},
								},
							},
							Name: "t_filter_by_tags",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 148,
							Line:   9,
						},
						Source: "testingTest(name: \"filter_by_tags\", load: testLoadData, infile: \"filter_by_tags.in.csv\", outfile: \"filter_by_tags.out.csv\", test: t_filter_by_tags)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "filter_by_tags.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 112,
					Line:   4,
				},
				Source: "t_first = (table=<-) =>\n  table\n  |> first()\ntestingTest(name: \"first\", load: testLoadData, infile: \"first.in.csv\", outfile: \"first.out.csv\", test: t_first)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   3,
					},
					Source: "t_first = (table=<-) =>\n  table\n  |> first()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   1,
						},
						Source: "t_first",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_first",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n  |> first()",
						Start: ast.Position{
							Column: 11,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   3,
							},
							Source: "table\n  |> first()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   3,
								},
								Source: "first()",
								Start: ast.Position{
									Column: 6,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   3,
									},
									Source: "first",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Name: "first",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 12,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 12,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 112,
						Line:   4,
					},
					Source: "testingTest(name: \"first\", load: testLoadData, infile: \"first.in.csv\", outfile: \"first.out.csv\", test: t_first)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 111,
								Line:   4,
							},
							Source: "name: \"first\", load: testLoadData, infile: \"first.in.csv\", outfile: \"first.out.csv\", test: t_first",
							Start: ast.Position{
								Column: 13,
								Line:   4,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   4,
								},
								Source: "name: \"first\"",
								Start: ast.Position{
									Column: 13,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   4,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   4,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   4,
									},
									Source: "\"first\"",
									Start: ast.Position{
										Column: 19,
										Line:   4,
									},
								},
							},
							Value: "first",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   4,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 28,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   4,
									},
									Source: "load",
									Start: ast.Position{
										Column: 28,
										Line:   4,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   4,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 34,
										Line:   4,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   4,
								},
								Source: "infile: \"first.in.csv\"",
								Start: ast.Position{
									Column: 48,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   4,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 48,
										Line:   4,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   4,
									},
									Source: "\"first.in.csv\"",
									Start: ast.Position{
										Column: 56,
										Line:   4,
									},
								},
							},
							Value: "first.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   4,
								},
								Source: "outfile: \"first.out.csv\"",
								Start: ast.Position{
									Column: 72,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   4,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 72,
										Line:   4,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   4,
									},
									Source: "\"first.out.csv\"",
									Start: ast.Position{
										Column: 81,
										Line:   4,
									},
								},
							},
							Value: "first.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   4,
								},
								Source: "test: t_first",
								Start: ast.Position{
									Column: 98,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   4,
									},
									Source: "test",
									Start: ast.Position{
										Column: 98,
										Line:   4,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   4,
									},
									Source: "t_first",
									Start: ast.Position{
										Column: 104,
										Line:   4,
									},
								},
							},
							Name: "t_first",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 112,
							Line:   4,
						},
						Source: "testingTest(name: \"first\", load: testLoadData, infile: \"first.in.csv\", outfile: \"first.out.csv\", test: t_first)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "first.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 112,
					Line:   10,
				},
				Source: "t_group = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n  |> group(columns: [\"_measurement\", \"_start\", \"name\"])\n  |> max()\n  |> map(fn: (r) => ({_time: r._time, max: r._value}))\n  |> yield(name: \"0\")\n\ntestingTest(name: \"group\", load: testLoadData, infile: \"group.in.csv\", outfile: \"group.out.csv\", test: t_group)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   8,
					},
					Source: "t_group = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n  |> group(columns: [\"_measurement\", \"_start\", \"name\"])\n  |> max()\n  |> map(fn: (r) => ({_time: r._time, max: r._value}))\n  |> yield(name: \"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   1,
						},
						Source: "t_group",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_group",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   8,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n  |> group(columns: [\"_measurement\", \"_start\", \"name\"])\n  |> max()\n  |> map(fn: (r) => ({_time: r._time, max: r._value}))\n  |> yield(name: \"0\")",
						Start: ast.Position{
							Column: 11,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 8,
														Line:   2,
													},
													Source: "table",
													Start: ast.Position{
														Column: 3,
														Line:   2,
													},
												},
											},
											Name: "table",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   3,
														},
														Source: "start: 2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   3,
															},
															Source: "start: 2018-05-22T19:53:26Z",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 17,
																	Line:   3,
																},
																Source: "start",
																Start: ast.Position{
																	Column: 12,
																	Line:   3,
																},
															},
														},
														Name: "start",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   3,
																},
																Source: "2018-05-22T19:53:26Z",
																Start: ast.Position{
																	Column: 19,
																	Line:   3,
																},
															},
														},
														Value: time.Time{},
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   3,
													},
													Source: "range(start: 2018-05-22T19:53:26Z)",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   3,
														},
														Source: "range",
														Start: ast.Position{
															Column: 6,
															Line:   3,
														},
													},
												},
												Name: "range",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 77,
												Line:   4,
											},
											Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 76,
														Line:   4,
													},
													Source: "fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\"",
													Start: ast.Position{
														Column: 13,
														Line:   4,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 76,
															Line:   4,
														},
														Source: "fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\"",
														Start: ast.Position{
															Column: 13,
															Line:   4,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   4,
															},
															Source: "fn",
															Start: ast.Position{
																Column: 13,
																Line:   4,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 76,
																Line:   4,
															},
															Source: "(r) => r._measurement == \"diskio\" and r._field == \"io_time\"",
															Start: ast.Position{
																Column: 17,
																Line:   4,
															},
														},
													},
													Body: &ast.LogicalExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 76,
																	Line:   4,
																},
																Source: "r._measurement == \"diskio\" and r._field == \"io_time\"",
																Start: ast.Position{
																	Column: 24,
																	Line:   4,
																},
															},
														},
														Left: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   4,
																	},
																	Source: "r._measurement == \"diskio\"",
																	Start: ast.Position{
																		Column: 24,
																		Line:   4,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   4,
																		},
																		Source: "r._measurement",
																		Start: ast.Position{
																			Column: 24,
																			Line:   4,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 25,
																				Line:   4,
																			},
																			Source: "r",
																			Start: ast.Position{
																				Column: 24,
																				Line:   4,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 38,
																				Line:   4,
																			},
																			Source: "_measurement",
																			Start: ast.Position{
																				Column: 26,
																				Line:   4,
																			},
																		},
																	},
																	Name: "_measurement",
																},
															},
															Operator: 14,
															Right: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 50,
																			Line:   4,
																		},
																		Source: "\"diskio\"",
																		Start: ast.Position{
																			Column: 42,
																			Line:   4,
																		},
																	},
																},
																Value: "diskio",
															},
														},
														Operator: 1,
														Right: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 76,
																		Line:   4,
																	},
																	Source: "r._field == \"io_time\"",
																	Start: ast.Position{
																		Column: 55,
																		Line:   4,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 63,
																			Line:   4,
																		},
																		Source: "r._field",
																		Start: ast.Position{
																			Column: 55,
																			Line:   4,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 56,
																				Line:   4,
																			},
																			Source: "r",
																			Start: ast.Position{
																				Column: 55,
																				Line:   4,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 63,
																				Line:   4,
																			},
																			Source: "_field",
																			Start: ast.Position{
																				Column: 57,
																				Line:   4,
																			},
																		},
																	},
																	Name: "_field",
																},
															},
															Operator: 14,
															Right: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 76,
																			Line:   4,
																		},
																		Source: "\"io_time\"",
																		Start: ast.Position{
																			Column: 67,
																			Line:   4,
																		},
																	},
																},
																Value: "io_time",
															},
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 18,
																	Line:   4,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 19,
																		Line:   4,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 18,
																		Line:   4,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 77,
													Line:   4,
												},
												Source: "filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 12,
														Line:   4,
													},
													Source: "filter",
													Start: ast.Position{
														Column: 6,
														Line:   4,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   5,
										},
										Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n  |> group(columns: [\"_measurement\", \"_start\", \"name\"])",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   5,
												},
												Source: "columns: [\"_measurement\", \"_start\", \"name\"]",
												Start: ast.Position{
													Column: 12,
													Line:   5,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 55,
														Line:   5,
													},
													Source: "columns: [\"_measurement\", \"_start\", \"name\"]",
													Start: ast.Position{
														Column: 12,
														Line:   5,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   5,
														},
														Source: "columns",
														Start: ast.Position{
															Column: 12,
															Line:   5,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   5,
														},
														Source: "[\"_measurement\", \"_start\", \"name\"]",
														Start: ast.Position{
															Column: 21,
															Line:   5,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   5,
															},
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 22,
																Line:   5,
															},
														},
													},
													Value: "_measurement",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   5,
															},
															Source: "\"_start\"",
															Start: ast.Position{
																Column: 38,
																Line:   5,
															},
														},
													},
													Value: "_start",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   5,
															},
															Source: "\"name\"",
															Start: ast.Position{
																Column: 48,
																Line:   5,
															},
														},
													},
													Value: "name",
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   5,
											},
											Source: "group(columns: [\"_measurement\", \"_start\", \"name\"])",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   5,
												},
												Source: "group",
												Start: ast.Position{
													Column: 6,
													Line:   5,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   6,
									},
									Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n  |> group(columns: [\"_measurement\", \"_start\", \"name\"])\n  |> max()",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   6,
										},
										Source: "max()",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 9,
												Line:   6,
											},
											Source: "max",
											Start: ast.Position{
												Column: 6,
												Line:   6,
											},
										},
									},
									Name: "max",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   7,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n  |> group(columns: [\"_measurement\", \"_start\", \"name\"])\n  |> max()\n  |> map(fn: (r) => ({_time: r._time, max: r._value}))",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   7,
										},
										Source: "fn: (r) => ({_time: r._time, max: r._value}",
										Start: ast.Position{
											Column: 10,
											Line:   7,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   7,
											},
											Source: "fn: (r) => ({_time: r._time, max: r._value}",
											Start: ast.Position{
												Column: 10,
												Line:   7,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   7,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   7,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   7,
												},
												Source: "(r) => ({_time: r._time, max: r._value}",
												Start: ast.Position{
													Column: 14,
													Line:   7,
												},
											},
										},
										Body: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   7,
													},
													Source: "{_time: r._time, max: r._value}",
													Start: ast.Position{
														Column: 22,
														Line:   7,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   7,
														},
														Source: "_time: r._time",
														Start: ast.Position{
															Column: 23,
															Line:   7,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   7,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 23,
																Line:   7,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   7,
															},
															Source: "r._time",
															Start: ast.Position{
																Column: 30,
																Line:   7,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   7,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   7,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   7,
																},
																Source: "_time",
																Start: ast.Position{
																	Column: 32,
																	Line:   7,
																},
															},
														},
														Name: "_time",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   7,
														},
														Source: "max: r._value",
														Start: ast.Position{
															Column: 39,
															Line:   7,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   7,
															},
															Source: "max",
															Start: ast.Position{
																Column: 39,
																Line:   7,
															},
														},
													},
													Name: "max",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   7,
															},
															Source: "r._value",
															Start: ast.Position{
																Column: 44,
																Line:   7,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 45,
																	Line:   7,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 44,
																	Line:   7,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   7,
																},
																Source: "_value",
																Start: ast.Position{
																	Column: 46,
																	Line:   7,
																},
															},
														},
														Name: "_value",
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   7,
													},
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   7,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   7,
														},
														Source: "r",
														Start: ast.Position{
															Column: 15,
															Line:   7,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   7,
									},
									Source: "map(fn: (r) => ({_time: r._time, max: r._value}))",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   7,
										},
										Source: "map",
										Start: ast.Position{
											Column: 6,
											Line:   7,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   8,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n  |> group(columns: [\"_measurement\", \"_start\", \"name\"])\n  |> max()\n  |> map(fn: (r) => ({_time: r._time, max: r._value}))\n  |> yield(name: \"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   8,
									},
									Source: "name: \"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   8,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   8,
										},
										Source: "name: \"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   8,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   8,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   8,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   8,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 18,
												Line:   8,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   8,
								},
								Source: "yield(name: \"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   8,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   8,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   8,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 12,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 12,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 112,
						Line:   10,
					},
					Source: "testingTest(name: \"group\", load: testLoadData, infile: \"group.in.csv\", outfile: \"group.out.csv\", test: t_group)",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 111,
								Line:   10,
							},
							Source: "name: \"group\", load: testLoadData, infile: \"group.in.csv\", outfile: \"group.out.csv\", test: t_group",
							Start: ast.Position{
								Column: 13,
								Line:   10,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   10,
								},
								Source: "name: \"group\"",
								Start: ast.Position{
									Column: 13,
									Line:   10,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   10,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   10,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   10,
									},
									Source: "\"group\"",
									Start: ast.Position{
										Column: 19,
										Line:   10,
									},
								},
							},
							Value: "group",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   10,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 28,
									Line:   10,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   10,
									},
									Source: "load",
									Start: ast.Position{
										Column: 28,
										Line:   10,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   10,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 34,
										Line:   10,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   10,
								},
								Source: "infile: \"group.in.csv\"",
								Start: ast.Position{
									Column: 48,
									Line:   10,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   10,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 48,
										Line:   10,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   10,
									},
									Source: "\"group.in.csv\"",
									Start: ast.Position{
										Column: 56,
										Line:   10,
									},
								},
							},
							Value: "group.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   10,
								},
								Source: "outfile: \"group.out.csv\"",
								Start: ast.Position{
									Column: 72,
									Line:   10,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   10,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 72,
										Line:   10,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   10,
									},
									Source: "\"group.out.csv\"",
									Start: ast.Position{
										Column: 81,
										Line:   10,
									},
								},
							},
							Value: "group.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   10,
								},
								Source: "test: t_group",
								Start: ast.Position{
									Column: 98,
									Line:   10,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   10,
									},
									Source: "test",
									Start: ast.Position{
										Column: 98,
										Line:   10,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   10,
									},
									Source: "t_group",
									Start: ast.Position{
										Column: 104,
										Line:   10,
									},
								},
							},
							Name: "t_group",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 112,
							Line:   10,
						},
						Source: "testingTest(name: \"group\", load: testLoadData, infile: \"group.in.csv\", outfile: \"group.out.csv\", test: t_group)",
						Start: ast.Position{
							Column: 1,
							Line:   10,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   10,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   10,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "group.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 148,
					Line:   5,
				},
				Source: "t_group_by_field = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_value\"])\ntestingTest(name: \"group_by_field\", load: testLoadData, infile: \"group_by_field.in.csv\", outfile: \"group_by_field.out.csv\", test: t_group_by_field)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 34,
						Line:   4,
					},
					Source: "t_group_by_field = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						Source: "t_group_by_field",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_group_by_field",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 34,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_value\"])",
						Start: ast.Position{
							Column: 20,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_value\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   4,
									},
									Source: "columns: [\"_value\"]",
									Start: ast.Position{
										Column: 14,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   4,
										},
										Source: "columns: [\"_value\"]",
										Start: ast.Position{
											Column: 14,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   4,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 14,
												Line:   4,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   4,
											},
											Source: "[\"_value\"]",
											Start: ast.Position{
												Column: 23,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   4,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 24,
													Line:   4,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   4,
								},
								Source: "group(columns: [\"_value\"])",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   4,
									},
									Source: "group",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "group",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 21,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 148,
						Line:   5,
					},
					Source: "testingTest(name: \"group_by_field\", load: testLoadData, infile: \"group_by_field.in.csv\", outfile: \"group_by_field.out.csv\", test: t_group_by_field)",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 147,
								Line:   5,
							},
							Source: "name: \"group_by_field\", load: testLoadData, infile: \"group_by_field.in.csv\", outfile: \"group_by_field.out.csv\", test: t_group_by_field",
							Start: ast.Position{
								Column: 13,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   5,
								},
								Source: "name: \"group_by_field\"",
								Start: ast.Position{
									Column: 13,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   5,
									},
									Source: "\"group_by_field\"",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Value: "group_by_field",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   5,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 37,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   5,
									},
									Source: "load",
									Start: ast.Position{
										Column: 37,
										Line:   5,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   5,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 43,
										Line:   5,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   5,
								},
								Source: "infile: \"group_by_field.in.csv\"",
								Start: ast.Position{
									Column: 57,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   5,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 57,
										Line:   5,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   5,
									},
									Source: "\"group_by_field.in.csv\"",
									Start: ast.Position{
										Column: 65,
										Line:   5,
									},
								},
							},
							Value: "group_by_field.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   5,
								},
								Source: "outfile: \"group_by_field.out.csv\"",
								Start: ast.Position{
									Column: 90,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   5,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 90,
										Line:   5,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   5,
									},
									Source: "\"group_by_field.out.csv\"",
									Start: ast.Position{
										Column: 99,
										Line:   5,
									},
								},
							},
							Value: "group_by_field.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   5,
								},
								Source: "test: t_group_by_field",
								Start: ast.Position{
									Column: 125,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   5,
									},
									Source: "test",
									Start: ast.Position{
										Column: 125,
										Line:   5,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   5,
									},
									Source: "t_group_by_field",
									Start: ast.Position{
										Column: 131,
										Line:   5,
									},
								},
							},
							Name: "t_group_by_field",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 148,
							Line:   5,
						},
						Source: "testingTest(name: \"group_by_field\", load: testLoadData, infile: \"group_by_field.in.csv\", outfile: \"group_by_field.out.csv\", test: t_group_by_field)",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   5,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   5,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "group_by_field.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 164,
					Line:   9,
				},
				Source: "t_group_by_irregular = (table=<-) =>\r\n  table\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> group(columns: [\"runID\"])\r\n  |> yield(name:\"r1\")\r\n\r\ntestingTest(name: \"group_by_irregular\", load: testLoadData, infile: \"group_by_irregular.in.csv\", outfile: \"group_by_irregular.out.csv\", test: t_group_by_irregular)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   7,
					},
					Source: "t_group_by_irregular = (table=<-) =>\r\n  table\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> group(columns: [\"runID\"])\r\n  |> yield(name:\"r1\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   1,
						},
						Source: "t_group_by_irregular",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_group_by_irregular",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   7,
						},
						Source: "(table=<-) =>\r\n  table\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> group(columns: [\"runID\"])\r\n  |> yield(name:\"r1\")",
						Start: ast.Position{
							Column: 24,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   3,
											},
											Source: "table\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   3,
													},
													Source: "start: 2018-10-02T17:55:11.520461Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   3,
														},
														Source: "start: 2018-10-02T17:55:11.520461Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   3,
															},
															Source: "2018-10-02T17:55:11.520461Z",
															Start: ast.Position{
																Column: 19,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   3,
												},
												Source: "range(start: 2018-10-02T17:55:11.520461Z)",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 88,
											Line:   4,
										},
										Source: "table\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 86,
													Line:   4,
												},
												Source: "fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
												Start: ast.Position{
													Column: 13,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 86,
														Line:   4,
													},
													Source: "fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
													Start: ast.Position{
														Column: 13,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   4,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 13,
															Line:   4,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 86,
															Line:   4,
														},
														Source: "(r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Body: &ast.LogicalExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 86,
																Line:   4,
															},
															Source: "r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
															Start: ast.Position{
																Column: 24,
																Line:   4,
															},
														},
													},
													Left: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 51,
																	Line:   4,
																},
																Source: "r._measurement == \"records\"",
																Start: ast.Position{
																	Column: 24,
																	Line:   4,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   4,
																	},
																	Source: "r._measurement",
																	Start: ast.Position{
																		Column: 24,
																		Line:   4,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   4,
																		},
																		Source: "r",
																		Start: ast.Position{
																			Column: 24,
																			Line:   4,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   4,
																		},
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 26,
																			Line:   4,
																		},
																	},
																},
																Name: "_measurement",
															},
														},
														Operator: 14,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 51,
																		Line:   4,
																	},
																	Source: "\"records\"",
																	Start: ast.Position{
																		Column: 42,
																		Line:   4,
																	},
																},
															},
															Value: "records",
														},
													},
													Operator: 1,
													Right: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 86,
																	Line:   4,
																},
																Source: "r.taskID == \"02bac3c8f0f37000\"",
																Start: ast.Position{
																	Column: 56,
																	Line:   4,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 64,
																		Line:   4,
																	},
																	Source: "r.taskID",
																	Start: ast.Position{
																		Column: 56,
																		Line:   4,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 57,
																			Line:   4,
																		},
																		Source: "r",
																		Start: ast.Position{
																			Column: 56,
																			Line:   4,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 64,
																			Line:   4,
																		},
																		Source: "taskID",
																		Start: ast.Position{
																			Column: 58,
																			Line:   4,
																		},
																	},
																},
																Name: "taskID",
															},
														},
														Operator: 14,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 86,
																		Line:   4,
																	},
																	Source: "\"02bac3c8f0f37000\"",
																	Start: ast.Position{
																		Column: 68,
																		Line:   4,
																	},
																},
															},
															Value: "02bac3c8f0f37000",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   4,
															},
															Source: "r",
															Start: ast.Position{
																Column: 18,
																Line:   4,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 18,
																	Line:   4,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 88,
												Line:   4,
											},
											Source: "filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   4,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   5,
									},
									Source: "table\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   5,
											},
											Source: "rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\"",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   5,
												},
												Source: "rowKey:[\"_time\"]",
												Start: ast.Position{
													Column: 12,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   5,
													},
													Source: "rowKey",
													Start: ast.Position{
														Column: 12,
														Line:   5,
													},
												},
											},
											Name: "rowKey",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   5,
													},
													Source: "[\"_time\"]",
													Start: ast.Position{
														Column: 19,
														Line:   5,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   5,
														},
														Source: "\"_time\"",
														Start: ast.Position{
															Column: 20,
															Line:   5,
														},
													},
												},
												Value: "_time",
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   5,
												},
												Source: "columnKey: [\"_field\"]",
												Start: ast.Position{
													Column: 30,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   5,
													},
													Source: "columnKey",
													Start: ast.Position{
														Column: 30,
														Line:   5,
													},
												},
											},
											Name: "columnKey",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   5,
													},
													Source: "[\"_field\"]",
													Start: ast.Position{
														Column: 41,
														Line:   5,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   5,
														},
														Source: "\"_field\"",
														Start: ast.Position{
															Column: 42,
															Line:   5,
														},
													},
												},
												Value: "_field",
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   5,
												},
												Source: "valueColumn: \"_value\"",
												Start: ast.Position{
													Column: 53,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 64,
														Line:   5,
													},
													Source: "valueColumn",
													Start: ast.Position{
														Column: 53,
														Line:   5,
													},
												},
											},
											Name: "valueColumn",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   5,
													},
													Source: "\"_value\"",
													Start: ast.Position{
														Column: 66,
														Line:   5,
													},
												},
											},
											Value: "_value",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   5,
										},
										Source: "pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   5,
											},
											Source: "pivot",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Name: "pivot",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   6,
								},
								Source: "table\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> group(columns: [\"runID\"])",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   6,
										},
										Source: "columns: [\"runID\"]",
										Start: ast.Position{
											Column: 12,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   6,
											},
											Source: "columns: [\"runID\"]",
											Start: ast.Position{
												Column: 12,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   6,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 12,
													Line:   6,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   6,
												},
												Source: "[\"runID\"]",
												Start: ast.Position{
													Column: 21,
													Line:   6,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   6,
													},
													Source: "\"runID\"",
													Start: ast.Position{
														Column: 22,
														Line:   6,
													},
												},
											},
											Value: "runID",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   6,
									},
									Source: "group(columns: [\"runID\"])",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   6,
										},
										Source: "group",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Name: "group",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   7,
							},
							Source: "table\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> group(columns: [\"runID\"])\r\n  |> yield(name:\"r1\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   7,
									},
									Source: "name:\"r1\"",
									Start: ast.Position{
										Column: 12,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   7,
										},
										Source: "name:\"r1\"",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   7,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   7,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   7,
											},
											Source: "\"r1\"",
											Start: ast.Position{
												Column: 17,
												Line:   7,
											},
										},
									},
									Value: "r1",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   7,
								},
								Source: "yield(name:\"r1\")",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 25,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 25,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 31,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 164,
						Line:   9,
					},
					Source: "testingTest(name: \"group_by_irregular\", load: testLoadData, infile: \"group_by_irregular.in.csv\", outfile: \"group_by_irregular.out.csv\", test: t_group_by_irregular)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 163,
								Line:   9,
							},
							Source: "name: \"group_by_irregular\", load: testLoadData, infile: \"group_by_irregular.in.csv\", outfile: \"group_by_irregular.out.csv\", test: t_group_by_irregular",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   9,
								},
								Source: "name: \"group_by_irregular\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   9,
									},
									Source: "\"group_by_irregular\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "group_by_irregular",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 41,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 41,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 47,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   9,
								},
								Source: "infile: \"group_by_irregular.in.csv\"",
								Start: ast.Position{
									Column: 61,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 61,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   9,
									},
									Source: "\"group_by_irregular.in.csv\"",
									Start: ast.Position{
										Column: 69,
										Line:   9,
									},
								},
							},
							Value: "group_by_irregular.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   9,
								},
								Source: "outfile: \"group_by_irregular.out.csv\"",
								Start: ast.Position{
									Column: 98,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 98,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   9,
									},
									Source: "\"group_by_irregular.out.csv\"",
									Start: ast.Position{
										Column: 107,
										Line:   9,
									},
								},
							},
							Value: "group_by_irregular.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 163,
									Line:   9,
								},
								Source: "test: t_group_by_irregular",
								Start: ast.Position{
									Column: 137,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 137,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 163,
										Line:   9,
									},
									Source: "t_group_by_irregular",
									Start: ast.Position{
										Column: 143,
										Line:   9,
									},
								},
							},
							Name: "t_group_by_irregular",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 164,
							Line:   9,
						},
						Source: "testingTest(name: \"group_by_irregular\", load: testLoadData, infile: \"group_by_irregular.in.csv\", outfile: \"group_by_irregular.out.csv\", test: t_group_by_irregular)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "group_by_irregular.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 140,
					Line:   7,
				},
				Source: "t_group_except = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns:[\"_measurement\", \"_time\", \"_value\"], mode: \"except\")\n    |> max()\n\ntestingTest(name: \"group_except\", load: testLoadData, infile: \"group_except.in.csv\", outfile: \"group_except.out.csv\", test: t_group_except)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   5,
					},
					Source: "t_group_except = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns:[\"_measurement\", \"_time\", \"_value\"], mode: \"except\")\n    |> max()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   1,
						},
						Source: "t_group_except",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_group_except",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns:[\"_measurement\", \"_time\", \"_value\"], mode: \"except\")\n    |> max()",
						Start: ast.Position{
							Column: 18,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 14,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 20,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 8,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   4,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns:[\"_measurement\", \"_time\", \"_value\"], mode: \"except\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 73,
											Line:   4,
										},
										Source: "columns:[\"_measurement\", \"_time\", \"_value\"], mode: \"except\"",
										Start: ast.Position{
											Column: 14,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   4,
											},
											Source: "columns:[\"_measurement\", \"_time\", \"_value\"]",
											Start: ast.Position{
												Column: 14,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 14,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   4,
												},
												Source: "[\"_measurement\", \"_time\", \"_value\"]",
												Start: ast.Position{
													Column: 22,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   4,
													},
													Source: "\"_measurement\"",
													Start: ast.Position{
														Column: 23,
														Line:   4,
													},
												},
											},
											Value: "_measurement",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   4,
													},
													Source: "\"_time\"",
													Start: ast.Position{
														Column: 39,
														Line:   4,
													},
												},
											},
											Value: "_time",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 56,
														Line:   4,
													},
													Source: "\"_value\"",
													Start: ast.Position{
														Column: 48,
														Line:   4,
													},
												},
											},
											Value: "_value",
										}},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 73,
												Line:   4,
											},
											Source: "mode: \"except\"",
											Start: ast.Position{
												Column: 59,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   4,
												},
												Source: "mode",
												Start: ast.Position{
													Column: 59,
													Line:   4,
												},
											},
										},
										Name: "mode",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 73,
													Line:   4,
												},
												Source: "\"except\"",
												Start: ast.Position{
													Column: 65,
													Line:   4,
												},
											},
										},
										Value: "except",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   4,
									},
									Source: "group(columns:[\"_measurement\", \"_time\", \"_value\"], mode: \"except\")",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   4,
										},
										Source: "group",
										Start: ast.Position{
											Column: 8,
											Line:   4,
										},
									},
								},
								Name: "group",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   5,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns:[\"_measurement\", \"_time\", \"_value\"], mode: \"except\")\n    |> max()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   5,
								},
								Source: "max()",
								Start: ast.Position{
									Column: 8,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "max",
									Start: ast.Position{
										Column: 8,
										Line:   5,
									},
								},
							},
							Name: "max",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 19,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 19,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 25,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 140,
						Line:   7,
					},
					Source: "testingTest(name: \"group_except\", load: testLoadData, infile: \"group_except.in.csv\", outfile: \"group_except.out.csv\", test: t_group_except)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 139,
								Line:   7,
							},
							Source: "name: \"group_except\", load: testLoadData, infile: \"group_except.in.csv\", outfile: \"group_except.out.csv\", test: t_group_except",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   7,
								},
								Source: "name: \"group_except\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   7,
									},
									Source: "\"group_except\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "group_except",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 35,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 35,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 41,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   7,
								},
								Source: "infile: \"group_except.in.csv\"",
								Start: ast.Position{
									Column: 55,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 55,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 84,
										Line:   7,
									},
									Source: "\"group_except.in.csv\"",
									Start: ast.Position{
										Column: 63,
										Line:   7,
									},
								},
							},
							Value: "group_except.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 117,
									Line:   7,
								},
								Source: "outfile: \"group_except.out.csv\"",
								Start: ast.Position{
									Column: 86,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 86,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   7,
									},
									Source: "\"group_except.out.csv\"",
									Start: ast.Position{
										Column: 95,
										Line:   7,
									},
								},
							},
							Value: "group_except.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 139,
									Line:   7,
								},
								Source: "test: t_group_except",
								Start: ast.Position{
									Column: 119,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 119,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 139,
										Line:   7,
									},
									Source: "t_group_except",
									Start: ast.Position{
										Column: 125,
										Line:   7,
									},
								},
							},
							Name: "t_group_except",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 140,
							Line:   7,
						},
						Source: "testingTest(name: \"group_except\", load: testLoadData, infile: \"group_except.in.csv\", outfile: \"group_except.out.csv\", test: t_group_except)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "group_except.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 144,
					Line:   9,
				},
				Source: "t_group_ungroup = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"name\"])\n  |> group()\n  |> map(fn: (r) => ({_time: r._time, io_time:r._value}))\n  |> yield(name:\"0\")\n\ntestingTest(name: \"group_ungroup\", load: testLoadData, infile: \"group_ungroup.in.csv\", outfile: \"group_ungroup.out.csv\", test: t_group_ungroup)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   7,
					},
					Source: "t_group_ungroup = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"name\"])\n  |> group()\n  |> map(fn: (r) => ({_time: r._time, io_time:r._value}))\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						Source: "t_group_ungroup",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_group_ungroup",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"name\"])\n  |> group()\n  |> map(fn: (r) => ({_time: r._time, io_time:r._value}))\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 19,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   3,
													},
													Source: "start: 2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   3,
														},
														Source: "start: 2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   3,
															},
															Source: "2018-05-22T19:53:26Z",
															Start: ast.Position{
																Column: 19,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "range(start: 2018-05-22T19:53:26Z)",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   4,
										},
										Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"name\"])",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   4,
												},
												Source: "columns: [\"name\"]",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   4,
													},
													Source: "columns: [\"name\"]",
													Start: ast.Position{
														Column: 12,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   4,
														},
														Source: "columns",
														Start: ast.Position{
															Column: 12,
															Line:   4,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   4,
														},
														Source: "[\"name\"]",
														Start: ast.Position{
															Column: 21,
															Line:   4,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   4,
															},
															Source: "\"name\"",
															Start: ast.Position{
																Column: 22,
																Line:   4,
															},
														},
													},
													Value: "name",
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   4,
											},
											Source: "group(columns: [\"name\"])",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   4,
												},
												Source: "group",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   5,
									},
									Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"name\"])\n  |> group()",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   5,
										},
										Source: "group()",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   5,
											},
											Source: "group",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   6,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"name\"])\n  |> group()\n  |> map(fn: (r) => ({_time: r._time, io_time:r._value}))",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   6,
										},
										Source: "fn: (r) => ({_time: r._time, io_time:r._value}",
										Start: ast.Position{
											Column: 10,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   6,
											},
											Source: "fn: (r) => ({_time: r._time, io_time:r._value}",
											Start: ast.Position{
												Column: 10,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   6,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   6,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   6,
												},
												Source: "(r) => ({_time: r._time, io_time:r._value}",
												Start: ast.Position{
													Column: 14,
													Line:   6,
												},
											},
										},
										Body: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 56,
														Line:   6,
													},
													Source: "{_time: r._time, io_time:r._value}",
													Start: ast.Position{
														Column: 22,
														Line:   6,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   6,
														},
														Source: "_time: r._time",
														Start: ast.Position{
															Column: 23,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   6,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 23,
																Line:   6,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   6,
															},
															Source: "r._time",
															Start: ast.Position{
																Column: 30,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   6,
																},
																Source: "_time",
																Start: ast.Position{
																	Column: 32,
																	Line:   6,
																},
															},
														},
														Name: "_time",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   6,
														},
														Source: "io_time:r._value",
														Start: ast.Position{
															Column: 39,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   6,
															},
															Source: "io_time",
															Start: ast.Position{
																Column: 39,
																Line:   6,
															},
														},
													},
													Name: "io_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   6,
															},
															Source: "r._value",
															Start: ast.Position{
																Column: 47,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 48,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 47,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   6,
																},
																Source: "_value",
																Start: ast.Position{
																	Column: 49,
																	Line:   6,
																},
															},
														},
														Name: "_value",
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   6,
													},
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   6,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   6,
														},
														Source: "r",
														Start: ast.Position{
															Column: 15,
															Line:   6,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   6,
									},
									Source: "map(fn: (r) => ({_time: r._time, io_time:r._value}))",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   6,
										},
										Source: "map",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   7,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"name\"])\n  |> group()\n  |> map(fn: (r) => ({_time: r._time, io_time:r._value}))\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   7,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   7,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   7,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   7,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   7,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   7,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   7,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 20,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 26,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 144,
						Line:   9,
					},
					Source: "testingTest(name: \"group_ungroup\", load: testLoadData, infile: \"group_ungroup.in.csv\", outfile: \"group_ungroup.out.csv\", test: t_group_ungroup)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 143,
								Line:   9,
							},
							Source: "name: \"group_ungroup\", load: testLoadData, infile: \"group_ungroup.in.csv\", outfile: \"group_ungroup.out.csv\", test: t_group_ungroup",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   9,
								},
								Source: "name: \"group_ungroup\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   9,
									},
									Source: "\"group_ungroup\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "group_ungroup",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 36,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 36,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 42,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   9,
								},
								Source: "infile: \"group_ungroup.in.csv\"",
								Start: ast.Position{
									Column: 56,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 56,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   9,
									},
									Source: "\"group_ungroup.in.csv\"",
									Start: ast.Position{
										Column: 64,
										Line:   9,
									},
								},
							},
							Value: "group_ungroup.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 120,
									Line:   9,
								},
								Source: "outfile: \"group_ungroup.out.csv\"",
								Start: ast.Position{
									Column: 88,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 88,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   9,
									},
									Source: "\"group_ungroup.out.csv\"",
									Start: ast.Position{
										Column: 97,
										Line:   9,
									},
								},
							},
							Value: "group_ungroup.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 143,
									Line:   9,
								},
								Source: "test: t_group_ungroup",
								Start: ast.Position{
									Column: 122,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 122,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 143,
										Line:   9,
									},
									Source: "t_group_ungroup",
									Start: ast.Position{
										Column: 128,
										Line:   9,
									},
								},
							},
							Name: "t_group_ungroup",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 144,
							Line:   9,
						},
						Source: "testingTest(name: \"group_ungroup\", load: testLoadData, infile: \"group_ungroup.in.csv\", outfile: \"group_ungroup.out.csv\", test: t_group_ungroup)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "group_ungroup.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 148,
					Line:   5,
				},
				Source: "t_highestAverage = (table=<-) =>\n  table\n    |> highestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])\n\ntestingTest(name: \"highestAverage\", load: testLoadData, infile: \"highestAverage.in.csv\", outfile: \"highestAverage.out.csv\", test: t_highestAverage)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   3,
					},
					Source: "t_highestAverage = (table=<-) =>\n  table\n    |> highestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						Source: "t_highestAverage",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_highestAverage",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n    |> highestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])",
						Start: ast.Position{
							Column: 20,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   3,
							},
							Source: "table\n    |> highestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   3,
									},
									Source: "n: 3, groupColumns: [\"_measurement\", \"host\"]",
									Start: ast.Position{
										Column: 23,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   3,
										},
										Source: "n: 3",
										Start: ast.Position{
											Column: 23,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   3,
											},
											Source: "n",
											Start: ast.Position{
												Column: 23,
												Line:   3,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   3,
											},
											Source: "3",
											Start: ast.Position{
												Column: 26,
												Line:   3,
											},
										},
									},
									Value: int64(3),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   3,
										},
										Source: "groupColumns: [\"_measurement\", \"host\"]",
										Start: ast.Position{
											Column: 29,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "groupColumns",
											Start: ast.Position{
												Column: 29,
												Line:   3,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   3,
											},
											Source: "[\"_measurement\", \"host\"]",
											Start: ast.Position{
												Column: 43,
												Line:   3,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   3,
												},
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 44,
													Line:   3,
												},
											},
										},
										Value: "_measurement",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   3,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 60,
													Line:   3,
												},
											},
										},
										Value: "host",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   3,
								},
								Source: "highestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])",
								Start: ast.Position{
									Column: 8,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   3,
									},
									Source: "highestAverage",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Name: "highestAverage",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 21,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 148,
						Line:   5,
					},
					Source: "testingTest(name: \"highestAverage\", load: testLoadData, infile: \"highestAverage.in.csv\", outfile: \"highestAverage.out.csv\", test: t_highestAverage)",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 147,
								Line:   5,
							},
							Source: "name: \"highestAverage\", load: testLoadData, infile: \"highestAverage.in.csv\", outfile: \"highestAverage.out.csv\", test: t_highestAverage",
							Start: ast.Position{
								Column: 13,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   5,
								},
								Source: "name: \"highestAverage\"",
								Start: ast.Position{
									Column: 13,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   5,
									},
									Source: "\"highestAverage\"",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Value: "highestAverage",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   5,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 37,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   5,
									},
									Source: "load",
									Start: ast.Position{
										Column: 37,
										Line:   5,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   5,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 43,
										Line:   5,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   5,
								},
								Source: "infile: \"highestAverage.in.csv\"",
								Start: ast.Position{
									Column: 57,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   5,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 57,
										Line:   5,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   5,
									},
									Source: "\"highestAverage.in.csv\"",
									Start: ast.Position{
										Column: 65,
										Line:   5,
									},
								},
							},
							Value: "highestAverage.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   5,
								},
								Source: "outfile: \"highestAverage.out.csv\"",
								Start: ast.Position{
									Column: 90,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   5,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 90,
										Line:   5,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   5,
									},
									Source: "\"highestAverage.out.csv\"",
									Start: ast.Position{
										Column: 99,
										Line:   5,
									},
								},
							},
							Value: "highestAverage.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   5,
								},
								Source: "test: t_highestAverage",
								Start: ast.Position{
									Column: 125,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   5,
									},
									Source: "test",
									Start: ast.Position{
										Column: 125,
										Line:   5,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   5,
									},
									Source: "t_highestAverage",
									Start: ast.Position{
										Column: 131,
										Line:   5,
									},
								},
							},
							Name: "t_highestAverage",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 148,
							Line:   5,
						},
						Source: "testingTest(name: \"highestAverage\", load: testLoadData, infile: \"highestAverage.in.csv\", outfile: \"highestAverage.out.csv\", test: t_highestAverage)",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   5,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   5,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "highestAverage.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 148,
					Line:   6,
				},
				Source: "t_highestCurrent = (table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> highestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])\n\ntestingTest(name: \"highestCurrent\", load: testLoadData, infile: \"highestCurrent.in.csv\", outfile: \"highestCurrent.out.csv\", test: t_highestCurrent)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   4,
					},
					Source: "t_highestCurrent = (table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> highestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						Source: "t_highestCurrent",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_highestCurrent",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> highestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])",
						Start: ast.Position{
							Column: 20,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   3,
								},
								Source: "table\n    |> range(start: 2018-11-07T00:00:00Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "start: 2018-11-07T00:00:00Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "start: 2018-11-07T00:00:00Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   3,
												},
												Source: "2018-11-07T00:00:00Z",
												Start: ast.Position{
													Column: 21,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   3,
									},
									Source: "range(start: 2018-11-07T00:00:00Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   4,
							},
							Source: "table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> highestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   4,
									},
									Source: "n: 3, groupColumns: [\"_measurement\", \"host\"]",
									Start: ast.Position{
										Column: 23,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   4,
										},
										Source: "n: 3",
										Start: ast.Position{
											Column: 23,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   4,
											},
											Source: "n",
											Start: ast.Position{
												Column: 23,
												Line:   4,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   4,
											},
											Source: "3",
											Start: ast.Position{
												Column: 26,
												Line:   4,
											},
										},
									},
									Value: int64(3),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   4,
										},
										Source: "groupColumns: [\"_measurement\", \"host\"]",
										Start: ast.Position{
											Column: 29,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   4,
											},
											Source: "groupColumns",
											Start: ast.Position{
												Column: 29,
												Line:   4,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   4,
											},
											Source: "[\"_measurement\", \"host\"]",
											Start: ast.Position{
												Column: 43,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   4,
												},
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 44,
													Line:   4,
												},
											},
										},
										Value: "_measurement",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   4,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 60,
													Line:   4,
												},
											},
										},
										Value: "host",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   4,
								},
								Source: "highestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   4,
									},
									Source: "highestCurrent",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "highestCurrent",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 21,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 148,
						Line:   6,
					},
					Source: "testingTest(name: \"highestCurrent\", load: testLoadData, infile: \"highestCurrent.in.csv\", outfile: \"highestCurrent.out.csv\", test: t_highestCurrent)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 147,
								Line:   6,
							},
							Source: "name: \"highestCurrent\", load: testLoadData, infile: \"highestCurrent.in.csv\", outfile: \"highestCurrent.out.csv\", test: t_highestCurrent",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   6,
								},
								Source: "name: \"highestCurrent\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   6,
									},
									Source: "\"highestCurrent\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "highestCurrent",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 37,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 37,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 43,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   6,
								},
								Source: "infile: \"highestCurrent.in.csv\"",
								Start: ast.Position{
									Column: 57,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 57,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   6,
									},
									Source: "\"highestCurrent.in.csv\"",
									Start: ast.Position{
										Column: 65,
										Line:   6,
									},
								},
							},
							Value: "highestCurrent.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   6,
								},
								Source: "outfile: \"highestCurrent.out.csv\"",
								Start: ast.Position{
									Column: 90,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 90,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   6,
									},
									Source: "\"highestCurrent.out.csv\"",
									Start: ast.Position{
										Column: 99,
										Line:   6,
									},
								},
							},
							Value: "highestCurrent.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   6,
								},
								Source: "test: t_highestCurrent",
								Start: ast.Position{
									Column: 125,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 125,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   6,
									},
									Source: "t_highestCurrent",
									Start: ast.Position{
										Column: 131,
										Line:   6,
									},
								},
							},
							Name: "t_highestCurrent",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 148,
							Line:   6,
						},
						Source: "testingTest(name: \"highestCurrent\", load: testLoadData, infile: \"highestCurrent.in.csv\", outfile: \"highestCurrent.out.csv\", test: t_highestCurrent)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "highestCurrent.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 132,
					Line:   5,
				},
				Source: "t_highestMax = (table=<-) =>\n  table\n    |> highestMax(n: 3, groupColumns: [\"_measurement\", \"host\"])\n\ntestingTest(name: \"highestMax\", load: testLoadData, infile: \"highestMax.in.csv\", outfile: \"highestMax.out.csv\", test: t_highestMax)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 64,
						Line:   3,
					},
					Source: "t_highestMax = (table=<-) =>\n  table\n    |> highestMax(n: 3, groupColumns: [\"_measurement\", \"host\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						Source: "t_highestMax",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_highestMax",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 64,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n    |> highestMax(n: 3, groupColumns: [\"_measurement\", \"host\"])",
						Start: ast.Position{
							Column: 16,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   3,
							},
							Source: "table\n    |> highestMax(n: 3, groupColumns: [\"_measurement\", \"host\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   3,
									},
									Source: "n: 3, groupColumns: [\"_measurement\", \"host\"]",
									Start: ast.Position{
										Column: 19,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   3,
										},
										Source: "n: 3",
										Start: ast.Position{
											Column: 19,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   3,
											},
											Source: "n",
											Start: ast.Position{
												Column: 19,
												Line:   3,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   3,
											},
											Source: "3",
											Start: ast.Position{
												Column: 22,
												Line:   3,
											},
										},
									},
									Value: int64(3),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   3,
										},
										Source: "groupColumns: [\"_measurement\", \"host\"]",
										Start: ast.Position{
											Column: 25,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   3,
											},
											Source: "groupColumns",
											Start: ast.Position{
												Column: 25,
												Line:   3,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   3,
											},
											Source: "[\"_measurement\", \"host\"]",
											Start: ast.Position{
												Column: 39,
												Line:   3,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   3,
												},
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 40,
													Line:   3,
												},
											},
										},
										Value: "_measurement",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   3,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 56,
													Line:   3,
												},
											},
										},
										Value: "host",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   3,
								},
								Source: "highestMax(n: 3, groupColumns: [\"_measurement\", \"host\"])",
								Start: ast.Position{
									Column: 8,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   3,
									},
									Source: "highestMax",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Name: "highestMax",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 132,
						Line:   5,
					},
					Source: "testingTest(name: \"highestMax\", load: testLoadData, infile: \"highestMax.in.csv\", outfile: \"highestMax.out.csv\", test: t_highestMax)",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 131,
								Line:   5,
							},
							Source: "name: \"highestMax\", load: testLoadData, infile: \"highestMax.in.csv\", outfile: \"highestMax.out.csv\", test: t_highestMax",
							Start: ast.Position{
								Column: 13,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   5,
								},
								Source: "name: \"highestMax\"",
								Start: ast.Position{
									Column: 13,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   5,
									},
									Source: "\"highestMax\"",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Value: "highestMax",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   5,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 33,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   5,
									},
									Source: "load",
									Start: ast.Position{
										Column: 33,
										Line:   5,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   5,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 39,
										Line:   5,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   5,
								},
								Source: "infile: \"highestMax.in.csv\"",
								Start: ast.Position{
									Column: 53,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   5,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 53,
										Line:   5,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   5,
									},
									Source: "\"highestMax.in.csv\"",
									Start: ast.Position{
										Column: 61,
										Line:   5,
									},
								},
							},
							Value: "highestMax.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   5,
								},
								Source: "outfile: \"highestMax.out.csv\"",
								Start: ast.Position{
									Column: 82,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   5,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 82,
										Line:   5,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   5,
									},
									Source: "\"highestMax.out.csv\"",
									Start: ast.Position{
										Column: 91,
										Line:   5,
									},
								},
							},
							Value: "highestMax.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 131,
									Line:   5,
								},
								Source: "test: t_highestMax",
								Start: ast.Position{
									Column: 113,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   5,
									},
									Source: "test",
									Start: ast.Position{
										Column: 113,
										Line:   5,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 131,
										Line:   5,
									},
									Source: "t_highestMax",
									Start: ast.Position{
										Column: 119,
										Line:   5,
									},
								},
							},
							Name: "t_highestMax",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 132,
							Line:   5,
						},
						Source: "testingTest(name: \"highestMax\", load: testLoadData, infile: \"highestMax.in.csv\", outfile: \"highestMax.out.csv\", test: t_highestMax)",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   5,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   5,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "highestMax.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 128,
					Line:   5,
				},
				Source: "t_histogram = (table=<-) =>\n  table\n    |> histogram(bins:[-1.0,0.0,1.0,2.0])\n\ntestingTest(name: \"histogram\", load: testLoadData, infile: \"histogram.in.csv\", outfile: \"histogram.out.csv\", test: t_histogram)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 42,
						Line:   3,
					},
					Source: "t_histogram = (table=<-) =>\n  table\n    |> histogram(bins:[-1.0,0.0,1.0,2.0])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1,
						},
						Source: "t_histogram",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_histogram",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 42,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n    |> histogram(bins:[-1.0,0.0,1.0,2.0])",
						Start: ast.Position{
							Column: 15,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   3,
							},
							Source: "table\n    |> histogram(bins:[-1.0,0.0,1.0,2.0])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "bins:[-1.0,0.0,1.0,2.0]",
									Start: ast.Position{
										Column: 18,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "bins:[-1.0,0.0,1.0,2.0]",
										Start: ast.Position{
											Column: 18,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   3,
											},
											Source: "bins",
											Start: ast.Position{
												Column: 18,
												Line:   3,
											},
										},
									},
									Name: "bins",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "[-1.0,0.0,1.0,2.0]",
											Start: ast.Position{
												Column: 23,
												Line:   3,
											},
										},
									},
									Elements: []ast.Expression{&ast.UnaryExpression{
										Argument: &ast.FloatLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   3,
													},
													Source: "1.0",
													Start: ast.Position{
														Column: 25,
														Line:   3,
													},
												},
											},
											Value: 1.0,
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   3,
												},
												Source: "-1.0",
												Start: ast.Position{
													Column: 24,
													Line:   3,
												},
											},
										},
										Operator: 4,
									}, &ast.FloatLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   3,
												},
												Source: "0.0",
												Start: ast.Position{
													Column: 29,
													Line:   3,
												},
											},
										},
										Value: 0.0,
									}, &ast.FloatLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   3,
												},
												Source: "1.0",
												Start: ast.Position{
													Column: 33,
													Line:   3,
												},
											},
										},
										Value: 1.0,
									}, &ast.FloatLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2.0",
												Start: ast.Position{
													Column: 37,
													Line:   3,
												},
											},
										},
										Value: 2.0,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   3,
								},
								Source: "histogram(bins:[-1.0,0.0,1.0,2.0])",
								Start: ast.Position{
									Column: 8,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   3,
									},
									Source: "histogram",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Name: "histogram",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 16,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 128,
						Line:   5,
					},
					Source: "testingTest(name: \"histogram\", load: testLoadData, infile: \"histogram.in.csv\", outfile: \"histogram.out.csv\", test: t_histogram)",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 127,
								Line:   5,
							},
							Source: "name: \"histogram\", load: testLoadData, infile: \"histogram.in.csv\", outfile: \"histogram.out.csv\", test: t_histogram",
							Start: ast.Position{
								Column: 13,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   5,
								},
								Source: "name: \"histogram\"",
								Start: ast.Position{
									Column: 13,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   5,
									},
									Source: "\"histogram\"",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Value: "histogram",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   5,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 32,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   5,
									},
									Source: "load",
									Start: ast.Position{
										Column: 32,
										Line:   5,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   5,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 38,
										Line:   5,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   5,
								},
								Source: "infile: \"histogram.in.csv\"",
								Start: ast.Position{
									Column: 52,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   5,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 52,
										Line:   5,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   5,
									},
									Source: "\"histogram.in.csv\"",
									Start: ast.Position{
										Column: 60,
										Line:   5,
									},
								},
							},
							Value: "histogram.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   5,
								},
								Source: "outfile: \"histogram.out.csv\"",
								Start: ast.Position{
									Column: 80,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 87,
										Line:   5,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 80,
										Line:   5,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 108,
										Line:   5,
									},
									Source: "\"histogram.out.csv\"",
									Start: ast.Position{
										Column: 89,
										Line:   5,
									},
								},
							},
							Value: "histogram.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 127,
									Line:   5,
								},
								Source: "test: t_histogram",
								Start: ast.Position{
									Column: 110,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   5,
									},
									Source: "test",
									Start: ast.Position{
										Column: 110,
										Line:   5,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 127,
										Line:   5,
									},
									Source: "t_histogram",
									Start: ast.Position{
										Column: 116,
										Line:   5,
									},
								},
							},
							Name: "t_histogram",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 128,
							Line:   5,
						},
						Source: "testingTest(name: \"histogram\", load: testLoadData, infile: \"histogram.in.csv\", outfile: \"histogram.out.csv\", test: t_histogram)",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   5,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   5,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "histogram.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 148,
					Line:   9,
				},
				Source: "t_histogram = (table=<-) =>\n  table\n    |> histogram(bins:[-1.0,0.0,1.0,2.0],\n           normalize:true,\n           column: \"theValue\",\n           countColumn: \"theCount\",\n           upperBoundColumn: \"ub\")\n\ntestingTest(name: \"histogram\", load: testLoadData, infile: \"histogram_normalize.in.csv\", outfile: \"histogram_normalize.out.csv\", test: t_histogram)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 35,
						Line:   7,
					},
					Source: "t_histogram = (table=<-) =>\n  table\n    |> histogram(bins:[-1.0,0.0,1.0,2.0],\n           normalize:true,\n           column: \"theValue\",\n           countColumn: \"theCount\",\n           upperBoundColumn: \"ub\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1,
						},
						Source: "t_histogram",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_histogram",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 35,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n    |> histogram(bins:[-1.0,0.0,1.0,2.0],\n           normalize:true,\n           column: \"theValue\",\n           countColumn: \"theCount\",\n           upperBoundColumn: \"ub\")",
						Start: ast.Position{
							Column: 15,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   7,
							},
							Source: "table\n    |> histogram(bins:[-1.0,0.0,1.0,2.0],\n           normalize:true,\n           column: \"theValue\",\n           countColumn: \"theCount\",\n           upperBoundColumn: \"ub\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   7,
									},
									Source: "bins:[-1.0,0.0,1.0,2.0],\n           normalize:true,\n           column: \"theValue\",\n           countColumn: \"theCount\",\n           upperBoundColumn: \"ub\"",
									Start: ast.Position{
										Column: 18,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "bins:[-1.0,0.0,1.0,2.0]",
										Start: ast.Position{
											Column: 18,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   3,
											},
											Source: "bins",
											Start: ast.Position{
												Column: 18,
												Line:   3,
											},
										},
									},
									Name: "bins",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "[-1.0,0.0,1.0,2.0]",
											Start: ast.Position{
												Column: 23,
												Line:   3,
											},
										},
									},
									Elements: []ast.Expression{&ast.UnaryExpression{
										Argument: &ast.FloatLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   3,
													},
													Source: "1.0",
													Start: ast.Position{
														Column: 25,
														Line:   3,
													},
												},
											},
											Value: 1.0,
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   3,
												},
												Source: "-1.0",
												Start: ast.Position{
													Column: 24,
													Line:   3,
												},
											},
										},
										Operator: 4,
									}, &ast.FloatLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   3,
												},
												Source: "0.0",
												Start: ast.Position{
													Column: 29,
													Line:   3,
												},
											},
										},
										Value: 0.0,
									}, &ast.FloatLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   3,
												},
												Source: "1.0",
												Start: ast.Position{
													Column: 33,
													Line:   3,
												},
											},
										},
										Value: 1.0,
									}, &ast.FloatLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2.0",
												Start: ast.Position{
													Column: 37,
													Line:   3,
												},
											},
										},
										Value: 2.0,
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   4,
										},
										Source: "normalize:true",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   4,
											},
											Source: "normalize",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Name: "normalize",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   4,
											},
											Source: "true",
											Start: ast.Position{
												Column: 22,
												Line:   4,
											},
										},
									},
									Name: "true",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   5,
										},
										Source: "column: \"theValue\"",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   5,
											},
											Source: "column",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   5,
											},
											Source: "\"theValue\"",
											Start: ast.Position{
												Column: 20,
												Line:   5,
											},
										},
									},
									Value: "theValue",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   6,
										},
										Source: "countColumn: \"theCount\"",
										Start: ast.Position{
											Column: 12,
											Line:   6,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   6,
											},
											Source: "countColumn",
											Start: ast.Position{
												Column: 12,
												Line:   6,
											},
										},
									},
									Name: "countColumn",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   6,
											},
											Source: "\"theCount\"",
											Start: ast.Position{
												Column: 25,
												Line:   6,
											},
										},
									},
									Value: "theCount",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   7,
										},
										Source: "upperBoundColumn: \"ub\"",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   7,
											},
											Source: "upperBoundColumn",
											Start: ast.Position{
												Column: 12,
												Line:   7,
											},
										},
									},
									Name: "upperBoundColumn",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   7,
											},
											Source: "\"ub\"",
											Start: ast.Position{
												Column: 30,
												Line:   7,
											},
										},
									},
									Value: "ub",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   7,
								},
								Source: "histogram(bins:[-1.0,0.0,1.0,2.0],\n           normalize:true,\n           column: \"theValue\",\n           countColumn: \"theCount\",\n           upperBoundColumn: \"ub\")",
								Start: ast.Position{
									Column: 8,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   3,
									},
									Source: "histogram",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Name: "histogram",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 16,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 148,
						Line:   9,
					},
					Source: "testingTest(name: \"histogram\", load: testLoadData, infile: \"histogram_normalize.in.csv\", outfile: \"histogram_normalize.out.csv\", test: t_histogram)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 147,
								Line:   9,
							},
							Source: "name: \"histogram\", load: testLoadData, infile: \"histogram_normalize.in.csv\", outfile: \"histogram_normalize.out.csv\", test: t_histogram",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   9,
								},
								Source: "name: \"histogram\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   9,
									},
									Source: "\"histogram\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "histogram",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 32,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 32,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 38,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   9,
								},
								Source: "infile: \"histogram_normalize.in.csv\"",
								Start: ast.Position{
									Column: 52,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 52,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   9,
									},
									Source: "\"histogram_normalize.in.csv\"",
									Start: ast.Position{
										Column: 60,
										Line:   9,
									},
								},
							},
							Value: "histogram_normalize.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 128,
									Line:   9,
								},
								Source: "outfile: \"histogram_normalize.out.csv\"",
								Start: ast.Position{
									Column: 90,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 90,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 128,
										Line:   9,
									},
									Source: "\"histogram_normalize.out.csv\"",
									Start: ast.Position{
										Column: 99,
										Line:   9,
									},
								},
							},
							Value: "histogram_normalize.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   9,
								},
								Source: "test: t_histogram",
								Start: ast.Position{
									Column: 130,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 134,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 130,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   9,
									},
									Source: "t_histogram",
									Start: ast.Position{
										Column: 136,
										Line:   9,
									},
								},
							},
							Name: "t_histogram",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 148,
							Line:   9,
						},
						Source: "testingTest(name: \"histogram\", load: testLoadData, infile: \"histogram_normalize.in.csv\", outfile: \"histogram_normalize.out.csv\", test: t_histogram)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "histogram_normalize.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 164,
					Line:   6,
				},
				Source: "t_histogram_quantile = (table=<-) =>\n  table\n    |> range(start: 2018-05-22T19:53:00Z)\n    |> histogramQuantile(quantile:0.90,upperBoundColumn:\"le\")\n\ntestingTest(name: \"histogram_quantile\", load: testLoadData, infile: \"histogram_quantile.in.csv\", outfile: \"histogram_quantile.out.csv\", test: t_histogram_quantile)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 62,
						Line:   4,
					},
					Source: "t_histogram_quantile = (table=<-) =>\n  table\n    |> range(start: 2018-05-22T19:53:00Z)\n    |> histogramQuantile(quantile:0.90,upperBoundColumn:\"le\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   1,
						},
						Source: "t_histogram_quantile",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_histogram_quantile",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 62,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start: 2018-05-22T19:53:00Z)\n    |> histogramQuantile(quantile:0.90,upperBoundColumn:\"le\")",
						Start: ast.Position{
							Column: 24,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   3,
								},
								Source: "table\n    |> range(start: 2018-05-22T19:53:00Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "start: 2018-05-22T19:53:00Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:00Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   3,
												},
												Source: "2018-05-22T19:53:00Z",
												Start: ast.Position{
													Column: 21,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   3,
									},
									Source: "range(start: 2018-05-22T19:53:00Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 62,
								Line:   4,
							},
							Source: "table\n    |> range(start: 2018-05-22T19:53:00Z)\n    |> histogramQuantile(quantile:0.90,upperBoundColumn:\"le\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   4,
									},
									Source: "quantile:0.90,upperBoundColumn:\"le\"",
									Start: ast.Position{
										Column: 26,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   4,
										},
										Source: "quantile:0.90",
										Start: ast.Position{
											Column: 26,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   4,
											},
											Source: "quantile",
											Start: ast.Position{
												Column: 26,
												Line:   4,
											},
										},
									},
									Name: "quantile",
								},
								Value: &ast.FloatLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   4,
											},
											Source: "0.90",
											Start: ast.Position{
												Column: 35,
												Line:   4,
											},
										},
									},
									Value: 0.9,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   4,
										},
										Source: "upperBoundColumn:\"le\"",
										Start: ast.Position{
											Column: 40,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   4,
											},
											Source: "upperBoundColumn",
											Start: ast.Position{
												Column: 40,
												Line:   4,
											},
										},
									},
									Name: "upperBoundColumn",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   4,
											},
											Source: "\"le\"",
											Start: ast.Position{
												Column: 57,
												Line:   4,
											},
										},
									},
									Value: "le",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   4,
								},
								Source: "histogramQuantile(quantile:0.90,upperBoundColumn:\"le\")",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   4,
									},
									Source: "histogramQuantile",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "histogramQuantile",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 25,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 25,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 31,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 164,
						Line:   6,
					},
					Source: "testingTest(name: \"histogram_quantile\", load: testLoadData, infile: \"histogram_quantile.in.csv\", outfile: \"histogram_quantile.out.csv\", test: t_histogram_quantile)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 163,
								Line:   6,
							},
							Source: "name: \"histogram_quantile\", load: testLoadData, infile: \"histogram_quantile.in.csv\", outfile: \"histogram_quantile.out.csv\", test: t_histogram_quantile",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   6,
								},
								Source: "name: \"histogram_quantile\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   6,
									},
									Source: "\"histogram_quantile\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "histogram_quantile",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 41,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 41,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 47,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   6,
								},
								Source: "infile: \"histogram_quantile.in.csv\"",
								Start: ast.Position{
									Column: 61,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 61,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   6,
									},
									Source: "\"histogram_quantile.in.csv\"",
									Start: ast.Position{
										Column: 69,
										Line:   6,
									},
								},
							},
							Value: "histogram_quantile.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   6,
								},
								Source: "outfile: \"histogram_quantile.out.csv\"",
								Start: ast.Position{
									Column: 98,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 98,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   6,
									},
									Source: "\"histogram_quantile.out.csv\"",
									Start: ast.Position{
										Column: 107,
										Line:   6,
									},
								},
							},
							Value: "histogram_quantile.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 163,
									Line:   6,
								},
								Source: "test: t_histogram_quantile",
								Start: ast.Position{
									Column: 137,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 137,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 163,
										Line:   6,
									},
									Source: "t_histogram_quantile",
									Start: ast.Position{
										Column: 143,
										Line:   6,
									},
								},
							},
							Name: "t_histogram_quantile",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 164,
							Line:   6,
						},
						Source: "testingTest(name: \"histogram_quantile\", load: testLoadData, infile: \"histogram_quantile.in.csv\", outfile: \"histogram_quantile.out.csv\", test: t_histogram_quantile)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "histogram_quantile.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 124,
					Line:   7,
				},
				Source: "t_increase = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> increase()\n\n\ntestingTest(name: \"increase\", load: testLoadData, infile: \"increase.in.csv\", outfile: \"increase.out.csv\", test: t_increase)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   4,
					},
					Source: "t_increase = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> increase()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   1,
						},
						Source: "t_increase",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_increase",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> increase()",
						Start: ast.Position{
							Column: 14,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> increase()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   4,
								},
								Source: "increase()",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   4,
									},
									Source: "increase",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "increase",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 15,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 15,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 124,
						Line:   7,
					},
					Source: "testingTest(name: \"increase\", load: testLoadData, infile: \"increase.in.csv\", outfile: \"increase.out.csv\", test: t_increase)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 123,
								Line:   7,
							},
							Source: "name: \"increase\", load: testLoadData, infile: \"increase.in.csv\", outfile: \"increase.out.csv\", test: t_increase",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   7,
								},
								Source: "name: \"increase\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   7,
									},
									Source: "\"increase\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "increase",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 31,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 31,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 37,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   7,
								},
								Source: "infile: \"increase.in.csv\"",
								Start: ast.Position{
									Column: 51,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 51,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 76,
										Line:   7,
									},
									Source: "\"increase.in.csv\"",
									Start: ast.Position{
										Column: 59,
										Line:   7,
									},
								},
							},
							Value: "increase.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 105,
									Line:   7,
								},
								Source: "outfile: \"increase.out.csv\"",
								Start: ast.Position{
									Column: 78,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 85,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 78,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   7,
									},
									Source: "\"increase.out.csv\"",
									Start: ast.Position{
										Column: 87,
										Line:   7,
									},
								},
							},
							Value: "increase.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   7,
								},
								Source: "test: t_increase",
								Start: ast.Position{
									Column: 107,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 107,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   7,
									},
									Source: "t_increase",
									Start: ast.Position{
										Column: 113,
										Line:   7,
									},
								},
							},
							Name: "t_increase",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 124,
							Line:   7,
						},
						Source: "testingTest(name: \"increase\", load: testLoadData, infile: \"increase.in.csv\", outfile: \"increase.out.csv\", test: t_increase)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "increase.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 164,
					Line:   6,
				},
				Source: "t_influxFieldsAsCols = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:17Z)\n  |> influxFieldsAsCols()\n  |> yield(name:\"0\")\ntestingTest(name: \"influxFieldsAsCols\", load: testLoadData, infile: \"influxFieldsAsCols.in.csv\", outfile: \"influxFieldsAsCols.out.csv\", test: t_influxFieldsAsCols)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   5,
					},
					Source: "t_influxFieldsAsCols = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:17Z)\n  |> influxFieldsAsCols()\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   1,
						},
						Source: "t_influxFieldsAsCols",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_influxFieldsAsCols",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:17Z)\n  |> influxFieldsAsCols()\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 24,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   3,
									},
									Source: "table\n  |> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:17Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:17Z",
											Start: ast.Position{
												Column: 12,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "start: 2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 19,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 67,
													Line:   3,
												},
												Source: "stop: 2018-05-22T19:54:17Z",
												Start: ast.Position{
													Column: 41,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   3,
													},
													Source: "stop",
													Start: ast.Position{
														Column: 41,
														Line:   3,
													},
												},
											},
											Name: "stop",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 67,
														Line:   3,
													},
													Source: "2018-05-22T19:54:17Z",
													Start: ast.Position{
														Column: 47,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   3,
										},
										Source: "range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:17Z)",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 6,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   4,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:17Z)\n  |> influxFieldsAsCols()",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   4,
									},
									Source: "influxFieldsAsCols()",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   4,
										},
										Source: "influxFieldsAsCols",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "influxFieldsAsCols",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   5,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:17Z)\n  |> influxFieldsAsCols()\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   5,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   5,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   5,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   5,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   5,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   5,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 25,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 25,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 31,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 164,
						Line:   6,
					},
					Source: "testingTest(name: \"influxFieldsAsCols\", load: testLoadData, infile: \"influxFieldsAsCols.in.csv\", outfile: \"influxFieldsAsCols.out.csv\", test: t_influxFieldsAsCols)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 163,
								Line:   6,
							},
							Source: "name: \"influxFieldsAsCols\", load: testLoadData, infile: \"influxFieldsAsCols.in.csv\", outfile: \"influxFieldsAsCols.out.csv\", test: t_influxFieldsAsCols",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   6,
								},
								Source: "name: \"influxFieldsAsCols\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   6,
									},
									Source: "\"influxFieldsAsCols\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "influxFieldsAsCols",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 41,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 41,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 47,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   6,
								},
								Source: "infile: \"influxFieldsAsCols.in.csv\"",
								Start: ast.Position{
									Column: 61,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 61,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   6,
									},
									Source: "\"influxFieldsAsCols.in.csv\"",
									Start: ast.Position{
										Column: 69,
										Line:   6,
									},
								},
							},
							Value: "influxFieldsAsCols.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   6,
								},
								Source: "outfile: \"influxFieldsAsCols.out.csv\"",
								Start: ast.Position{
									Column: 98,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 98,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   6,
									},
									Source: "\"influxFieldsAsCols.out.csv\"",
									Start: ast.Position{
										Column: 107,
										Line:   6,
									},
								},
							},
							Value: "influxFieldsAsCols.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 163,
									Line:   6,
								},
								Source: "test: t_influxFieldsAsCols",
								Start: ast.Position{
									Column: 137,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 137,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 163,
										Line:   6,
									},
									Source: "t_influxFieldsAsCols",
									Start: ast.Position{
										Column: 143,
										Line:   6,
									},
								},
							},
							Name: "t_influxFieldsAsCols",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 164,
							Line:   6,
						},
						Source: "testingTest(name: \"influxFieldsAsCols\", load: testLoadData, infile: \"influxFieldsAsCols.in.csv\", outfile: \"influxFieldsAsCols.out.csv\", test: t_influxFieldsAsCols)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "influxFieldsAsCols.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   10,
				},
				Source: "t_integral = (table=<-) =>\n  table |> integral(unit: 10s)\n\ntestingTest(\n    name: \"integral\",\n    load: testLoadData,\n    infile: \"integral.in.csv\",\n    outfile: \"integral.out.csv\",\n    test: t_integral,\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 31,
						Line:   2,
					},
					Source: "t_integral = (table=<-) =>\n  table |> integral(unit: 10s)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   1,
						},
						Source: "t_integral",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_integral",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 31,
							Line:   2,
						},
						Source: "(table=<-) =>\n  table |> integral(unit: 10s)",
						Start: ast.Position{
							Column: 14,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   2,
							},
							Source: "table |> integral(unit: 10s)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   2,
									},
									Source: "unit: 10s",
									Start: ast.Position{
										Column: 21,
										Line:   2,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   2,
										},
										Source: "unit: 10s",
										Start: ast.Position{
											Column: 21,
											Line:   2,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   2,
											},
											Source: "unit",
											Start: ast.Position{
												Column: 21,
												Line:   2,
											},
										},
									},
									Name: "unit",
								},
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   2,
											},
											Source: "10s",
											Start: ast.Position{
												Column: 27,
												Line:   2,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(10),
										Unit:      "s",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   2,
								},
								Source: "integral(unit: 10s)",
								Start: ast.Position{
									Column: 12,
									Line:   2,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   2,
									},
									Source: "integral",
									Start: ast.Position{
										Column: 12,
										Line:   2,
									},
								},
							},
							Name: "integral",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 15,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 15,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   10,
					},
					Source: "testingTest(\n    name: \"integral\",\n    load: testLoadData,\n    infile: \"integral.in.csv\",\n    outfile: \"integral.out.csv\",\n    test: t_integral,\n)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   9,
							},
							Source: "name: \"integral\",\n    load: testLoadData,\n    infile: \"integral.in.csv\",\n    outfile: \"integral.out.csv\",\n    test: t_integral",
							Start: ast.Position{
								Column: 5,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   5,
								},
								Source: "name: \"integral\"",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   5,
									},
									Source: "\"integral\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Value: "integral",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   7,
								},
								Source: "infile: \"integral.in.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   7,
									},
									Source: "\"integral.in.csv\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Value: "integral.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   8,
								},
								Source: "outfile: \"integral.out.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   8,
									},
									Source: "\"integral.out.csv\"",
									Start: ast.Position{
										Column: 14,
										Line:   8,
									},
								},
							},
							Value: "integral.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   9,
								},
								Source: "test: t_integral",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   9,
									},
									Source: "t_integral",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Name: "t_integral",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   10,
						},
						Source: "testingTest(\n    name: \"integral\",\n    load: testLoadData,\n    infile: \"integral.in.csv\",\n    outfile: \"integral.out.csv\",\n    test: t_integral,\n)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "integral.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   10,
				},
				Source: "t_integral_columns = (table=<-) =>\n  table |> integral(columns: [\"v1\", \"v2\"], unit: 10s)\n\ntestingTest(\n    name: \"integral_columns\",\n    load: testLoadData,\n    infile: \"integral_columns.in.csv\",\n    outfile: \"integral_columns.out.csv\",\n    test: t_integral_columns,\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 54,
						Line:   2,
					},
					Source: "t_integral_columns = (table=<-) =>\n  table |> integral(columns: [\"v1\", \"v2\"], unit: 10s)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   1,
						},
						Source: "t_integral_columns",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_integral_columns",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 54,
							Line:   2,
						},
						Source: "(table=<-) =>\n  table |> integral(columns: [\"v1\", \"v2\"], unit: 10s)",
						Start: ast.Position{
							Column: 22,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   2,
							},
							Source: "table |> integral(columns: [\"v1\", \"v2\"], unit: 10s)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   2,
									},
									Source: "columns: [\"v1\", \"v2\"], unit: 10s",
									Start: ast.Position{
										Column: 21,
										Line:   2,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   2,
										},
										Source: "columns: [\"v1\", \"v2\"]",
										Start: ast.Position{
											Column: 21,
											Line:   2,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   2,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 21,
												Line:   2,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   2,
											},
											Source: "[\"v1\", \"v2\"]",
											Start: ast.Position{
												Column: 30,
												Line:   2,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   2,
												},
												Source: "\"v1\"",
												Start: ast.Position{
													Column: 31,
													Line:   2,
												},
											},
										},
										Value: "v1",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   2,
												},
												Source: "\"v2\"",
												Start: ast.Position{
													Column: 37,
													Line:   2,
												},
											},
										},
										Value: "v2",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   2,
										},
										Source: "unit: 10s",
										Start: ast.Position{
											Column: 44,
											Line:   2,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   2,
											},
											Source: "unit",
											Start: ast.Position{
												Column: 44,
												Line:   2,
											},
										},
									},
									Name: "unit",
								},
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   2,
											},
											Source: "10s",
											Start: ast.Position{
												Column: 50,
												Line:   2,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(10),
										Unit:      "s",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   2,
								},
								Source: "integral(columns: [\"v1\", \"v2\"], unit: 10s)",
								Start: ast.Position{
									Column: 12,
									Line:   2,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   2,
									},
									Source: "integral",
									Start: ast.Position{
										Column: 12,
										Line:   2,
									},
								},
							},
							Name: "integral",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 23,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 29,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   10,
					},
					Source: "testingTest(\n    name: \"integral_columns\",\n    load: testLoadData,\n    infile: \"integral_columns.in.csv\",\n    outfile: \"integral_columns.out.csv\",\n    test: t_integral_columns,\n)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   9,
							},
							Source: "name: \"integral_columns\",\n    load: testLoadData,\n    infile: \"integral_columns.in.csv\",\n    outfile: \"integral_columns.out.csv\",\n    test: t_integral_columns",
							Start: ast.Position{
								Column: 5,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   5,
								},
								Source: "name: \"integral_columns\"",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   5,
									},
									Source: "\"integral_columns\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Value: "integral_columns",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   7,
								},
								Source: "infile: \"integral_columns.in.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   7,
									},
									Source: "\"integral_columns.in.csv\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Value: "integral_columns.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   8,
								},
								Source: "outfile: \"integral_columns.out.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   8,
									},
									Source: "\"integral_columns.out.csv\"",
									Start: ast.Position{
										Column: 14,
										Line:   8,
									},
								},
							},
							Value: "integral_columns.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   9,
								},
								Source: "test: t_integral_columns",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   9,
									},
									Source: "t_integral_columns",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Name: "t_integral_columns",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   10,
						},
						Source: "testingTest(\n    name: \"integral_columns\",\n    load: testLoadData,\n    infile: \"integral_columns.in.csv\",\n    outfile: \"integral_columns.out.csv\",\n    test: t_integral_columns,\n)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "integral_columns.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 9,
					Line:   19,
				},
				Source: "t_join = () => {\n    left = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"user\"])\n\n    right = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])\n\n    got = join(tables: {left:left, right:right}, on: [\"_time\", \"_measurement\"])\n    want = testLoadData(file: \"join.out.csv\")\n    return assertEquals(name: \"join\", want: want, got: got)\n}\n\nt_join()",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   17,
					},
					Source: "t_join = () => {\n    left = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"user\"])\n\n    right = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])\n\n    got = join(tables: {left:left, right:right}, on: [\"_time\", \"_measurement\"])\n    want = testLoadData(file: \"join.out.csv\")\n    return assertEquals(name: \"join\", want: want, got: got)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   1,
						},
						Source: "t_join",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_join",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   17,
						},
						Source: "() => {\n    left = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"user\"])\n\n    right = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])\n\n    got = join(tables: {left:left, right:right}, on: [\"_time\", \"_measurement\"])\n    want = testLoadData(file: \"join.out.csv\")\n    return assertEquals(name: \"join\", want: want, got: got)\n}",
						Start: ast.Position{
							Column: 10,
							Line:   1,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   17,
							},
							Source: "{\n    left = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"user\"])\n\n    right = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])\n\n    got = join(tables: {left:left, right:right}, on: [\"_time\", \"_measurement\"])\n    want = testLoadData(file: \"join.out.csv\")\n    return assertEquals(name: \"join\", want: want, got: got)\n}",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   6,
								},
								Source: "left = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"user\"])",
								Start: ast.Position{
									Column: 5,
									Line:   2,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   2,
									},
									Source: "left",
									Start: ast.Position{
										Column: 5,
										Line:   2,
									},
								},
							},
							Name: "left",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   2,
														},
														Source: "file: \"join.in.csv\"",
														Start: ast.Position{
															Column: 25,
															Line:   2,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   2,
															},
															Source: "file: \"join.in.csv\"",
															Start: ast.Position{
																Column: 25,
																Line:   2,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 29,
																	Line:   2,
																},
																Source: "file",
																Start: ast.Position{
																	Column: 25,
																	Line:   2,
																},
															},
														},
														Name: "file",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   2,
																},
																Source: "\"join.in.csv\"",
																Start: ast.Position{
																	Column: 31,
																	Line:   2,
																},
															},
														},
														Value: "join.in.csv",
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   2,
													},
													Source: "testLoadData(file: \"join.in.csv\")",
													Start: ast.Position{
														Column: 12,
														Line:   2,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   2,
														},
														Source: "testLoadData",
														Start: ast.Position{
															Column: 12,
															Line:   2,
														},
													},
												},
												Name: "testLoadData",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   3,
												},
												Source: "testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
												Start: ast.Position{
													Column: 12,
													Line:   2,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 71,
															Line:   3,
														},
														Source: "start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z",
														Start: ast.Position{
															Column: 18,
															Line:   3,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   3,
															},
															Source: "start:2018-05-22T19:53:00Z",
															Start: ast.Position{
																Column: 18,
																Line:   3,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 23,
																	Line:   3,
																},
																Source: "start",
																Start: ast.Position{
																	Column: 18,
																	Line:   3,
																},
															},
														},
														Name: "start",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   3,
																},
																Source: "2018-05-22T19:53:00Z",
																Start: ast.Position{
																	Column: 24,
																	Line:   3,
																},
															},
														},
														Value: time.Time{},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 71,
																Line:   3,
															},
															Source: "stop:2018-05-22T19:55:00Z",
															Start: ast.Position{
																Column: 46,
																Line:   3,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   3,
																},
																Source: "stop",
																Start: ast.Position{
																	Column: 46,
																	Line:   3,
																},
															},
														},
														Name: "stop",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 71,
																	Line:   3,
																},
																Source: "2018-05-22T19:55:00Z",
																Start: ast.Position{
																	Column: 51,
																	Line:   3,
																},
															},
														},
														Value: time.Time{},
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 72,
														Line:   3,
													},
													Source: "range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   3,
														},
														Source: "range",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Name: "range",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   4,
											},
											Source: "testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])",
											Start: ast.Position{
												Column: 12,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   4,
													},
													Source: "columns: [\"_start\", \"_stop\"]",
													Start: ast.Position{
														Column: 17,
														Line:   4,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   4,
														},
														Source: "columns: [\"_start\", \"_stop\"]",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   4,
															},
															Source: "columns",
															Start: ast.Position{
																Column: 17,
																Line:   4,
															},
														},
													},
													Name: "columns",
												},
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   4,
															},
															Source: "[\"_start\", \"_stop\"]",
															Start: ast.Position{
																Column: 26,
																Line:   4,
															},
														},
													},
													Elements: []ast.Expression{&ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   4,
																},
																Source: "\"_start\"",
																Start: ast.Position{
																	Column: 27,
																	Line:   4,
																},
															},
														},
														Value: "_start",
													}, &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   4,
																},
																Source: "\"_stop\"",
																Start: ast.Position{
																	Column: 37,
																	Line:   4,
																},
															},
														},
														Value: "_stop",
													}},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   4,
												},
												Source: "drop(columns: [\"_start\", \"_stop\"])",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   4,
													},
													Source: "drop",
													Start: ast.Position{
														Column: 12,
														Line:   4,
													},
												},
											},
											Name: "drop",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   5,
										},
										Source: "testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")",
										Start: ast.Position{
											Column: 12,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   5,
												},
												Source: "fn: (r) => r.user == \"user1\"",
												Start: ast.Position{
													Column: 19,
													Line:   5,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   5,
													},
													Source: "fn: (r) => r.user == \"user1\"",
													Start: ast.Position{
														Column: 19,
														Line:   5,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   5,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 19,
															Line:   5,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   5,
														},
														Source: "(r) => r.user == \"user1\"",
														Start: ast.Position{
															Column: 23,
															Line:   5,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   5,
															},
															Source: "r.user == \"user1\"",
															Start: ast.Position{
																Column: 30,
																Line:   5,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   5,
																},
																Source: "r.user",
																Start: ast.Position{
																	Column: 30,
																	Line:   5,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   5,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 30,
																		Line:   5,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   5,
																	},
																	Source: "user",
																	Start: ast.Position{
																		Column: 32,
																		Line:   5,
																	},
																},
															},
															Name: "user",
														},
													},
													Operator: 14,
													Right: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   5,
																},
																Source: "\"user1\"",
																Start: ast.Position{
																	Column: 40,
																	Line:   5,
																},
															},
														},
														Value: "user1",
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   5,
															},
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   5,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   5,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   5,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   5,
											},
											Source: "filter(fn: (r) => r.user == \"user1\")",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   5,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 12,
													Line:   5,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   6,
									},
									Source: "testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user1\")\n        |> group(columns: [\"user\"])",
									Start: ast.Position{
										Column: 12,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   6,
											},
											Source: "columns: [\"user\"]",
											Start: ast.Position{
												Column: 18,
												Line:   6,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   6,
												},
												Source: "columns: [\"user\"]",
												Start: ast.Position{
													Column: 18,
													Line:   6,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   6,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 18,
														Line:   6,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   6,
													},
													Source: "[\"user\"]",
													Start: ast.Position{
														Column: 27,
														Line:   6,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   6,
														},
														Source: "\"user\"",
														Start: ast.Position{
															Column: 28,
															Line:   6,
														},
													},
												},
												Value: "user",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   6,
										},
										Source: "group(columns: [\"user\"])",
										Start: ast.Position{
											Column: 12,
											Line:   6,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   6,
											},
											Source: "group",
											Start: ast.Position{
												Column: 12,
												Line:   6,
											},
										},
									},
									Name: "group",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   12,
								},
								Source: "right = testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   8,
									},
									Source: "right",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "right",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   8,
														},
														Source: "file: \"join.in.csv\"",
														Start: ast.Position{
															Column: 26,
															Line:   8,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   8,
															},
															Source: "file: \"join.in.csv\"",
															Start: ast.Position{
																Column: 26,
																Line:   8,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   8,
																},
																Source: "file",
																Start: ast.Position{
																	Column: 26,
																	Line:   8,
																},
															},
														},
														Name: "file",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 45,
																	Line:   8,
																},
																Source: "\"join.in.csv\"",
																Start: ast.Position{
																	Column: 32,
																	Line:   8,
																},
															},
														},
														Value: "join.in.csv",
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   8,
													},
													Source: "testLoadData(file: \"join.in.csv\")",
													Start: ast.Position{
														Column: 13,
														Line:   8,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   8,
														},
														Source: "testLoadData",
														Start: ast.Position{
															Column: 13,
															Line:   8,
														},
													},
												},
												Name: "testLoadData",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   9,
												},
												Source: "testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
												Start: ast.Position{
													Column: 13,
													Line:   8,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 71,
															Line:   9,
														},
														Source: "start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z",
														Start: ast.Position{
															Column: 18,
															Line:   9,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   9,
															},
															Source: "start:2018-05-22T19:53:00Z",
															Start: ast.Position{
																Column: 18,
																Line:   9,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 23,
																	Line:   9,
																},
																Source: "start",
																Start: ast.Position{
																	Column: 18,
																	Line:   9,
																},
															},
														},
														Name: "start",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   9,
																},
																Source: "2018-05-22T19:53:00Z",
																Start: ast.Position{
																	Column: 24,
																	Line:   9,
																},
															},
														},
														Value: time.Time{},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 71,
																Line:   9,
															},
															Source: "stop:2018-05-22T19:55:00Z",
															Start: ast.Position{
																Column: 46,
																Line:   9,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   9,
																},
																Source: "stop",
																Start: ast.Position{
																	Column: 46,
																	Line:   9,
																},
															},
														},
														Name: "stop",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 71,
																	Line:   9,
																},
																Source: "2018-05-22T19:55:00Z",
																Start: ast.Position{
																	Column: 51,
																	Line:   9,
																},
															},
														},
														Value: time.Time{},
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 72,
														Line:   9,
													},
													Source: "range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
													Start: ast.Position{
														Column: 12,
														Line:   9,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   9,
														},
														Source: "range",
														Start: ast.Position{
															Column: 12,
															Line:   9,
														},
													},
												},
												Name: "range",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   10,
											},
											Source: "testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])",
											Start: ast.Position{
												Column: 13,
												Line:   8,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   10,
													},
													Source: "columns: [\"_start\", \"_stop\"]",
													Start: ast.Position{
														Column: 17,
														Line:   10,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   10,
														},
														Source: "columns: [\"_start\", \"_stop\"]",
														Start: ast.Position{
															Column: 17,
															Line:   10,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   10,
															},
															Source: "columns",
															Start: ast.Position{
																Column: 17,
																Line:   10,
															},
														},
													},
													Name: "columns",
												},
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   10,
															},
															Source: "[\"_start\", \"_stop\"]",
															Start: ast.Position{
																Column: 26,
																Line:   10,
															},
														},
													},
													Elements: []ast.Expression{&ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   10,
																},
																Source: "\"_start\"",
																Start: ast.Position{
																	Column: 27,
																	Line:   10,
																},
															},
														},
														Value: "_start",
													}, &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   10,
																},
																Source: "\"_stop\"",
																Start: ast.Position{
																	Column: 37,
																	Line:   10,
																},
															},
														},
														Value: "_stop",
													}},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   10,
												},
												Source: "drop(columns: [\"_start\", \"_stop\"])",
												Start: ast.Position{
													Column: 12,
													Line:   10,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   10,
													},
													Source: "drop",
													Start: ast.Position{
														Column: 12,
														Line:   10,
													},
												},
											},
											Name: "drop",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   11,
										},
										Source: "testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")",
										Start: ast.Position{
											Column: 13,
											Line:   8,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   11,
												},
												Source: "fn: (r) => r.user == \"user2\"",
												Start: ast.Position{
													Column: 19,
													Line:   11,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   11,
													},
													Source: "fn: (r) => r.user == \"user2\"",
													Start: ast.Position{
														Column: 19,
														Line:   11,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   11,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 19,
															Line:   11,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   11,
														},
														Source: "(r) => r.user == \"user2\"",
														Start: ast.Position{
															Column: 23,
															Line:   11,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   11,
															},
															Source: "r.user == \"user2\"",
															Start: ast.Position{
																Column: 30,
																Line:   11,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   11,
																},
																Source: "r.user",
																Start: ast.Position{
																	Column: 30,
																	Line:   11,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   11,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 30,
																		Line:   11,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   11,
																	},
																	Source: "user",
																	Start: ast.Position{
																		Column: 32,
																		Line:   11,
																	},
																},
															},
															Name: "user",
														},
													},
													Operator: 14,
													Right: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   11,
																},
																Source: "\"user2\"",
																Start: ast.Position{
																	Column: 40,
																	Line:   11,
																},
															},
														},
														Value: "user2",
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   11,
															},
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   11,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   11,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   11,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   11,
											},
											Source: "filter(fn: (r) => r.user == \"user2\")",
											Start: ast.Position{
												Column: 12,
												Line:   11,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   11,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 12,
													Line:   11,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   12,
									},
									Source: "testLoadData(file: \"join.in.csv\")\n        |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> filter(fn: (r) => r.user == \"user2\")\n        |> group(columns: [\"_measurement\"])",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   12,
											},
											Source: "columns: [\"_measurement\"]",
											Start: ast.Position{
												Column: 18,
												Line:   12,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   12,
												},
												Source: "columns: [\"_measurement\"]",
												Start: ast.Position{
													Column: 18,
													Line:   12,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   12,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 18,
														Line:   12,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   12,
													},
													Source: "[\"_measurement\"]",
													Start: ast.Position{
														Column: 27,
														Line:   12,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   12,
														},
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 28,
															Line:   12,
														},
													},
												},
												Value: "_measurement",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   12,
										},
										Source: "group(columns: [\"_measurement\"])",
										Start: ast.Position{
											Column: 12,
											Line:   12,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   12,
											},
											Source: "group",
											Start: ast.Position{
												Column: 12,
												Line:   12,
											},
										},
									},
									Name: "group",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   14,
								},
								Source: "got = join(tables: {left:left, right:right}, on: [\"_time\", \"_measurement\"])",
								Start: ast.Position{
									Column: 5,
									Line:   14,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   14,
									},
									Source: "got",
									Start: ast.Position{
										Column: 5,
										Line:   14,
									},
								},
							},
							Name: "got",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 79,
											Line:   14,
										},
										Source: "tables: {left:left, right:right}, on: [\"_time\", \"_measurement\"]",
										Start: ast.Position{
											Column: 16,
											Line:   14,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   14,
											},
											Source: "tables: {left:left, right:right}",
											Start: ast.Position{
												Column: 16,
												Line:   14,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   14,
												},
												Source: "tables",
												Start: ast.Position{
													Column: 16,
													Line:   14,
												},
											},
										},
										Name: "tables",
									},
									Value: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   14,
												},
												Source: "{left:left, right:right}",
												Start: ast.Position{
													Column: 24,
													Line:   14,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   14,
													},
													Source: "left:left",
													Start: ast.Position{
														Column: 25,
														Line:   14,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   14,
														},
														Source: "left",
														Start: ast.Position{
															Column: 25,
															Line:   14,
														},
													},
												},
												Name: "left",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   14,
														},
														Source: "left",
														Start: ast.Position{
															Column: 30,
															Line:   14,
														},
													},
												},
												Name: "left",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   14,
													},
													Source: "right:right",
													Start: ast.Position{
														Column: 36,
														Line:   14,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   14,
														},
														Source: "right",
														Start: ast.Position{
															Column: 36,
															Line:   14,
														},
													},
												},
												Name: "right",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   14,
														},
														Source: "right",
														Start: ast.Position{
															Column: 42,
															Line:   14,
														},
													},
												},
												Name: "right",
											},
										}},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 79,
												Line:   14,
											},
											Source: "on: [\"_time\", \"_measurement\"]",
											Start: ast.Position{
												Column: 50,
												Line:   14,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   14,
												},
												Source: "on",
												Start: ast.Position{
													Column: 50,
													Line:   14,
												},
											},
										},
										Name: "on",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 79,
													Line:   14,
												},
												Source: "[\"_time\", \"_measurement\"]",
												Start: ast.Position{
													Column: 54,
													Line:   14,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   14,
													},
													Source: "\"_time\"",
													Start: ast.Position{
														Column: 55,
														Line:   14,
													},
												},
											},
											Value: "_time",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 78,
														Line:   14,
													},
													Source: "\"_measurement\"",
													Start: ast.Position{
														Column: 64,
														Line:   14,
													},
												},
											},
											Value: "_measurement",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   14,
									},
									Source: "join(tables: {left:left, right:right}, on: [\"_time\", \"_measurement\"])",
									Start: ast.Position{
										Column: 11,
										Line:   14,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   14,
										},
										Source: "join",
										Start: ast.Position{
											Column: 11,
											Line:   14,
										},
									},
								},
								Name: "join",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   15,
								},
								Source: "want = testLoadData(file: \"join.out.csv\")",
								Start: ast.Position{
									Column: 5,
									Line:   15,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   15,
									},
									Source: "want",
									Start: ast.Position{
										Column: 5,
										Line:   15,
									},
								},
							},
							Name: "want",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   15,
										},
										Source: "file: \"join.out.csv\"",
										Start: ast.Position{
											Column: 25,
											Line:   15,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   15,
											},
											Source: "file: \"join.out.csv\"",
											Start: ast.Position{
												Column: 25,
												Line:   15,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   15,
												},
												Source: "file",
												Start: ast.Position{
													Column: 25,
													Line:   15,
												},
											},
										},
										Name: "file",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   15,
												},
												Source: "\"join.out.csv\"",
												Start: ast.Position{
													Column: 31,
													Line:   15,
												},
											},
										},
										Value: "join.out.csv",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   15,
									},
									Source: "testLoadData(file: \"join.out.csv\")",
									Start: ast.Position{
										Column: 12,
										Line:   15,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   15,
										},
										Source: "testLoadData",
										Start: ast.Position{
											Column: 12,
											Line:   15,
										},
									},
								},
								Name: "testLoadData",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   16,
										},
										Source: "name: \"join\", want: want, got: got",
										Start: ast.Position{
											Column: 25,
											Line:   16,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   16,
											},
											Source: "name: \"join\"",
											Start: ast.Position{
												Column: 25,
												Line:   16,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   16,
												},
												Source: "name",
												Start: ast.Position{
													Column: 25,
													Line:   16,
												},
											},
										},
										Name: "name",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   16,
												},
												Source: "\"join\"",
												Start: ast.Position{
													Column: 31,
													Line:   16,
												},
											},
										},
										Value: "join",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   16,
											},
											Source: "want: want",
											Start: ast.Position{
												Column: 39,
												Line:   16,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   16,
												},
												Source: "want",
												Start: ast.Position{
													Column: 39,
													Line:   16,
												},
											},
										},
										Name: "want",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   16,
												},
												Source: "want",
												Start: ast.Position{
													Column: 45,
													Line:   16,
												},
											},
										},
										Name: "want",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   16,
											},
											Source: "got: got",
											Start: ast.Position{
												Column: 51,
												Line:   16,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   16,
												},
												Source: "got",
												Start: ast.Position{
													Column: 51,
													Line:   16,
												},
											},
										},
										Name: "got",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   16,
												},
												Source: "got",
												Start: ast.Position{
													Column: 56,
													Line:   16,
												},
											},
										},
										Name: "got",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   16,
									},
									Source: "assertEquals(name: \"join\", want: want, got: got)",
									Start: ast.Position{
										Column: 12,
										Line:   16,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   16,
										},
										Source: "assertEquals",
										Start: ast.Position{
											Column: 12,
											Line:   16,
										},
									},
								},
								Name: "assertEquals",
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   16,
								},
								Source: "return assertEquals(name: \"join\", want: want, got: got)",
								Start: ast.Position{
									Column: 5,
									Line:   16,
								},
							},
						},
					}},
				},
				Params: nil,
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 9,
						Line:   19,
					},
					Source: "t_join()",
					Start: ast.Position{
						Column: 1,
						Line:   19,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: nil,
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   19,
						},
						Source: "t_join()",
						Start: ast.Position{
							Column: 1,
							Line:   19,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 7,
								Line:   19,
							},
							Source: "t_join",
							Start: ast.Position{
								Column: 1,
								Line:   19,
							},
						},
					},
					Name: "t_join",
				},
			},
		}},
		Imports: nil,
		Name:    "join.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 49,
					Line:   14,
				},
				Source: "memUsed = testLoadData(file: \"join_across_measurements.in.csv\")\n  |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n  |> filter(fn: (r) => r._measurement == \"mem\" and r._field == \"used\" )\n\nprocTotal = testLoadData(file: \"join_across_measurements.in.csv\")\n  |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n  |> filter(fn: (r) =>\n    r._measurement == \"processes\" and\n    r._field == \"total\"\n    )\n\ngot = join(tables: {mem:memUsed, proc:procTotal}, on: [\"_time\", \"_stop\", \"_start\", \"host\"])\nwant = testLoadData(file: \"join_across_measurements.out.csv\")\nassertEquals(name: \"join\", want: want, got: got)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 72,
						Line:   3,
					},
					Source: "memUsed = testLoadData(file: \"join_across_measurements.in.csv\")\n  |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n  |> filter(fn: (r) => r._measurement == \"mem\" and r._field == \"used\" )",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   1,
						},
						Source: "memUsed",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "memUsed",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   1,
									},
									Source: "file: \"join_across_measurements.in.csv\"",
									Start: ast.Position{
										Column: 24,
										Line:   1,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   1,
										},
										Source: "file: \"join_across_measurements.in.csv\"",
										Start: ast.Position{
											Column: 24,
											Line:   1,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   1,
											},
											Source: "file",
											Start: ast.Position{
												Column: 24,
												Line:   1,
											},
										},
									},
									Name: "file",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   1,
											},
											Source: "\"join_across_measurements.in.csv\"",
											Start: ast.Position{
												Column: 30,
												Line:   1,
											},
										},
									},
									Value: "join_across_measurements.in.csv",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   1,
								},
								Source: "testLoadData(file: \"join_across_measurements.in.csv\")",
								Start: ast.Position{
									Column: 11,
									Line:   1,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   1,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   1,
									},
								},
							},
							Name: "testLoadData",
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 66,
								Line:   2,
							},
							Source: "testLoadData(file: \"join_across_measurements.in.csv\")\n  |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
							Start: ast.Position{
								Column: 11,
								Line:   1,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   2,
									},
									Source: "start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z",
									Start: ast.Position{
										Column: 12,
										Line:   2,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   2,
										},
										Source: "start:2018-05-22T19:53:00Z",
										Start: ast.Position{
											Column: 12,
											Line:   2,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   2,
											},
											Source: "start",
											Start: ast.Position{
												Column: 12,
												Line:   2,
											},
										},
									},
									Name: "start",
								},
								Value: &ast.DateTimeLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   2,
											},
											Source: "2018-05-22T19:53:00Z",
											Start: ast.Position{
												Column: 18,
												Line:   2,
											},
										},
									},
									Value: time.Time{},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   2,
										},
										Source: "stop:2018-05-22T19:55:00Z",
										Start: ast.Position{
											Column: 40,
											Line:   2,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   2,
											},
											Source: "stop",
											Start: ast.Position{
												Column: 40,
												Line:   2,
											},
										},
									},
									Name: "stop",
								},
								Value: &ast.DateTimeLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   2,
											},
											Source: "2018-05-22T19:55:00Z",
											Start: ast.Position{
												Column: 45,
												Line:   2,
											},
										},
									},
									Value: time.Time{},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   2,
								},
								Source: "range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
								Start: ast.Position{
									Column: 6,
									Line:   2,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   2,
									},
									Source: "range",
									Start: ast.Position{
										Column: 6,
										Line:   2,
									},
								},
							},
							Name: "range",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 72,
							Line:   3,
						},
						Source: "testLoadData(file: \"join_across_measurements.in.csv\")\n  |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n  |> filter(fn: (r) => r._measurement == \"mem\" and r._field == \"used\" )",
						Start: ast.Position{
							Column: 11,
							Line:   1,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   3,
								},
								Source: "fn: (r) => r._measurement == \"mem\" and r._field == \"used\"",
								Start: ast.Position{
									Column: 13,
									Line:   3,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   3,
									},
									Source: "fn: (r) => r._measurement == \"mem\" and r._field == \"used\"",
									Start: ast.Position{
										Column: 13,
										Line:   3,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   3,
										},
										Source: "fn",
										Start: ast.Position{
											Column: 13,
											Line:   3,
										},
									},
								},
								Name: "fn",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   3,
										},
										Source: "(r) => r._measurement == \"mem\" and r._field == \"used\"",
										Start: ast.Position{
											Column: 17,
											Line:   3,
										},
									},
								},
								Body: &ast.LogicalExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   3,
											},
											Source: "r._measurement == \"mem\" and r._field == \"used\"",
											Start: ast.Position{
												Column: 24,
												Line:   3,
											},
										},
									},
									Left: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   3,
												},
												Source: "r._measurement == \"mem\"",
												Start: ast.Position{
													Column: 24,
													Line:   3,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   3,
													},
													Source: "r._measurement",
													Start: ast.Position{
														Column: 24,
														Line:   3,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   3,
														},
														Source: "r",
														Start: ast.Position{
															Column: 24,
															Line:   3,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   3,
														},
														Source: "_measurement",
														Start: ast.Position{
															Column: 26,
															Line:   3,
														},
													},
												},
												Name: "_measurement",
											},
										},
										Operator: 14,
										Right: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   3,
													},
													Source: "\"mem\"",
													Start: ast.Position{
														Column: 42,
														Line:   3,
													},
												},
											},
											Value: "mem",
										},
									},
									Operator: 1,
									Right: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   3,
												},
												Source: "r._field == \"used\"",
												Start: ast.Position{
													Column: 52,
													Line:   3,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   3,
													},
													Source: "r._field",
													Start: ast.Position{
														Column: 52,
														Line:   3,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   3,
														},
														Source: "r",
														Start: ast.Position{
															Column: 52,
															Line:   3,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 60,
															Line:   3,
														},
														Source: "_field",
														Start: ast.Position{
															Column: 54,
															Line:   3,
														},
													},
												},
												Name: "_field",
											},
										},
										Operator: 14,
										Right: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 70,
														Line:   3,
													},
													Source: "\"used\"",
													Start: ast.Position{
														Column: 64,
														Line:   3,
													},
												},
											},
											Value: "used",
										},
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   3,
											},
											Source: "r",
											Start: ast.Position{
												Column: 18,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "r",
												Start: ast.Position{
													Column: 18,
													Line:   3,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   3,
							},
							Source: "filter(fn: (r) => r._measurement == \"mem\" and r._field == \"used\" )",
							Start: ast.Position{
								Column: 6,
								Line:   3,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   3,
								},
								Source: "filter",
								Start: ast.Position{
									Column: 6,
									Line:   3,
								},
							},
						},
						Name: "filter",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 6,
						Line:   10,
					},
					Source: "procTotal = testLoadData(file: \"join_across_measurements.in.csv\")\n  |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n  |> filter(fn: (r) =>\n    r._measurement == \"processes\" and\n    r._field == \"total\"\n    )",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   5,
						},
						Source: "procTotal",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Name: "procTotal",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   5,
									},
									Source: "file: \"join_across_measurements.in.csv\"",
									Start: ast.Position{
										Column: 26,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   5,
										},
										Source: "file: \"join_across_measurements.in.csv\"",
										Start: ast.Position{
											Column: 26,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   5,
											},
											Source: "file",
											Start: ast.Position{
												Column: 26,
												Line:   5,
											},
										},
									},
									Name: "file",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   5,
											},
											Source: "\"join_across_measurements.in.csv\"",
											Start: ast.Position{
												Column: 32,
												Line:   5,
											},
										},
									},
									Value: "join_across_measurements.in.csv",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   5,
								},
								Source: "testLoadData(file: \"join_across_measurements.in.csv\")",
								Start: ast.Position{
									Column: 13,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   5,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Name: "testLoadData",
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 66,
								Line:   6,
							},
							Source: "testLoadData(file: \"join_across_measurements.in.csv\")\n  |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
							Start: ast.Position{
								Column: 13,
								Line:   5,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   6,
									},
									Source: "start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z",
									Start: ast.Position{
										Column: 12,
										Line:   6,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   6,
										},
										Source: "start:2018-05-22T19:53:00Z",
										Start: ast.Position{
											Column: 12,
											Line:   6,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   6,
											},
											Source: "start",
											Start: ast.Position{
												Column: 12,
												Line:   6,
											},
										},
									},
									Name: "start",
								},
								Value: &ast.DateTimeLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   6,
											},
											Source: "2018-05-22T19:53:00Z",
											Start: ast.Position{
												Column: 18,
												Line:   6,
											},
										},
									},
									Value: time.Time{},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   6,
										},
										Source: "stop:2018-05-22T19:55:00Z",
										Start: ast.Position{
											Column: 40,
											Line:   6,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   6,
											},
											Source: "stop",
											Start: ast.Position{
												Column: 40,
												Line:   6,
											},
										},
									},
									Name: "stop",
								},
								Value: &ast.DateTimeLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   6,
											},
											Source: "2018-05-22T19:55:00Z",
											Start: ast.Position{
												Column: 45,
												Line:   6,
											},
										},
									},
									Value: time.Time{},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   6,
								},
								Source: "range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)",
								Start: ast.Position{
									Column: 6,
									Line:   6,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   6,
									},
									Source: "range",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Name: "range",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   10,
						},
						Source: "testLoadData(file: \"join_across_measurements.in.csv\")\n  |> range(start:2018-05-22T19:53:00Z, stop:2018-05-22T19:55:00Z)\n  |> filter(fn: (r) =>\n    r._measurement == \"processes\" and\n    r._field == \"total\"\n    )",
						Start: ast.Position{
							Column: 13,
							Line:   5,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   9,
								},
								Source: "fn: (r) =>\n    r._measurement == \"processes\" and\n    r._field == \"total\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   9,
									},
									Source: "fn: (r) =>\n    r._measurement == \"processes\" and\n    r._field == \"total\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   7,
										},
										Source: "fn",
										Start: ast.Position{
											Column: 13,
											Line:   7,
										},
									},
								},
								Name: "fn",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   9,
										},
										Source: "(r) =>\n    r._measurement == \"processes\" and\n    r._field == \"total\"",
										Start: ast.Position{
											Column: 17,
											Line:   7,
										},
									},
								},
								Body: &ast.LogicalExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   9,
											},
											Source: "r._measurement == \"processes\" and\n    r._field == \"total\"",
											Start: ast.Position{
												Column: 5,
												Line:   8,
											},
										},
									},
									Left: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   8,
												},
												Source: "r._measurement == \"processes\"",
												Start: ast.Position{
													Column: 5,
													Line:   8,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   8,
													},
													Source: "r._measurement",
													Start: ast.Position{
														Column: 5,
														Line:   8,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 6,
															Line:   8,
														},
														Source: "r",
														Start: ast.Position{
															Column: 5,
															Line:   8,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   8,
														},
														Source: "_measurement",
														Start: ast.Position{
															Column: 7,
															Line:   8,
														},
													},
												},
												Name: "_measurement",
											},
										},
										Operator: 14,
										Right: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   8,
													},
													Source: "\"processes\"",
													Start: ast.Position{
														Column: 23,
														Line:   8,
													},
												},
											},
											Value: "processes",
										},
									},
									Operator: 1,
									Right: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   9,
												},
												Source: "r._field == \"total\"",
												Start: ast.Position{
													Column: 5,
													Line:   9,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   9,
													},
													Source: "r._field",
													Start: ast.Position{
														Column: 5,
														Line:   9,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 6,
															Line:   9,
														},
														Source: "r",
														Start: ast.Position{
															Column: 5,
															Line:   9,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 13,
															Line:   9,
														},
														Source: "_field",
														Start: ast.Position{
															Column: 7,
															Line:   9,
														},
													},
												},
												Name: "_field",
											},
										},
										Operator: 14,
										Right: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   9,
													},
													Source: "\"total\"",
													Start: ast.Position{
														Column: 17,
														Line:   9,
													},
												},
											},
											Value: "total",
										},
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   7,
											},
											Source: "r",
											Start: ast.Position{
												Column: 18,
												Line:   7,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   7,
												},
												Source: "r",
												Start: ast.Position{
													Column: 18,
													Line:   7,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 6,
								Line:   10,
							},
							Source: "filter(fn: (r) =>\n    r._measurement == \"processes\" and\n    r._field == \"total\"\n    )",
							Start: ast.Position{
								Column: 6,
								Line:   7,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   7,
								},
								Source: "filter",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Name: "filter",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 92,
						Line:   12,
					},
					Source: "got = join(tables: {mem:memUsed, proc:procTotal}, on: [\"_time\", \"_stop\", \"_start\", \"host\"])",
					Start: ast.Position{
						Column: 1,
						Line:   12,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   12,
						},
						Source: "got",
						Start: ast.Position{
							Column: 1,
							Line:   12,
						},
					},
				},
				Name: "got",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 91,
								Line:   12,
							},
							Source: "tables: {mem:memUsed, proc:procTotal}, on: [\"_time\", \"_stop\", \"_start\", \"host\"]",
							Start: ast.Position{
								Column: 12,
								Line:   12,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   12,
								},
								Source: "tables: {mem:memUsed, proc:procTotal}",
								Start: ast.Position{
									Column: 12,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   12,
									},
									Source: "tables",
									Start: ast.Position{
										Column: 12,
										Line:   12,
									},
								},
							},
							Name: "tables",
						},
						Value: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   12,
									},
									Source: "{mem:memUsed, proc:procTotal}",
									Start: ast.Position{
										Column: 20,
										Line:   12,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   12,
										},
										Source: "mem:memUsed",
										Start: ast.Position{
											Column: 21,
											Line:   12,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   12,
											},
											Source: "mem",
											Start: ast.Position{
												Column: 21,
												Line:   12,
											},
										},
									},
									Name: "mem",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   12,
											},
											Source: "memUsed",
											Start: ast.Position{
												Column: 25,
												Line:   12,
											},
										},
									},
									Name: "memUsed",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   12,
										},
										Source: "proc:procTotal",
										Start: ast.Position{
											Column: 34,
											Line:   12,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   12,
											},
											Source: "proc",
											Start: ast.Position{
												Column: 34,
												Line:   12,
											},
										},
									},
									Name: "proc",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   12,
											},
											Source: "procTotal",
											Start: ast.Position{
												Column: 39,
												Line:   12,
											},
										},
									},
									Name: "procTotal",
								},
							}},
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   12,
								},
								Source: "on: [\"_time\", \"_stop\", \"_start\", \"host\"]",
								Start: ast.Position{
									Column: 51,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   12,
									},
									Source: "on",
									Start: ast.Position{
										Column: 51,
										Line:   12,
									},
								},
							},
							Name: "on",
						},
						Value: &ast.ArrayExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 91,
										Line:   12,
									},
									Source: "[\"_time\", \"_stop\", \"_start\", \"host\"]",
									Start: ast.Position{
										Column: 55,
										Line:   12,
									},
								},
							},
							Elements: []ast.Expression{&ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   12,
										},
										Source: "\"_time\"",
										Start: ast.Position{
											Column: 56,
											Line:   12,
										},
									},
								},
								Value: "_time",
							}, &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   12,
										},
										Source: "\"_stop\"",
										Start: ast.Position{
											Column: 65,
											Line:   12,
										},
									},
								},
								Value: "_stop",
							}, &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 82,
											Line:   12,
										},
										Source: "\"_start\"",
										Start: ast.Position{
											Column: 74,
											Line:   12,
										},
									},
								},
								Value: "_start",
							}, &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 90,
											Line:   12,
										},
										Source: "\"host\"",
										Start: ast.Position{
											Column: 84,
											Line:   12,
										},
									},
								},
								Value: "host",
							}},
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 92,
							Line:   12,
						},
						Source: "join(tables: {mem:memUsed, proc:procTotal}, on: [\"_time\", \"_stop\", \"_start\", \"host\"])",
						Start: ast.Position{
							Column: 7,
							Line:   12,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   12,
							},
							Source: "join",
							Start: ast.Position{
								Column: 7,
								Line:   12,
							},
						},
					},
					Name: "join",
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 62,
						Line:   13,
					},
					Source: "want = testLoadData(file: \"join_across_measurements.out.csv\")",
					Start: ast.Position{
						Column: 1,
						Line:   13,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   13,
						},
						Source: "want",
						Start: ast.Position{
							Column: 1,
							Line:   13,
						},
					},
				},
				Name: "want",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 61,
								Line:   13,
							},
							Source: "file: \"join_across_measurements.out.csv\"",
							Start: ast.Position{
								Column: 21,
								Line:   13,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   13,
								},
								Source: "file: \"join_across_measurements.out.csv\"",
								Start: ast.Position{
									Column: 21,
									Line:   13,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   13,
									},
									Source: "file",
									Start: ast.Position{
										Column: 21,
										Line:   13,
									},
								},
							},
							Name: "file",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   13,
									},
									Source: "\"join_across_measurements.out.csv\"",
									Start: ast.Position{
										Column: 27,
										Line:   13,
									},
								},
							},
							Value: "join_across_measurements.out.csv",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 62,
							Line:   13,
						},
						Source: "testLoadData(file: \"join_across_measurements.out.csv\")",
						Start: ast.Position{
							Column: 8,
							Line:   13,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   13,
							},
							Source: "testLoadData",
							Start: ast.Position{
								Column: 8,
								Line:   13,
							},
						},
					},
					Name: "testLoadData",
				},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 49,
						Line:   14,
					},
					Source: "assertEquals(name: \"join\", want: want, got: got)",
					Start: ast.Position{
						Column: 1,
						Line:   14,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 48,
								Line:   14,
							},
							Source: "name: \"join\", want: want, got: got",
							Start: ast.Position{
								Column: 14,
								Line:   14,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   14,
								},
								Source: "name: \"join\"",
								Start: ast.Position{
									Column: 14,
									Line:   14,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   14,
									},
									Source: "name",
									Start: ast.Position{
										Column: 14,
										Line:   14,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   14,
									},
									Source: "\"join\"",
									Start: ast.Position{
										Column: 20,
										Line:   14,
									},
								},
							},
							Value: "join",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   14,
								},
								Source: "want: want",
								Start: ast.Position{
									Column: 28,
									Line:   14,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   14,
									},
									Source: "want",
									Start: ast.Position{
										Column: 28,
										Line:   14,
									},
								},
							},
							Name: "want",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   14,
									},
									Source: "want",
									Start: ast.Position{
										Column: 34,
										Line:   14,
									},
								},
							},
							Name: "want",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   14,
								},
								Source: "got: got",
								Start: ast.Position{
									Column: 40,
									Line:   14,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   14,
									},
									Source: "got",
									Start: ast.Position{
										Column: 40,
										Line:   14,
									},
								},
							},
							Name: "got",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   14,
									},
									Source: "got",
									Start: ast.Position{
										Column: 45,
										Line:   14,
									},
								},
							},
							Name: "got",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   14,
						},
						Source: "assertEquals(name: \"join\", want: want, got: got)",
						Start: ast.Position{
							Column: 1,
							Line:   14,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   14,
							},
							Source: "assertEquals",
							Start: ast.Position{
								Column: 1,
								Line:   14,
							},
						},
					},
					Name: "assertEquals",
				},
			},
		}},
		Imports: nil,
		Name:    "join_across_measurements.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 108,
					Line:   6,
				},
				Source: "t_keep = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n\ntestingTest(name: \"keep\", load: testLoadData, infile: \"keep.in.csv\", outfile: \"keep.out.csv\", test: t_keep)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 49,
						Line:   4,
					},
					Source: "t_keep = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> keep(columns: [\"_time\", \"_value\", \"_field\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   1,
						},
						Source: "t_keep",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_keep",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> keep(columns: [\"_time\", \"_value\", \"_field\"])",
						Start: ast.Position{
							Column: 10,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   3,
								},
								Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   3,
										},
										Source: "start: 2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 11,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 18,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   3,
									},
									Source: "range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 5,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   4,
							},
							Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> keep(columns: [\"_time\", \"_value\", \"_field\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   4,
									},
									Source: "columns: [\"_time\", \"_value\", \"_field\"]",
									Start: ast.Position{
										Column: 10,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   4,
										},
										Source: "columns: [\"_time\", \"_value\", \"_field\"]",
										Start: ast.Position{
											Column: 10,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   4,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   4,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   4,
											},
											Source: "[\"_time\", \"_value\", \"_field\"]",
											Start: ast.Position{
												Column: 19,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   4,
												},
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   4,
												},
											},
										},
										Value: "_time",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   4,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 29,
													Line:   4,
												},
											},
										},
										Value: "_value",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   4,
												},
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 39,
													Line:   4,
												},
											},
										},
										Value: "_field",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   4,
								},
								Source: "keep(columns: [\"_time\", \"_value\", \"_field\"])",
								Start: ast.Position{
									Column: 5,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   4,
									},
									Source: "keep",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Name: "keep",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 11,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 11,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 108,
						Line:   6,
					},
					Source: "testingTest(name: \"keep\", load: testLoadData, infile: \"keep.in.csv\", outfile: \"keep.out.csv\", test: t_keep)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 107,
								Line:   6,
							},
							Source: "name: \"keep\", load: testLoadData, infile: \"keep.in.csv\", outfile: \"keep.out.csv\", test: t_keep",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   6,
								},
								Source: "name: \"keep\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   6,
									},
									Source: "\"keep\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "keep",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 27,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 27,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 33,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   6,
								},
								Source: "infile: \"keep.in.csv\"",
								Start: ast.Position{
									Column: 47,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 47,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   6,
									},
									Source: "\"keep.in.csv\"",
									Start: ast.Position{
										Column: 55,
										Line:   6,
									},
								},
							},
							Value: "keep.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   6,
								},
								Source: "outfile: \"keep.out.csv\"",
								Start: ast.Position{
									Column: 70,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 70,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   6,
									},
									Source: "\"keep.out.csv\"",
									Start: ast.Position{
										Column: 79,
										Line:   6,
									},
								},
							},
							Value: "keep.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   6,
								},
								Source: "test: t_keep",
								Start: ast.Position{
									Column: 95,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 95,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 107,
										Line:   6,
									},
									Source: "t_keep",
									Start: ast.Position{
										Column: 101,
										Line:   6,
									},
								},
							},
							Name: "t_keep",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 108,
							Line:   6,
						},
						Source: "testingTest(name: \"keep\", load: testLoadData, infile: \"keep.in.csv\", outfile: \"keep.out.csv\", test: t_keep)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "keep.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 120,
					Line:   7,
				},
				Source: "t_keep_fn = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> keep(fn: (column) => column == \"_field\" or column == \"_value\")\n    |> keep(fn: (column) =>  {return column == \"_value\"})\n\ntestingTest(name: \"keep_fn\", load: testLoadData, infile: \"keep_fn.in.csv\", outfile: \"keep_fn.out.csv\", test: t_keep_fn)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 58,
						Line:   5,
					},
					Source: "t_keep_fn = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> keep(fn: (column) => column == \"_field\" or column == \"_value\")\n    |> keep(fn: (column) =>  {return column == \"_value\"})",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   1,
						},
						Source: "t_keep_fn",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_keep_fn",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 58,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> keep(fn: (column) => column == \"_field\" or column == \"_value\")\n    |> keep(fn: (column) =>  {return column == \"_value\"})",
						Start: ast.Position{
							Column: 13,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   3,
									},
									Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   3,
												},
												Source: "start: 2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 18,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "range(start: 2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   4,
								},
								Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> keep(fn: (column) => column == \"_field\" or column == \"_value\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   4,
										},
										Source: "fn: (column) => column == \"_field\" or column == \"_value\"",
										Start: ast.Position{
											Column: 10,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   4,
											},
											Source: "fn: (column) => column == \"_field\" or column == \"_value\"",
											Start: ast.Position{
												Column: 10,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   4,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   4,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   4,
												},
												Source: "(column) => column == \"_field\" or column == \"_value\"",
												Start: ast.Position{
													Column: 14,
													Line:   4,
												},
											},
										},
										Body: &ast.LogicalExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   4,
													},
													Source: "column == \"_field\" or column == \"_value\"",
													Start: ast.Position{
														Column: 26,
														Line:   4,
													},
												},
											},
											Left: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   4,
														},
														Source: "column == \"_field\"",
														Start: ast.Position{
															Column: 26,
															Line:   4,
														},
													},
												},
												Left: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   4,
															},
															Source: "column",
															Start: ast.Position{
																Column: 26,
																Line:   4,
															},
														},
													},
													Name: "column",
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   4,
															},
															Source: "\"_field\"",
															Start: ast.Position{
																Column: 36,
																Line:   4,
															},
														},
													},
													Value: "_field",
												},
											},
											Operator: 2,
											Right: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 66,
															Line:   4,
														},
														Source: "column == \"_value\"",
														Start: ast.Position{
															Column: 48,
															Line:   4,
														},
													},
												},
												Left: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   4,
															},
															Source: "column",
															Start: ast.Position{
																Column: 48,
																Line:   4,
															},
														},
													},
													Name: "column",
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 66,
																Line:   4,
															},
															Source: "\"_value\"",
															Start: ast.Position{
																Column: 58,
																Line:   4,
															},
														},
													},
													Value: "_value",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   4,
													},
													Source: "column",
													Start: ast.Position{
														Column: 15,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   4,
														},
														Source: "column",
														Start: ast.Position{
															Column: 15,
															Line:   4,
														},
													},
												},
												Name: "column",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   4,
									},
									Source: "keep(fn: (column) => column == \"_field\" or column == \"_value\")",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   4,
										},
										Source: "keep",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "keep",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   5,
							},
							Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z)\n\t|> keep(fn: (column) => column == \"_field\" or column == \"_value\")\n    |> keep(fn: (column) =>  {return column == \"_value\"})",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   5,
									},
									Source: "fn: (column) =>  {return column == \"_value\"}",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   5,
										},
										Source: "fn: (column) =>  {return column == \"_value\"}",
										Start: ast.Position{
											Column: 13,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   5,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 13,
												Line:   5,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   5,
											},
											Source: "(column) =>  {return column == \"_value\"}",
											Start: ast.Position{
												Column: 17,
												Line:   5,
											},
										},
									},
									Body: &ast.Block{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   5,
												},
												Source: "{return column == \"_value\"}",
												Start: ast.Position{
													Column: 30,
													Line:   5,
												},
											},
										},
										Body: []ast.Statement{&ast.ReturnStatement{
											Argument: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   5,
														},
														Source: "column == \"_value\"",
														Start: ast.Position{
															Column: 38,
															Line:   5,
														},
													},
												},
												Left: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   5,
															},
															Source: "column",
															Start: ast.Position{
																Column: 38,
																Line:   5,
															},
														},
													},
													Name: "column",
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   5,
															},
															Source: "\"_value\"",
															Start: ast.Position{
																Column: 48,
																Line:   5,
															},
														},
													},
													Value: "_value",
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 56,
														Line:   5,
													},
													Source: "return column == \"_value\"",
													Start: ast.Position{
														Column: 31,
														Line:   5,
													},
												},
											},
										}},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   5,
												},
												Source: "column",
												Start: ast.Position{
													Column: 18,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   5,
													},
													Source: "column",
													Start: ast.Position{
														Column: 18,
														Line:   5,
													},
												},
											},
											Name: "column",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   5,
								},
								Source: "keep(fn: (column) =>  {return column == \"_value\"})",
								Start: ast.Position{
									Column: 8,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   5,
									},
									Source: "keep",
									Start: ast.Position{
										Column: 8,
										Line:   5,
									},
								},
							},
							Name: "keep",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 14,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 20,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 120,
						Line:   7,
					},
					Source: "testingTest(name: \"keep_fn\", load: testLoadData, infile: \"keep_fn.in.csv\", outfile: \"keep_fn.out.csv\", test: t_keep_fn)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 119,
								Line:   7,
							},
							Source: "name: \"keep_fn\", load: testLoadData, infile: \"keep_fn.in.csv\", outfile: \"keep_fn.out.csv\", test: t_keep_fn",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   7,
								},
								Source: "name: \"keep_fn\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   7,
									},
									Source: "\"keep_fn\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "keep_fn",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 30,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 30,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 36,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   7,
								},
								Source: "infile: \"keep_fn.in.csv\"",
								Start: ast.Position{
									Column: 50,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 50,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   7,
									},
									Source: "\"keep_fn.in.csv\"",
									Start: ast.Position{
										Column: 58,
										Line:   7,
									},
								},
							},
							Value: "keep_fn.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 102,
									Line:   7,
								},
								Source: "outfile: \"keep_fn.out.csv\"",
								Start: ast.Position{
									Column: 76,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 83,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 76,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   7,
									},
									Source: "\"keep_fn.out.csv\"",
									Start: ast.Position{
										Column: 85,
										Line:   7,
									},
								},
							},
							Value: "keep_fn.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 119,
									Line:   7,
								},
								Source: "test: t_keep_fn",
								Start: ast.Position{
									Column: 104,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 108,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 104,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 119,
										Line:   7,
									},
									Source: "t_keep_fn",
									Start: ast.Position{
										Column: 110,
										Line:   7,
									},
								},
							},
							Name: "t_keep_fn",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 120,
							Line:   7,
						},
						Source: "testingTest(name: \"keep_fn\", load: testLoadData, infile: \"keep_fn.in.csv\", outfile: \"keep_fn.out.csv\", test: t_keep_fn)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "keep_fn.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   10,
				},
				Source: "t_key_values = (table=<-) =>\n  table\n  |> keyValues(keyColumns: [\"_value\"])\ntestingTest(\n    name: \"key_values\",\n    load: testLoadData,\n    infile: \"key_values.in.csv\",\n    outfile: \"key_values.out.csv\",\n    test: t_key_values,\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 39,
						Line:   3,
					},
					Source: "t_key_values = (table=<-) =>\n  table\n  |> keyValues(keyColumns: [\"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						Source: "t_key_values",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_key_values",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 39,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n  |> keyValues(keyColumns: [\"_value\"])",
						Start: ast.Position{
							Column: 16,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   3,
							},
							Source: "table\n  |> keyValues(keyColumns: [\"_value\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   3,
									},
									Source: "keyColumns: [\"_value\"]",
									Start: ast.Position{
										Column: 16,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   3,
										},
										Source: "keyColumns: [\"_value\"]",
										Start: ast.Position{
											Column: 16,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   3,
											},
											Source: "keyColumns",
											Start: ast.Position{
												Column: 16,
												Line:   3,
											},
										},
									},
									Name: "keyColumns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   3,
											},
											Source: "[\"_value\"]",
											Start: ast.Position{
												Column: 28,
												Line:   3,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   3,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 29,
													Line:   3,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   3,
								},
								Source: "keyValues(keyColumns: [\"_value\"])",
								Start: ast.Position{
									Column: 6,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   3,
									},
									Source: "keyValues",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Name: "keyValues",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   10,
					},
					Source: "testingTest(\n    name: \"key_values\",\n    load: testLoadData,\n    infile: \"key_values.in.csv\",\n    outfile: \"key_values.out.csv\",\n    test: t_key_values,\n)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   9,
							},
							Source: "name: \"key_values\",\n    load: testLoadData,\n    infile: \"key_values.in.csv\",\n    outfile: \"key_values.out.csv\",\n    test: t_key_values",
							Start: ast.Position{
								Column: 5,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   5,
								},
								Source: "name: \"key_values\"",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   5,
									},
									Source: "\"key_values\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Value: "key_values",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   7,
								},
								Source: "infile: \"key_values.in.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   7,
									},
									Source: "\"key_values.in.csv\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Value: "key_values.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   8,
								},
								Source: "outfile: \"key_values.out.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   8,
									},
									Source: "\"key_values.out.csv\"",
									Start: ast.Position{
										Column: 14,
										Line:   8,
									},
								},
							},
							Value: "key_values.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   9,
								},
								Source: "test: t_key_values",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   9,
									},
									Source: "t_key_values",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Name: "t_key_values",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   10,
						},
						Source: "testingTest(\n    name: \"key_values\",\n    load: testLoadData,\n    infile: \"key_values.in.csv\",\n    outfile: \"key_values.out.csv\",\n    test: t_key_values,\n)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "key_values.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   10,
				},
				Source: "t_key_values_host_name = (table=<-) =>\n  table\n  |> keyValues(keyColumns: [\"host\", \"name\"])\ntestingTest(\n    name: \"key_values_host_name\",\n    load: testLoadData,\n    infile: \"key_values_host_name.in.csv\",\n    outfile: \"key_values_host_name.out.csv\",\n    test: t_key_values_host_name,\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 45,
						Line:   3,
					},
					Source: "t_key_values_host_name = (table=<-) =>\n  table\n  |> keyValues(keyColumns: [\"host\", \"name\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   1,
						},
						Source: "t_key_values_host_name",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_key_values_host_name",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 45,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n  |> keyValues(keyColumns: [\"host\", \"name\"])",
						Start: ast.Position{
							Column: 26,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 45,
								Line:   3,
							},
							Source: "table\n  |> keyValues(keyColumns: [\"host\", \"name\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   3,
									},
									Source: "keyColumns: [\"host\", \"name\"]",
									Start: ast.Position{
										Column: 16,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   3,
										},
										Source: "keyColumns: [\"host\", \"name\"]",
										Start: ast.Position{
											Column: 16,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   3,
											},
											Source: "keyColumns",
											Start: ast.Position{
												Column: 16,
												Line:   3,
											},
										},
									},
									Name: "keyColumns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   3,
											},
											Source: "[\"host\", \"name\"]",
											Start: ast.Position{
												Column: 28,
												Line:   3,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   3,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 29,
													Line:   3,
												},
											},
										},
										Value: "host",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   3,
												},
												Source: "\"name\"",
												Start: ast.Position{
													Column: 37,
													Line:   3,
												},
											},
										},
										Value: "name",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   3,
								},
								Source: "keyValues(keyColumns: [\"host\", \"name\"])",
								Start: ast.Position{
									Column: 6,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   3,
									},
									Source: "keyValues",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Name: "keyValues",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 27,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 33,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   10,
					},
					Source: "testingTest(\n    name: \"key_values_host_name\",\n    load: testLoadData,\n    infile: \"key_values_host_name.in.csv\",\n    outfile: \"key_values_host_name.out.csv\",\n    test: t_key_values_host_name,\n)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   9,
							},
							Source: "name: \"key_values_host_name\",\n    load: testLoadData,\n    infile: \"key_values_host_name.in.csv\",\n    outfile: \"key_values_host_name.out.csv\",\n    test: t_key_values_host_name",
							Start: ast.Position{
								Column: 5,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   5,
								},
								Source: "name: \"key_values_host_name\"",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   5,
									},
									Source: "\"key_values_host_name\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Value: "key_values_host_name",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   7,
								},
								Source: "infile: \"key_values_host_name.in.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   7,
									},
									Source: "\"key_values_host_name.in.csv\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Value: "key_values_host_name.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   8,
								},
								Source: "outfile: \"key_values_host_name.out.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   8,
									},
									Source: "\"key_values_host_name.out.csv\"",
									Start: ast.Position{
										Column: 14,
										Line:   8,
									},
								},
							},
							Value: "key_values_host_name.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   9,
								},
								Source: "test: t_key_values_host_name",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   9,
									},
									Source: "t_key_values_host_name",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Name: "t_key_values_host_name",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   10,
						},
						Source: "testingTest(\n    name: \"key_values_host_name\",\n    load: testLoadData,\n    infile: \"key_values_host_name.in.csv\",\n    outfile: \"key_values_host_name.out.csv\",\n    test: t_key_values_host_name,\n)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "key_values_host_name.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 108,
					Line:   9,
				},
				Source: "t_keys = (table=<-) =>\n  table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\")\n  |> keys(except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"])\n  |> group()\n  |> distinct(column:\"_value\")\n  |> yield(name:\"0\")\ntestingTest(name: \"keys\", load: testLoadData, infile: \"keys.in.csv\", outfile: \"keys.out.csv\", test: t_keys)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   8,
					},
					Source: "t_keys = (table=<-) =>\n  table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\")\n  |> keys(except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"])\n  |> group()\n  |> distinct(column:\"_value\")\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   1,
						},
						Source: "t_keys",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_keys",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   8,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\")\n  |> keys(except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"])\n  |> group()\n  |> distinct(column:\"_value\")\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 10,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 8,
														Line:   2,
													},
													Source: "table",
													Start: ast.Position{
														Column: 3,
														Line:   2,
													},
												},
											},
											Name: "table",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   3,
														},
														Source: "start: 2018-05-20T19:53:26Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   3,
															},
															Source: "start: 2018-05-20T19:53:26Z",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 17,
																	Line:   3,
																},
																Source: "start",
																Start: ast.Position{
																	Column: 12,
																	Line:   3,
																},
															},
														},
														Name: "start",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   3,
																},
																Source: "2018-05-20T19:53:26Z",
																Start: ast.Position{
																	Column: 19,
																	Line:   3,
																},
															},
														},
														Value: time.Time{},
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   3,
													},
													Source: "range(start: 2018-05-20T19:53:26Z)",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   3,
														},
														Source: "range",
														Start: ast.Position{
															Column: 6,
															Line:   3,
														},
													},
												},
												Name: "range",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   4,
											},
											Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\")",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 50,
														Line:   4,
													},
													Source: "fn: (r) => r._measurement == \"diskio\"",
													Start: ast.Position{
														Column: 13,
														Line:   4,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   4,
														},
														Source: "fn: (r) => r._measurement == \"diskio\"",
														Start: ast.Position{
															Column: 13,
															Line:   4,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   4,
															},
															Source: "fn",
															Start: ast.Position{
																Column: 13,
																Line:   4,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 50,
																Line:   4,
															},
															Source: "(r) => r._measurement == \"diskio\"",
															Start: ast.Position{
																Column: 17,
																Line:   4,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   4,
																},
																Source: "r._measurement == \"diskio\"",
																Start: ast.Position{
																	Column: 24,
																	Line:   4,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   4,
																	},
																	Source: "r._measurement",
																	Start: ast.Position{
																		Column: 24,
																		Line:   4,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   4,
																		},
																		Source: "r",
																		Start: ast.Position{
																			Column: 24,
																			Line:   4,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   4,
																		},
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 26,
																			Line:   4,
																		},
																	},
																},
																Name: "_measurement",
															},
														},
														Operator: 14,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   4,
																	},
																	Source: "\"diskio\"",
																	Start: ast.Position{
																		Column: 42,
																		Line:   4,
																	},
																},
															},
															Value: "diskio",
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 18,
																	Line:   4,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 19,
																		Line:   4,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 18,
																		Line:   4,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   4,
												},
												Source: "filter(fn: (r) => r._measurement == \"diskio\")",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 12,
														Line:   4,
													},
													Source: "filter",
													Start: ast.Position{
														Column: 6,
														Line:   4,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 83,
											Line:   5,
										},
										Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\")\n  |> keys(except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"])",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 82,
													Line:   5,
												},
												Source: "except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"]",
												Start: ast.Position{
													Column: 11,
													Line:   5,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 82,
														Line:   5,
													},
													Source: "except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"]",
													Start: ast.Position{
														Column: 11,
														Line:   5,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   5,
														},
														Source: "except",
														Start: ast.Position{
															Column: 11,
															Line:   5,
														},
													},
												},
												Name: "except",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 82,
															Line:   5,
														},
														Source: "[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"]",
														Start: ast.Position{
															Column: 18,
															Line:   5,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 26,
																Line:   5,
															},
															Source: "\"_time\"",
															Start: ast.Position{
																Column: 19,
																Line:   5,
															},
														},
													},
													Value: "_time",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   5,
															},
															Source: "\"_start\"",
															Start: ast.Position{
																Column: 28,
																Line:   5,
															},
														},
													},
													Value: "_start",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   5,
															},
															Source: "\"_stop\"",
															Start: ast.Position{
																Column: 38,
																Line:   5,
															},
														},
													},
													Value: "_stop",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   5,
															},
															Source: "\"_field\"",
															Start: ast.Position{
																Column: 47,
																Line:   5,
															},
														},
													},
													Value: "_field",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 71,
																Line:   5,
															},
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 57,
																Line:   5,
															},
														},
													},
													Value: "_measurement",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 81,
																Line:   5,
															},
															Source: "\"_value\"",
															Start: ast.Position{
																Column: 73,
																Line:   5,
															},
														},
													},
													Value: "_value",
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 83,
												Line:   5,
											},
											Source: "keys(except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"])",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   5,
												},
												Source: "keys",
												Start: ast.Position{
													Column: 6,
													Line:   5,
												},
											},
										},
										Name: "keys",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   6,
									},
									Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\")\n  |> keys(except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"])\n  |> group()",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   6,
										},
										Source: "group()",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   6,
											},
											Source: "group",
											Start: ast.Position{
												Column: 6,
												Line:   6,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   7,
								},
								Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\")\n  |> keys(except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"])\n  |> group()\n  |> distinct(column:\"_value\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   7,
										},
										Source: "column:\"_value\"",
										Start: ast.Position{
											Column: 15,
											Line:   7,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   7,
											},
											Source: "column:\"_value\"",
											Start: ast.Position{
												Column: 15,
												Line:   7,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   7,
												},
												Source: "column",
												Start: ast.Position{
													Column: 15,
													Line:   7,
												},
											},
										},
										Name: "column",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   7,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 22,
													Line:   7,
												},
											},
										},
										Value: "_value",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   7,
									},
									Source: "distinct(column:\"_value\")",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   7,
										},
										Source: "distinct",
										Start: ast.Position{
											Column: 6,
											Line:   7,
										},
									},
								},
								Name: "distinct",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   8,
							},
							Source: "table\n  |> range(start: 2018-05-20T19:53:26Z)\n  |> filter(fn: (r) => r._measurement == \"diskio\")\n  |> keys(except:[\"_time\", \"_start\", \"_stop\", \"_field\", \"_measurement\", \"_value\"])\n  |> group()\n  |> distinct(column:\"_value\")\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   8,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   8,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   8,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   8,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   8,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   8,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   8,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   8,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   8,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   8,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   8,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   8,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 11,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 11,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 108,
						Line:   9,
					},
					Source: "testingTest(name: \"keys\", load: testLoadData, infile: \"keys.in.csv\", outfile: \"keys.out.csv\", test: t_keys)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 107,
								Line:   9,
							},
							Source: "name: \"keys\", load: testLoadData, infile: \"keys.in.csv\", outfile: \"keys.out.csv\", test: t_keys",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   9,
								},
								Source: "name: \"keys\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   9,
									},
									Source: "\"keys\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "keys",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 27,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 27,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 33,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   9,
								},
								Source: "infile: \"keys.in.csv\"",
								Start: ast.Position{
									Column: 47,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 47,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   9,
									},
									Source: "\"keys.in.csv\"",
									Start: ast.Position{
										Column: 55,
										Line:   9,
									},
								},
							},
							Value: "keys.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   9,
								},
								Source: "outfile: \"keys.out.csv\"",
								Start: ast.Position{
									Column: 70,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 70,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   9,
									},
									Source: "\"keys.out.csv\"",
									Start: ast.Position{
										Column: 79,
										Line:   9,
									},
								},
							},
							Value: "keys.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   9,
								},
								Source: "test: t_keys",
								Start: ast.Position{
									Column: 95,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 95,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 107,
										Line:   9,
									},
									Source: "t_keys",
									Start: ast.Position{
										Column: 101,
										Line:   9,
									},
								},
							},
							Name: "t_keys",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 108,
							Line:   9,
						},
						Source: "testingTest(name: \"keys\", load: testLoadData, infile: \"keys.in.csv\", outfile: \"keys.out.csv\", test: t_keys)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "keys.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 108,
					Line:   4,
				},
				Source: "t_last = (table=<-) =>\n  table\n  |> last()\ntestingTest(name: \"last\", load: testLoadData, infile: \"last.in.csv\", outfile: \"last.out.csv\", test: t_last)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   3,
					},
					Source: "t_last = (table=<-) =>\n  table\n  |> last()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   1,
						},
						Source: "t_last",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_last",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n  |> last()",
						Start: ast.Position{
							Column: 10,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   3,
							},
							Source: "table\n  |> last()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   3,
								},
								Source: "last()",
								Start: ast.Position{
									Column: 6,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   3,
									},
									Source: "last",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Name: "last",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 11,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 11,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 108,
						Line:   4,
					},
					Source: "testingTest(name: \"last\", load: testLoadData, infile: \"last.in.csv\", outfile: \"last.out.csv\", test: t_last)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 107,
								Line:   4,
							},
							Source: "name: \"last\", load: testLoadData, infile: \"last.in.csv\", outfile: \"last.out.csv\", test: t_last",
							Start: ast.Position{
								Column: 13,
								Line:   4,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   4,
								},
								Source: "name: \"last\"",
								Start: ast.Position{
									Column: 13,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   4,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   4,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   4,
									},
									Source: "\"last\"",
									Start: ast.Position{
										Column: 19,
										Line:   4,
									},
								},
							},
							Value: "last",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   4,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 27,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   4,
									},
									Source: "load",
									Start: ast.Position{
										Column: 27,
										Line:   4,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   4,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 33,
										Line:   4,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   4,
								},
								Source: "infile: \"last.in.csv\"",
								Start: ast.Position{
									Column: 47,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   4,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 47,
										Line:   4,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   4,
									},
									Source: "\"last.in.csv\"",
									Start: ast.Position{
										Column: 55,
										Line:   4,
									},
								},
							},
							Value: "last.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   4,
								},
								Source: "outfile: \"last.out.csv\"",
								Start: ast.Position{
									Column: 70,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   4,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 70,
										Line:   4,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   4,
									},
									Source: "\"last.out.csv\"",
									Start: ast.Position{
										Column: 79,
										Line:   4,
									},
								},
							},
							Value: "last.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   4,
								},
								Source: "test: t_last",
								Start: ast.Position{
									Column: 95,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   4,
									},
									Source: "test",
									Start: ast.Position{
										Column: 95,
										Line:   4,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 107,
										Line:   4,
									},
									Source: "t_last",
									Start: ast.Position{
										Column: 101,
										Line:   4,
									},
								},
							},
							Name: "t_last",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 108,
							Line:   4,
						},
						Source: "testingTest(name: \"last\", load: testLoadData, infile: \"last.in.csv\", outfile: \"last.out.csv\", test: t_last)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "last.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 144,
					Line:   6,
				},
				Source: "t_lowestAverage = (table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])\n\ntestingTest(name: \"lowestAverage\", load: testLoadData, infile: \"lowestAverage.in.csv\", outfile: \"lowestAverage.out.csv\", test: t_lowestAverage)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 67,
						Line:   4,
					},
					Source: "t_lowestAverage = (table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						Source: "t_lowestAverage",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_lowestAverage",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 67,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])",
						Start: ast.Position{
							Column: 19,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   3,
								},
								Source: "table\n    |> range(start: 2018-11-07T00:00:00Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "start: 2018-11-07T00:00:00Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "start: 2018-11-07T00:00:00Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   3,
												},
												Source: "2018-11-07T00:00:00Z",
												Start: ast.Position{
													Column: 21,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   3,
									},
									Source: "range(start: 2018-11-07T00:00:00Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 67,
								Line:   4,
							},
							Source: "table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   4,
									},
									Source: "n: 3, groupColumns: [\"_measurement\", \"host\"]",
									Start: ast.Position{
										Column: 22,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   4,
										},
										Source: "n: 3",
										Start: ast.Position{
											Column: 22,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   4,
											},
											Source: "n",
											Start: ast.Position{
												Column: 22,
												Line:   4,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   4,
											},
											Source: "3",
											Start: ast.Position{
												Column: 25,
												Line:   4,
											},
										},
									},
									Value: int64(3),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   4,
										},
										Source: "groupColumns: [\"_measurement\", \"host\"]",
										Start: ast.Position{
											Column: 28,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   4,
											},
											Source: "groupColumns",
											Start: ast.Position{
												Column: 28,
												Line:   4,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   4,
											},
											Source: "[\"_measurement\", \"host\"]",
											Start: ast.Position{
												Column: 42,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   4,
												},
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 43,
													Line:   4,
												},
											},
										},
										Value: "_measurement",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   4,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 59,
													Line:   4,
												},
											},
										},
										Value: "host",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   4,
								},
								Source: "lowestAverage(n: 3, groupColumns: [\"_measurement\", \"host\"])",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   4,
									},
									Source: "lowestAverage",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "lowestAverage",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 20,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 26,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 144,
						Line:   6,
					},
					Source: "testingTest(name: \"lowestAverage\", load: testLoadData, infile: \"lowestAverage.in.csv\", outfile: \"lowestAverage.out.csv\", test: t_lowestAverage)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 143,
								Line:   6,
							},
							Source: "name: \"lowestAverage\", load: testLoadData, infile: \"lowestAverage.in.csv\", outfile: \"lowestAverage.out.csv\", test: t_lowestAverage",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   6,
								},
								Source: "name: \"lowestAverage\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   6,
									},
									Source: "\"lowestAverage\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "lowestAverage",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 36,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 36,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 42,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   6,
								},
								Source: "infile: \"lowestAverage.in.csv\"",
								Start: ast.Position{
									Column: 56,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 56,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   6,
									},
									Source: "\"lowestAverage.in.csv\"",
									Start: ast.Position{
										Column: 64,
										Line:   6,
									},
								},
							},
							Value: "lowestAverage.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 120,
									Line:   6,
								},
								Source: "outfile: \"lowestAverage.out.csv\"",
								Start: ast.Position{
									Column: 88,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 88,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   6,
									},
									Source: "\"lowestAverage.out.csv\"",
									Start: ast.Position{
										Column: 97,
										Line:   6,
									},
								},
							},
							Value: "lowestAverage.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 143,
									Line:   6,
								},
								Source: "test: t_lowestAverage",
								Start: ast.Position{
									Column: 122,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 122,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 143,
										Line:   6,
									},
									Source: "t_lowestAverage",
									Start: ast.Position{
										Column: 128,
										Line:   6,
									},
								},
							},
							Name: "t_lowestAverage",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 144,
							Line:   6,
						},
						Source: "testingTest(name: \"lowestAverage\", load: testLoadData, infile: \"lowestAverage.in.csv\", outfile: \"lowestAverage.out.csv\", test: t_lowestAverage)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "lowestAverage.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 144,
					Line:   6,
				},
				Source: "t_lowestCurrent = (table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])\n\ntestingTest(name: \"lowestCurrent\", load: testLoadData, infile: \"lowestCurrent.in.csv\", outfile: \"lowestCurrent.out.csv\", test: t_lowestCurrent)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 67,
						Line:   4,
					},
					Source: "t_lowestCurrent = (table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						Source: "t_lowestCurrent",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_lowestCurrent",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 67,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])",
						Start: ast.Position{
							Column: 19,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   3,
								},
								Source: "table\n    |> range(start: 2018-11-07T00:00:00Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "start: 2018-11-07T00:00:00Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "start: 2018-11-07T00:00:00Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   3,
												},
												Source: "2018-11-07T00:00:00Z",
												Start: ast.Position{
													Column: 21,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   3,
									},
									Source: "range(start: 2018-11-07T00:00:00Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 67,
								Line:   4,
							},
							Source: "table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   4,
									},
									Source: "n: 3, groupColumns: [\"_measurement\", \"host\"]",
									Start: ast.Position{
										Column: 22,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   4,
										},
										Source: "n: 3",
										Start: ast.Position{
											Column: 22,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   4,
											},
											Source: "n",
											Start: ast.Position{
												Column: 22,
												Line:   4,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   4,
											},
											Source: "3",
											Start: ast.Position{
												Column: 25,
												Line:   4,
											},
										},
									},
									Value: int64(3),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   4,
										},
										Source: "groupColumns: [\"_measurement\", \"host\"]",
										Start: ast.Position{
											Column: 28,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   4,
											},
											Source: "groupColumns",
											Start: ast.Position{
												Column: 28,
												Line:   4,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   4,
											},
											Source: "[\"_measurement\", \"host\"]",
											Start: ast.Position{
												Column: 42,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   4,
												},
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 43,
													Line:   4,
												},
											},
										},
										Value: "_measurement",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   4,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 59,
													Line:   4,
												},
											},
										},
										Value: "host",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   4,
								},
								Source: "lowestCurrent(n: 3, groupColumns: [\"_measurement\", \"host\"])",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   4,
									},
									Source: "lowestCurrent",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "lowestCurrent",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 20,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 26,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 144,
						Line:   6,
					},
					Source: "testingTest(name: \"lowestCurrent\", load: testLoadData, infile: \"lowestCurrent.in.csv\", outfile: \"lowestCurrent.out.csv\", test: t_lowestCurrent)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 143,
								Line:   6,
							},
							Source: "name: \"lowestCurrent\", load: testLoadData, infile: \"lowestCurrent.in.csv\", outfile: \"lowestCurrent.out.csv\", test: t_lowestCurrent",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   6,
								},
								Source: "name: \"lowestCurrent\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   6,
									},
									Source: "\"lowestCurrent\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "lowestCurrent",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 36,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 36,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 42,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   6,
								},
								Source: "infile: \"lowestCurrent.in.csv\"",
								Start: ast.Position{
									Column: 56,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 56,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   6,
									},
									Source: "\"lowestCurrent.in.csv\"",
									Start: ast.Position{
										Column: 64,
										Line:   6,
									},
								},
							},
							Value: "lowestCurrent.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 120,
									Line:   6,
								},
								Source: "outfile: \"lowestCurrent.out.csv\"",
								Start: ast.Position{
									Column: 88,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 88,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   6,
									},
									Source: "\"lowestCurrent.out.csv\"",
									Start: ast.Position{
										Column: 97,
										Line:   6,
									},
								},
							},
							Value: "lowestCurrent.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 143,
									Line:   6,
								},
								Source: "test: t_lowestCurrent",
								Start: ast.Position{
									Column: 122,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 122,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 143,
										Line:   6,
									},
									Source: "t_lowestCurrent",
									Start: ast.Position{
										Column: 128,
										Line:   6,
									},
								},
							},
							Name: "t_lowestCurrent",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 144,
							Line:   6,
						},
						Source: "testingTest(name: \"lowestCurrent\", load: testLoadData, infile: \"lowestCurrent.in.csv\", outfile: \"lowestCurrent.out.csv\", test: t_lowestCurrent)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "lowestCurrent.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 128,
					Line:   6,
				},
				Source: "t_lowestMin = (table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestMin(n: 3, groupColumns: [\"_measurement\", \"host\"])\n\ntestingTest(name: \"lowestMin\", load: testLoadData, infile: \"lowestMin.in.csv\", outfile: \"lowestMin.out.csv\", test: t_lowestMin)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 63,
						Line:   4,
					},
					Source: "t_lowestMin = (table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestMin(n: 3, groupColumns: [\"_measurement\", \"host\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1,
						},
						Source: "t_lowestMin",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_lowestMin",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 63,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestMin(n: 3, groupColumns: [\"_measurement\", \"host\"])",
						Start: ast.Position{
							Column: 15,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   3,
								},
								Source: "table\n    |> range(start: 2018-11-07T00:00:00Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "start: 2018-11-07T00:00:00Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "start: 2018-11-07T00:00:00Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   3,
												},
												Source: "2018-11-07T00:00:00Z",
												Start: ast.Position{
													Column: 21,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   3,
									},
									Source: "range(start: 2018-11-07T00:00:00Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 63,
								Line:   4,
							},
							Source: "table\n    |> range(start: 2018-11-07T00:00:00Z)\n    |> lowestMin(n: 3, groupColumns: [\"_measurement\", \"host\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   4,
									},
									Source: "n: 3, groupColumns: [\"_measurement\", \"host\"]",
									Start: ast.Position{
										Column: 18,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   4,
										},
										Source: "n: 3",
										Start: ast.Position{
											Column: 18,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   4,
											},
											Source: "n",
											Start: ast.Position{
												Column: 18,
												Line:   4,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "3",
											Start: ast.Position{
												Column: 21,
												Line:   4,
											},
										},
									},
									Value: int64(3),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   4,
										},
										Source: "groupColumns: [\"_measurement\", \"host\"]",
										Start: ast.Position{
											Column: 24,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   4,
											},
											Source: "groupColumns",
											Start: ast.Position{
												Column: 24,
												Line:   4,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   4,
											},
											Source: "[\"_measurement\", \"host\"]",
											Start: ast.Position{
												Column: 38,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   4,
												},
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 39,
													Line:   4,
												},
											},
										},
										Value: "_measurement",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   4,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 55,
													Line:   4,
												},
											},
										},
										Value: "host",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   4,
								},
								Source: "lowestMin(n: 3, groupColumns: [\"_measurement\", \"host\"])",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   4,
									},
									Source: "lowestMin",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "lowestMin",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 16,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 128,
						Line:   6,
					},
					Source: "testingTest(name: \"lowestMin\", load: testLoadData, infile: \"lowestMin.in.csv\", outfile: \"lowestMin.out.csv\", test: t_lowestMin)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 127,
								Line:   6,
							},
							Source: "name: \"lowestMin\", load: testLoadData, infile: \"lowestMin.in.csv\", outfile: \"lowestMin.out.csv\", test: t_lowestMin",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   6,
								},
								Source: "name: \"lowestMin\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   6,
									},
									Source: "\"lowestMin\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "lowestMin",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 32,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 32,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 38,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   6,
								},
								Source: "infile: \"lowestMin.in.csv\"",
								Start: ast.Position{
									Column: 52,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 52,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   6,
									},
									Source: "\"lowestMin.in.csv\"",
									Start: ast.Position{
										Column: 60,
										Line:   6,
									},
								},
							},
							Value: "lowestMin.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   6,
								},
								Source: "outfile: \"lowestMin.out.csv\"",
								Start: ast.Position{
									Column: 80,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 87,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 80,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 108,
										Line:   6,
									},
									Source: "\"lowestMin.out.csv\"",
									Start: ast.Position{
										Column: 89,
										Line:   6,
									},
								},
							},
							Value: "lowestMin.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 127,
									Line:   6,
								},
								Source: "test: t_lowestMin",
								Start: ast.Position{
									Column: 110,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 110,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 127,
										Line:   6,
									},
									Source: "t_lowestMin",
									Start: ast.Position{
										Column: 116,
										Line:   6,
									},
								},
							},
							Name: "t_lowestMin",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 128,
							Line:   6,
						},
						Source: "testingTest(name: \"lowestMin\", load: testLoadData, infile: \"lowestMin.in.csv\", outfile: \"lowestMin.out.csv\", test: t_lowestMin)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "lowestMin.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 104,
					Line:   4,
				},
				Source: "t_max = (table=<-) =>\n  table\n  |> max()\ntestingTest(name: \"max\", load: testLoadData, infile: \"max.in.csv\", outfile: \"max.out.csv\", test: t_max)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 11,
						Line:   3,
					},
					Source: "t_max = (table=<-) =>\n  table\n  |> max()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   1,
						},
						Source: "t_max",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_max",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n  |> max()",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   3,
							},
							Source: "table\n  |> max()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   3,
								},
								Source: "max()",
								Start: ast.Position{
									Column: 6,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   3,
									},
									Source: "max",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Name: "max",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 104,
						Line:   4,
					},
					Source: "testingTest(name: \"max\", load: testLoadData, infile: \"max.in.csv\", outfile: \"max.out.csv\", test: t_max)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   4,
							},
							Source: "name: \"max\", load: testLoadData, infile: \"max.in.csv\", outfile: \"max.out.csv\", test: t_max",
							Start: ast.Position{
								Column: 13,
								Line:   4,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   4,
								},
								Source: "name: \"max\"",
								Start: ast.Position{
									Column: 13,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   4,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   4,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   4,
									},
									Source: "\"max\"",
									Start: ast.Position{
										Column: 19,
										Line:   4,
									},
								},
							},
							Value: "max",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   4,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 26,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   4,
									},
									Source: "load",
									Start: ast.Position{
										Column: 26,
										Line:   4,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   4,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 32,
										Line:   4,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   4,
								},
								Source: "infile: \"max.in.csv\"",
								Start: ast.Position{
									Column: 46,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   4,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 46,
										Line:   4,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   4,
									},
									Source: "\"max.in.csv\"",
									Start: ast.Position{
										Column: 54,
										Line:   4,
									},
								},
							},
							Value: "max.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   4,
								},
								Source: "outfile: \"max.out.csv\"",
								Start: ast.Position{
									Column: 68,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   4,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 68,
										Line:   4,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   4,
									},
									Source: "\"max.out.csv\"",
									Start: ast.Position{
										Column: 77,
										Line:   4,
									},
								},
							},
							Value: "max.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   4,
								},
								Source: "test: t_max",
								Start: ast.Position{
									Column: 92,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   4,
									},
									Source: "test",
									Start: ast.Position{
										Column: 92,
										Line:   4,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   4,
									},
									Source: "t_max",
									Start: ast.Position{
										Column: 98,
										Line:   4,
									},
								},
							},
							Name: "t_max",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 104,
							Line:   4,
						},
						Source: "testingTest(name: \"max\", load: testLoadData, infile: \"max.in.csv\", outfile: \"max.out.csv\", test: t_max)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "max.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 108,
					Line:   7,
				},
				Source: "option now = () => 2018-12-18T22:12:00Z\n\nt_mean = (table=<-) => table\n  |> range(start: -5m)\n  |> mean()\n\ntestingTest(name: \"mean\", load: testLoadData, infile: \"mean.in.csv\", outfile: \"mean.out.csv\", test: t_mean)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-18T22:12:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-18T22:12:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-18T22:12:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-18T22:12:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   5,
					},
					Source: "t_mean = (table=<-) => table\n  |> range(start: -5m)\n  |> mean()",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   3,
						},
						Source: "t_mean",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_mean",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   5,
						},
						Source: "(table=<-) => table\n  |> range(start: -5m)\n  |> mean()",
						Start: ast.Position{
							Column: 10,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 24,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   4,
								},
								Source: "table\n  |> range(start: -5m)",
								Start: ast.Position{
									Column: 24,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   4,
										},
										Source: "start: -5m",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "start: -5m",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   4,
													},
													Source: "5m",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(5),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   4,
												},
												Source: "-5m",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   4,
									},
									Source: "range(start: -5m)",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   5,
							},
							Source: "table\n  |> range(start: -5m)\n  |> mean()",
							Start: ast.Position{
								Column: 24,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   5,
								},
								Source: "mean()",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   5,
									},
									Source: "mean",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "mean",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 11,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 11,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 17,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 108,
						Line:   7,
					},
					Source: "testingTest(name: \"mean\", load: testLoadData, infile: \"mean.in.csv\", outfile: \"mean.out.csv\", test: t_mean)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 107,
								Line:   7,
							},
							Source: "name: \"mean\", load: testLoadData, infile: \"mean.in.csv\", outfile: \"mean.out.csv\", test: t_mean",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   7,
								},
								Source: "name: \"mean\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   7,
									},
									Source: "\"mean\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "mean",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 27,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 27,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 33,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   7,
								},
								Source: "infile: \"mean.in.csv\"",
								Start: ast.Position{
									Column: 47,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 47,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   7,
									},
									Source: "\"mean.in.csv\"",
									Start: ast.Position{
										Column: 55,
										Line:   7,
									},
								},
							},
							Value: "mean.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   7,
								},
								Source: "outfile: \"mean.out.csv\"",
								Start: ast.Position{
									Column: 70,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 70,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   7,
									},
									Source: "\"mean.out.csv\"",
									Start: ast.Position{
										Column: 79,
										Line:   7,
									},
								},
							},
							Value: "mean.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   7,
								},
								Source: "test: t_mean",
								Start: ast.Position{
									Column: 95,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 95,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 107,
										Line:   7,
									},
									Source: "t_mean",
									Start: ast.Position{
										Column: 101,
										Line:   7,
									},
								},
							},
							Name: "t_mean",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 108,
							Line:   7,
						},
						Source: "testingTest(name: \"mean\", load: testLoadData, infile: \"mean.in.csv\", outfile: \"mean.out.csv\", test: t_mean)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "mean.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 160,
					Line:   8,
				},
				Source: "t_meta_query_fields = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"_field\"])\n    |> distinct(column: \"_field\")\n    |> group()\ntestingTest(name: \"meta_query_fields\", load: testLoadData, infile: \"meta_query_fields.in.csv\", outfile: \"meta_query_fields.out.csv\", test: t_meta_query_fields)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   7,
					},
					Source: "t_meta_query_fields = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"_field\"])\n    |> distinct(column: \"_field\")\n    |> group()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   1,
						},
						Source: "t_meta_query_fields",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_meta_query_fields",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"_field\"])\n    |> distinct(column: \"_field\")\n    |> group()",
						Start: ast.Position{
							Column: 23,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   3,
													},
													Source: "start:2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 14,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   3,
														},
														Source: "start:2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 14,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 14,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   3,
															},
															Source: "2018-05-22T19:53:26Z",
															Start: ast.Position{
																Column: 20,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   3,
												},
												Source: "range(start:2018-05-22T19:53:26Z)",
												Start: ast.Position{
													Column: 8,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 8,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   4,
										},
										Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   4,
												},
												Source: "fn: (r) => r._measurement == \"cpu\"",
												Start: ast.Position{
													Column: 15,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   4,
													},
													Source: "fn: (r) => r._measurement == \"cpu\"",
													Start: ast.Position{
														Column: 15,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   4,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 15,
															Line:   4,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   4,
														},
														Source: "(r) => r._measurement == \"cpu\"",
														Start: ast.Position{
															Column: 19,
															Line:   4,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   4,
															},
															Source: "r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 26,
																Line:   4,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   4,
																},
																Source: "r._measurement",
																Start: ast.Position{
																	Column: 26,
																	Line:   4,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 27,
																		Line:   4,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 26,
																		Line:   4,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   4,
																	},
																	Source: "_measurement",
																	Start: ast.Position{
																		Column: 28,
																		Line:   4,
																	},
																},
															},
															Name: "_measurement",
														},
													},
													Operator: 14,
													Right: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   4,
																},
																Source: "\"cpu\"",
																Start: ast.Position{
																	Column: 44,
																	Line:   4,
																},
															},
														},
														Value: "cpu",
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   4,
															},
															Source: "r",
															Start: ast.Position{
																Column: 20,
																Line:   4,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 20,
																	Line:   4,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   4,
											},
											Source: "filter(fn: (r) => r._measurement == \"cpu\")",
											Start: ast.Position{
												Column: 8,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   4,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 8,
													Line:   4,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   5,
									},
									Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"_field\"])",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   5,
											},
											Source: "columns: [\"_field\"]",
											Start: ast.Position{
												Column: 14,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   5,
												},
												Source: "columns: [\"_field\"]",
												Start: ast.Position{
													Column: 14,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   5,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 14,
														Line:   5,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   5,
													},
													Source: "[\"_field\"]",
													Start: ast.Position{
														Column: 23,
														Line:   5,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   5,
														},
														Source: "\"_field\"",
														Start: ast.Position{
															Column: 24,
															Line:   5,
														},
													},
												},
												Value: "_field",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   5,
										},
										Source: "group(columns: [\"_field\"])",
										Start: ast.Position{
											Column: 8,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   5,
											},
											Source: "group",
											Start: ast.Position{
												Column: 8,
												Line:   5,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   6,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"_field\"])\n    |> distinct(column: \"_field\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   6,
										},
										Source: "column: \"_field\"",
										Start: ast.Position{
											Column: 17,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   6,
											},
											Source: "column: \"_field\"",
											Start: ast.Position{
												Column: 17,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   6,
												},
												Source: "column",
												Start: ast.Position{
													Column: 17,
													Line:   6,
												},
											},
										},
										Name: "column",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   6,
												},
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 25,
													Line:   6,
												},
											},
										},
										Value: "_field",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   6,
									},
									Source: "distinct(column: \"_field\")",
									Start: ast.Position{
										Column: 8,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   6,
										},
										Source: "distinct",
										Start: ast.Position{
											Column: 8,
											Line:   6,
										},
									},
								},
								Name: "distinct",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   7,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"_field\"])\n    |> distinct(column: \"_field\")\n    |> group()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   7,
								},
								Source: "group()",
								Start: ast.Position{
									Column: 8,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   7,
									},
									Source: "group",
									Start: ast.Position{
										Column: 8,
										Line:   7,
									},
								},
							},
							Name: "group",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 24,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 24,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 30,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 160,
						Line:   8,
					},
					Source: "testingTest(name: \"meta_query_fields\", load: testLoadData, infile: \"meta_query_fields.in.csv\", outfile: \"meta_query_fields.out.csv\", test: t_meta_query_fields)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 159,
								Line:   8,
							},
							Source: "name: \"meta_query_fields\", load: testLoadData, infile: \"meta_query_fields.in.csv\", outfile: \"meta_query_fields.out.csv\", test: t_meta_query_fields",
							Start: ast.Position{
								Column: 13,
								Line:   8,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   8,
								},
								Source: "name: \"meta_query_fields\"",
								Start: ast.Position{
									Column: 13,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   8,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   8,
									},
									Source: "\"meta_query_fields\"",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Value: "meta_query_fields",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   8,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 40,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   8,
									},
									Source: "load",
									Start: ast.Position{
										Column: 40,
										Line:   8,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   8,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 46,
										Line:   8,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   8,
								},
								Source: "infile: \"meta_query_fields.in.csv\"",
								Start: ast.Position{
									Column: 60,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   8,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 60,
										Line:   8,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 94,
										Line:   8,
									},
									Source: "\"meta_query_fields.in.csv\"",
									Start: ast.Position{
										Column: 68,
										Line:   8,
									},
								},
							},
							Value: "meta_query_fields.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 132,
									Line:   8,
								},
								Source: "outfile: \"meta_query_fields.out.csv\"",
								Start: ast.Position{
									Column: 96,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 96,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   8,
									},
									Source: "\"meta_query_fields.out.csv\"",
									Start: ast.Position{
										Column: 105,
										Line:   8,
									},
								},
							},
							Value: "meta_query_fields.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 159,
									Line:   8,
								},
								Source: "test: t_meta_query_fields",
								Start: ast.Position{
									Column: 134,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 138,
										Line:   8,
									},
									Source: "test",
									Start: ast.Position{
										Column: 134,
										Line:   8,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 159,
										Line:   8,
									},
									Source: "t_meta_query_fields",
									Start: ast.Position{
										Column: 140,
										Line:   8,
									},
								},
							},
							Name: "t_meta_query_fields",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 160,
							Line:   8,
						},
						Source: "testingTest(name: \"meta_query_fields\", load: testLoadData, infile: \"meta_query_fields.in.csv\", outfile: \"meta_query_fields.out.csv\", test: t_meta_query_fields)",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   8,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   8,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "meta_query_fields.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 152,
					Line:   17,
				},
				Source: "t_meta_query_keys = (table=<-) => {\n  zero = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> keys()\n    |> yield(name:\"0\")\n\n  one = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"host\"])\n    |> distinct(column: \"host\")\n    |> group()\n    |> yield(name:\"1\")\n  return union(tables: [zero, one])\n}\ntestingTest(name: \"meta_query_keys\", load: testLoadData, infile: \"meta_query_keys.in.csv\", outfile: \"meta_query_keys.out.csv\", test: t_meta_query_keys)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   16,
					},
					Source: "t_meta_query_keys = (table=<-) => {\n  zero = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> keys()\n    |> yield(name:\"0\")\n\n  one = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"host\"])\n    |> distinct(column: \"host\")\n    |> group()\n    |> yield(name:\"1\")\n  return union(tables: [zero, one])\n}",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1,
						},
						Source: "t_meta_query_keys",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_meta_query_keys",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   16,
						},
						Source: "(table=<-) => {\n  zero = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> keys()\n    |> yield(name:\"0\")\n\n  one = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"host\"])\n    |> distinct(column: \"host\")\n    |> group()\n    |> yield(name:\"1\")\n  return union(tables: [zero, one])\n}",
						Start: ast.Position{
							Column: 21,
							Line:   1,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   16,
							},
							Source: "{\n  zero = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> keys()\n    |> yield(name:\"0\")\n\n  one = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"host\"])\n    |> distinct(column: \"host\")\n    |> group()\n    |> yield(name:\"1\")\n  return union(tables: [zero, one])\n}",
							Start: ast.Position{
								Column: 35,
								Line:   1,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "zero = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> keys()\n    |> yield(name:\"0\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   2,
									},
									Source: "zero",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "zero",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   2,
													},
													Source: "table",
													Start: ast.Position{
														Column: 10,
														Line:   2,
													},
												},
											},
											Name: "table",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   3,
												},
												Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
												Start: ast.Position{
													Column: 10,
													Line:   2,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   3,
														},
														Source: "start:2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 14,
															Line:   3,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   3,
															},
															Source: "start:2018-05-22T19:53:26Z",
															Start: ast.Position{
																Column: 14,
																Line:   3,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   3,
																},
																Source: "start",
																Start: ast.Position{
																	Column: 14,
																	Line:   3,
																},
															},
														},
														Name: "start",
													},
													Value: &ast.DateTimeLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   3,
																},
																Source: "2018-05-22T19:53:26Z",
																Start: ast.Position{
																	Column: 20,
																	Line:   3,
																},
															},
														},
														Value: time.Time{},
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   3,
													},
													Source: "range(start:2018-05-22T19:53:26Z)",
													Start: ast.Position{
														Column: 8,
														Line:   3,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 13,
															Line:   3,
														},
														Source: "range",
														Start: ast.Position{
															Column: 8,
															Line:   3,
														},
													},
												},
												Name: "range",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   4,
											},
											Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")",
											Start: ast.Position{
												Column: 10,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   4,
													},
													Source: "fn: (r) => r._measurement == \"cpu\"",
													Start: ast.Position{
														Column: 15,
														Line:   4,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   4,
														},
														Source: "fn: (r) => r._measurement == \"cpu\"",
														Start: ast.Position{
															Column: 15,
															Line:   4,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   4,
															},
															Source: "fn",
															Start: ast.Position{
																Column: 15,
																Line:   4,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   4,
															},
															Source: "(r) => r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 19,
																Line:   4,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   4,
																},
																Source: "r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 26,
																	Line:   4,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   4,
																	},
																	Source: "r._measurement",
																	Start: ast.Position{
																		Column: 26,
																		Line:   4,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 27,
																			Line:   4,
																		},
																		Source: "r",
																		Start: ast.Position{
																			Column: 26,
																			Line:   4,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 40,
																			Line:   4,
																		},
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 28,
																			Line:   4,
																		},
																	},
																},
																Name: "_measurement",
															},
														},
														Operator: 14,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 49,
																		Line:   4,
																	},
																	Source: "\"cpu\"",
																	Start: ast.Position{
																		Column: 44,
																		Line:   4,
																	},
																},
															},
															Value: "cpu",
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 20,
																	Line:   4,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   4,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 20,
																		Line:   4,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   4,
												},
												Source: "filter(fn: (r) => r._measurement == \"cpu\")",
												Start: ast.Position{
													Column: 8,
													Line:   4,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   4,
													},
													Source: "filter",
													Start: ast.Position{
														Column: 8,
														Line:   4,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   5,
										},
										Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> keys()",
										Start: ast.Position{
											Column: 10,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: nil,
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   5,
											},
											Source: "keys()",
											Start: ast.Position{
												Column: 8,
												Line:   5,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   5,
												},
												Source: "keys",
												Start: ast.Position{
													Column: 8,
													Line:   5,
												},
											},
										},
										Name: "keys",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> keys()\n    |> yield(name:\"0\")",
									Start: ast.Position{
										Column: 10,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   6,
											},
											Source: "name:\"0\"",
											Start: ast.Position{
												Column: 14,
												Line:   6,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   6,
												},
												Source: "name:\"0\"",
												Start: ast.Position{
													Column: 14,
													Line:   6,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   6,
													},
													Source: "name",
													Start: ast.Position{
														Column: 14,
														Line:   6,
													},
												},
											},
											Name: "name",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   6,
													},
													Source: "\"0\"",
													Start: ast.Position{
														Column: 19,
														Line:   6,
													},
												},
											},
											Value: "0",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   6,
										},
										Source: "yield(name:\"0\")",
										Start: ast.Position{
											Column: 8,
											Line:   6,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   6,
											},
											Source: "yield",
											Start: ast.Position{
												Column: 8,
												Line:   6,
											},
										},
									},
									Name: "yield",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   14,
								},
								Source: "one = table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"host\"])\n    |> distinct(column: \"host\")\n    |> group()\n    |> yield(name:\"1\")",
								Start: ast.Position{
									Column: 3,
									Line:   8,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   8,
									},
									Source: "one",
									Start: ast.Position{
										Column: 3,
										Line:   8,
									},
								},
							},
							Name: "one",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   8,
															},
															Source: "table",
															Start: ast.Position{
																Column: 9,
																Line:   8,
															},
														},
													},
													Name: "table",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   9,
														},
														Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
														Start: ast.Position{
															Column: 9,
															Line:   8,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   9,
																},
																Source: "start:2018-05-22T19:53:26Z",
																Start: ast.Position{
																	Column: 14,
																	Line:   9,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   9,
																	},
																	Source: "start:2018-05-22T19:53:26Z",
																	Start: ast.Position{
																		Column: 14,
																		Line:   9,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   9,
																		},
																		Source: "start",
																		Start: ast.Position{
																			Column: 14,
																			Line:   9,
																		},
																	},
																},
																Name: "start",
															},
															Value: &ast.DateTimeLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 40,
																			Line:   9,
																		},
																		Source: "2018-05-22T19:53:26Z",
																		Start: ast.Position{
																			Column: 20,
																			Line:   9,
																		},
																	},
																},
																Value: time.Time{},
															},
														}},
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   9,
															},
															Source: "range(start:2018-05-22T19:53:26Z)",
															Start: ast.Position{
																Column: 8,
																Line:   9,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 13,
																	Line:   9,
																},
																Source: "range",
																Start: ast.Position{
																	Column: 8,
																	Line:   9,
																},
															},
														},
														Name: "range",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 50,
														Line:   10,
													},
													Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")",
													Start: ast.Position{
														Column: 9,
														Line:   8,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   10,
															},
															Source: "fn: (r) => r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 15,
																Line:   10,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   10,
																},
																Source: "fn: (r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 15,
																	Line:   10,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 17,
																		Line:   10,
																	},
																	Source: "fn",
																	Start: ast.Position{
																		Column: 15,
																		Line:   10,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 49,
																		Line:   10,
																	},
																	Source: "(r) => r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 19,
																		Line:   10,
																	},
																},
															},
															Body: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 49,
																			Line:   10,
																		},
																		Source: "r._measurement == \"cpu\"",
																		Start: ast.Position{
																			Column: 26,
																			Line:   10,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 40,
																				Line:   10,
																			},
																			Source: "r._measurement",
																			Start: ast.Position{
																				Column: 26,
																				Line:   10,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 27,
																					Line:   10,
																				},
																				Source: "r",
																				Start: ast.Position{
																					Column: 26,
																					Line:   10,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 40,
																					Line:   10,
																				},
																				Source: "_measurement",
																				Start: ast.Position{
																					Column: 28,
																					Line:   10,
																				},
																			},
																		},
																		Name: "_measurement",
																	},
																},
																Operator: 14,
																Right: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 49,
																				Line:   10,
																			},
																			Source: "\"cpu\"",
																			Start: ast.Position{
																				Column: 44,
																				Line:   10,
																			},
																		},
																	},
																	Value: "cpu",
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 21,
																			Line:   10,
																		},
																		Source: "r",
																		Start: ast.Position{
																			Column: 20,
																			Line:   10,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 21,
																				Line:   10,
																			},
																			Source: "r",
																			Start: ast.Position{
																				Column: 20,
																				Line:   10,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   10,
														},
														Source: "filter(fn: (r) => r._measurement == \"cpu\")",
														Start: ast.Position{
															Column: 8,
															Line:   10,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   10,
															},
															Source: "filter",
															Start: ast.Position{
																Column: 8,
																Line:   10,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   11,
												},
												Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"host\"])",
												Start: ast.Position{
													Column: 9,
													Line:   8,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   11,
														},
														Source: "columns: [\"host\"]",
														Start: ast.Position{
															Column: 14,
															Line:   11,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   11,
															},
															Source: "columns: [\"host\"]",
															Start: ast.Position{
																Column: 14,
																Line:   11,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   11,
																},
																Source: "columns",
																Start: ast.Position{
																	Column: 14,
																	Line:   11,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   11,
																},
																Source: "[\"host\"]",
																Start: ast.Position{
																	Column: 23,
																	Line:   11,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   11,
																	},
																	Source: "\"host\"",
																	Start: ast.Position{
																		Column: 24,
																		Line:   11,
																	},
																},
															},
															Value: "host",
														}},
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   11,
													},
													Source: "group(columns: [\"host\"])",
													Start: ast.Position{
														Column: 8,
														Line:   11,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 13,
															Line:   11,
														},
														Source: "group",
														Start: ast.Position{
															Column: 8,
															Line:   11,
														},
													},
												},
												Name: "group",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   12,
											},
											Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"host\"])\n    |> distinct(column: \"host\")",
											Start: ast.Position{
												Column: 9,
												Line:   8,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   12,
													},
													Source: "column: \"host\"",
													Start: ast.Position{
														Column: 17,
														Line:   12,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   12,
														},
														Source: "column: \"host\"",
														Start: ast.Position{
															Column: 17,
															Line:   12,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   12,
															},
															Source: "column",
															Start: ast.Position{
																Column: 17,
																Line:   12,
															},
														},
													},
													Name: "column",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   12,
															},
															Source: "\"host\"",
															Start: ast.Position{
																Column: 25,
																Line:   12,
															},
														},
													},
													Value: "host",
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   12,
												},
												Source: "distinct(column: \"host\")",
												Start: ast.Position{
													Column: 8,
													Line:   12,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   12,
													},
													Source: "distinct",
													Start: ast.Position{
														Column: 8,
														Line:   12,
													},
												},
											},
											Name: "distinct",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   13,
										},
										Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"host\"])\n    |> distinct(column: \"host\")\n    |> group()",
										Start: ast.Position{
											Column: 9,
											Line:   8,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: nil,
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   13,
											},
											Source: "group()",
											Start: ast.Position{
												Column: 8,
												Line:   13,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   13,
												},
												Source: "group",
												Start: ast.Position{
													Column: 8,
													Line:   13,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   14,
									},
									Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._measurement == \"cpu\")\n    |> group(columns: [\"host\"])\n    |> distinct(column: \"host\")\n    |> group()\n    |> yield(name:\"1\")",
									Start: ast.Position{
										Column: 9,
										Line:   8,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   14,
											},
											Source: "name:\"1\"",
											Start: ast.Position{
												Column: 14,
												Line:   14,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   14,
												},
												Source: "name:\"1\"",
												Start: ast.Position{
													Column: 14,
													Line:   14,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   14,
													},
													Source: "name",
													Start: ast.Position{
														Column: 14,
														Line:   14,
													},
												},
											},
											Name: "name",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   14,
													},
													Source: "\"1\"",
													Start: ast.Position{
														Column: 19,
														Line:   14,
													},
												},
											},
											Value: "1",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   14,
										},
										Source: "yield(name:\"1\")",
										Start: ast.Position{
											Column: 8,
											Line:   14,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   14,
											},
											Source: "yield",
											Start: ast.Position{
												Column: 8,
												Line:   14,
											},
										},
									},
									Name: "yield",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   15,
										},
										Source: "tables: [zero, one]",
										Start: ast.Position{
											Column: 16,
											Line:   15,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   15,
											},
											Source: "tables: [zero, one]",
											Start: ast.Position{
												Column: 16,
												Line:   15,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   15,
												},
												Source: "tables",
												Start: ast.Position{
													Column: 16,
													Line:   15,
												},
											},
										},
										Name: "tables",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   15,
												},
												Source: "[zero, one]",
												Start: ast.Position{
													Column: 24,
													Line:   15,
												},
											},
										},
										Elements: []ast.Expression{&ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   15,
													},
													Source: "zero",
													Start: ast.Position{
														Column: 25,
														Line:   15,
													},
												},
											},
											Name: "zero",
										}, &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   15,
													},
													Source: "one",
													Start: ast.Position{
														Column: 31,
														Line:   15,
													},
												},
											},
											Name: "one",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   15,
									},
									Source: "union(tables: [zero, one])",
									Start: ast.Position{
										Column: 10,
										Line:   15,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   15,
										},
										Source: "union",
										Start: ast.Position{
											Column: 10,
											Line:   15,
										},
									},
								},
								Name: "union",
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   15,
								},
								Source: "return union(tables: [zero, one])",
								Start: ast.Position{
									Column: 3,
									Line:   15,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 22,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 152,
						Line:   17,
					},
					Source: "testingTest(name: \"meta_query_keys\", load: testLoadData, infile: \"meta_query_keys.in.csv\", outfile: \"meta_query_keys.out.csv\", test: t_meta_query_keys)",
					Start: ast.Position{
						Column: 1,
						Line:   17,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 151,
								Line:   17,
							},
							Source: "name: \"meta_query_keys\", load: testLoadData, infile: \"meta_query_keys.in.csv\", outfile: \"meta_query_keys.out.csv\", test: t_meta_query_keys",
							Start: ast.Position{
								Column: 13,
								Line:   17,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   17,
								},
								Source: "name: \"meta_query_keys\"",
								Start: ast.Position{
									Column: 13,
									Line:   17,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   17,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   17,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   17,
									},
									Source: "\"meta_query_keys\"",
									Start: ast.Position{
										Column: 19,
										Line:   17,
									},
								},
							},
							Value: "meta_query_keys",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   17,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 38,
									Line:   17,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   17,
									},
									Source: "load",
									Start: ast.Position{
										Column: 38,
										Line:   17,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   17,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 44,
										Line:   17,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   17,
								},
								Source: "infile: \"meta_query_keys.in.csv\"",
								Start: ast.Position{
									Column: 58,
									Line:   17,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   17,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 58,
										Line:   17,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   17,
									},
									Source: "\"meta_query_keys.in.csv\"",
									Start: ast.Position{
										Column: 66,
										Line:   17,
									},
								},
							},
							Value: "meta_query_keys.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 126,
									Line:   17,
								},
								Source: "outfile: \"meta_query_keys.out.csv\"",
								Start: ast.Position{
									Column: 92,
									Line:   17,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   17,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 92,
										Line:   17,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   17,
									},
									Source: "\"meta_query_keys.out.csv\"",
									Start: ast.Position{
										Column: 101,
										Line:   17,
									},
								},
							},
							Value: "meta_query_keys.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 151,
									Line:   17,
								},
								Source: "test: t_meta_query_keys",
								Start: ast.Position{
									Column: 128,
									Line:   17,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   17,
									},
									Source: "test",
									Start: ast.Position{
										Column: 128,
										Line:   17,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 151,
										Line:   17,
									},
									Source: "t_meta_query_keys",
									Start: ast.Position{
										Column: 134,
										Line:   17,
									},
								},
							},
							Name: "t_meta_query_keys",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 152,
							Line:   17,
						},
						Source: "testingTest(name: \"meta_query_keys\", load: testLoadData, infile: \"meta_query_keys.in.csv\", outfile: \"meta_query_keys.out.csv\", test: t_meta_query_keys)",
						Start: ast.Position{
							Column: 1,
							Line:   17,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   17,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   17,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "meta_query_keys.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 184,
					Line:   7,
				},
				Source: "t_meta_query_measurements = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_measurement\"])\n    |> distinct(column: \"_measurement\")\n    |> group()\ntestingTest(name: \"meta_query_measurements\", load: testLoadData, infile: \"meta_query_measurements.in.csv\", outfile: \"meta_query_measurements.out.csv\", test: t_meta_query_measurements)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   6,
					},
					Source: "t_meta_query_measurements = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_measurement\"])\n    |> distinct(column: \"_measurement\")\n    |> group()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 26,
							Line:   1,
						},
						Source: "t_meta_query_measurements",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_meta_query_measurements",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   6,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_measurement\"])\n    |> distinct(column: \"_measurement\")\n    |> group()",
						Start: ast.Position{
							Column: 29,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 8,
												Line:   2,
											},
											Source: "table",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Name: "table",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   3,
													},
													Source: "start:2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 14,
														Line:   3,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   3,
														},
														Source: "start",
														Start: ast.Position{
															Column: 14,
															Line:   3,
														},
													},
												},
												Name: "start",
											},
											Value: &ast.DateTimeLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   3,
														},
														Source: "2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 20,
															Line:   3,
														},
													},
												},
												Value: time.Time{},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   3,
											},
											Source: "range(start:2018-05-22T19:53:26Z)",
											Start: ast.Position{
												Column: 8,
												Line:   3,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   3,
												},
												Source: "range",
												Start: ast.Position{
													Column: 8,
													Line:   3,
												},
											},
										},
										Name: "range",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   4,
									},
									Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_measurement\"])",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   4,
											},
											Source: "columns: [\"_measurement\"]",
											Start: ast.Position{
												Column: 14,
												Line:   4,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   4,
												},
												Source: "columns: [\"_measurement\"]",
												Start: ast.Position{
													Column: 14,
													Line:   4,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   4,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 14,
														Line:   4,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   4,
													},
													Source: "[\"_measurement\"]",
													Start: ast.Position{
														Column: 23,
														Line:   4,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   4,
														},
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 24,
															Line:   4,
														},
													},
												},
												Value: "_measurement",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   4,
										},
										Source: "group(columns: [\"_measurement\"])",
										Start: ast.Position{
											Column: 8,
											Line:   4,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   4,
											},
											Source: "group",
											Start: ast.Position{
												Column: 8,
												Line:   4,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   5,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_measurement\"])\n    |> distinct(column: \"_measurement\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   5,
										},
										Source: "column: \"_measurement\"",
										Start: ast.Position{
											Column: 17,
											Line:   5,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   5,
											},
											Source: "column: \"_measurement\"",
											Start: ast.Position{
												Column: 17,
												Line:   5,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   5,
												},
												Source: "column",
												Start: ast.Position{
													Column: 17,
													Line:   5,
												},
											},
										},
										Name: "column",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   5,
												},
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 25,
													Line:   5,
												},
											},
										},
										Value: "_measurement",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   5,
									},
									Source: "distinct(column: \"_measurement\")",
									Start: ast.Position{
										Column: 8,
										Line:   5,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   5,
										},
										Source: "distinct",
										Start: ast.Position{
											Column: 8,
											Line:   5,
										},
									},
								},
								Name: "distinct",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   6,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> group(columns: [\"_measurement\"])\n    |> distinct(column: \"_measurement\")\n    |> group()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   6,
								},
								Source: "group()",
								Start: ast.Position{
									Column: 8,
									Line:   6,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   6,
									},
									Source: "group",
									Start: ast.Position{
										Column: 8,
										Line:   6,
									},
								},
							},
							Name: "group",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 30,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 30,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 36,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 184,
						Line:   7,
					},
					Source: "testingTest(name: \"meta_query_measurements\", load: testLoadData, infile: \"meta_query_measurements.in.csv\", outfile: \"meta_query_measurements.out.csv\", test: t_meta_query_measurements)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 183,
								Line:   7,
							},
							Source: "name: \"meta_query_measurements\", load: testLoadData, infile: \"meta_query_measurements.in.csv\", outfile: \"meta_query_measurements.out.csv\", test: t_meta_query_measurements",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   7,
								},
								Source: "name: \"meta_query_measurements\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   7,
									},
									Source: "\"meta_query_measurements\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "meta_query_measurements",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 46,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 46,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 52,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 106,
									Line:   7,
								},
								Source: "infile: \"meta_query_measurements.in.csv\"",
								Start: ast.Position{
									Column: 66,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 66,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 106,
										Line:   7,
									},
									Source: "\"meta_query_measurements.in.csv\"",
									Start: ast.Position{
										Column: 74,
										Line:   7,
									},
								},
							},
							Value: "meta_query_measurements.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 150,
									Line:   7,
								},
								Source: "outfile: \"meta_query_measurements.out.csv\"",
								Start: ast.Position{
									Column: 108,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 115,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 108,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 150,
										Line:   7,
									},
									Source: "\"meta_query_measurements.out.csv\"",
									Start: ast.Position{
										Column: 117,
										Line:   7,
									},
								},
							},
							Value: "meta_query_measurements.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 183,
									Line:   7,
								},
								Source: "test: t_meta_query_measurements",
								Start: ast.Position{
									Column: 152,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 156,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 152,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 183,
										Line:   7,
									},
									Source: "t_meta_query_measurements",
									Start: ast.Position{
										Column: 158,
										Line:   7,
									},
								},
							},
							Name: "t_meta_query_measurements",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 184,
							Line:   7,
						},
						Source: "testingTest(name: \"meta_query_measurements\", load: testLoadData, infile: \"meta_query_measurements.in.csv\", outfile: \"meta_query_measurements.out.csv\", test: t_meta_query_measurements)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "meta_query_measurements.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 104,
					Line:   4,
				},
				Source: "t_min = (table=<-) =>\n  table\n  |> min()\ntestingTest(name: \"min\", load: testLoadData, infile: \"min.in.csv\", outfile: \"min.out.csv\", test: t_min)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 11,
						Line:   3,
					},
					Source: "t_min = (table=<-) =>\n  table\n  |> min()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   1,
						},
						Source: "t_min",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_min",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n  |> min()",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   3,
							},
							Source: "table\n  |> min()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   3,
								},
								Source: "min()",
								Start: ast.Position{
									Column: 6,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   3,
									},
									Source: "min",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Name: "min",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 104,
						Line:   4,
					},
					Source: "testingTest(name: \"min\", load: testLoadData, infile: \"min.in.csv\", outfile: \"min.out.csv\", test: t_min)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   4,
							},
							Source: "name: \"min\", load: testLoadData, infile: \"min.in.csv\", outfile: \"min.out.csv\", test: t_min",
							Start: ast.Position{
								Column: 13,
								Line:   4,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   4,
								},
								Source: "name: \"min\"",
								Start: ast.Position{
									Column: 13,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   4,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   4,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   4,
									},
									Source: "\"min\"",
									Start: ast.Position{
										Column: 19,
										Line:   4,
									},
								},
							},
							Value: "min",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   4,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 26,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   4,
									},
									Source: "load",
									Start: ast.Position{
										Column: 26,
										Line:   4,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   4,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 32,
										Line:   4,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   4,
								},
								Source: "infile: \"min.in.csv\"",
								Start: ast.Position{
									Column: 46,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   4,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 46,
										Line:   4,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   4,
									},
									Source: "\"min.in.csv\"",
									Start: ast.Position{
										Column: 54,
										Line:   4,
									},
								},
							},
							Value: "min.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   4,
								},
								Source: "outfile: \"min.out.csv\"",
								Start: ast.Position{
									Column: 68,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   4,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 68,
										Line:   4,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   4,
									},
									Source: "\"min.out.csv\"",
									Start: ast.Position{
										Column: 77,
										Line:   4,
									},
								},
							},
							Value: "min.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   4,
								},
								Source: "test: t_min",
								Start: ast.Position{
									Column: 92,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   4,
									},
									Source: "test",
									Start: ast.Position{
										Column: 92,
										Line:   4,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   4,
									},
									Source: "t_min",
									Start: ast.Position{
										Column: 98,
										Line:   4,
									},
								},
							},
							Name: "t_min",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 104,
							Line:   4,
						},
						Source: "testingTest(name: \"min\", load: testLoadData, infile: \"min.in.csv\", outfile: \"min.out.csv\", test: t_min)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "min.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 148,
					Line:   6,
				},
				Source: "t_multiple_range = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:16Z)\n\t|> range(start: 2018-05-22T19:54:06Z)\n\ntestingTest(name: \"multiple_range\", load: testLoadData, infile: \"multiple_range.in.csv\", outfile: \"multiple_range.out.csv\", test: t_multiple_range)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 39,
						Line:   4,
					},
					Source: "t_multiple_range = (table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:16Z)\n\t|> range(start: 2018-05-22T19:54:06Z)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						Source: "t_multiple_range",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_multiple_range",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 39,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:16Z)\n\t|> range(start: 2018-05-22T19:54:06Z)",
						Start: ast.Position{
							Column: 20,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   3,
								},
								Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:16Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   3,
										},
										Source: "start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:16Z",
										Start: ast.Position{
											Column: 11,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 18,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   3,
											},
											Source: "stop: 2018-05-22T19:54:16Z",
											Start: ast.Position{
												Column: 40,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   3,
												},
												Source: "stop",
												Start: ast.Position{
													Column: 40,
													Line:   3,
												},
											},
										},
										Name: "stop",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   3,
												},
												Source: "2018-05-22T19:54:16Z",
												Start: ast.Position{
													Column: 46,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   3,
									},
									Source: "range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:16Z)",
									Start: ast.Position{
										Column: 5,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   4,
							},
							Source: "table\n\t|> range(start: 2018-05-22T19:53:26Z, stop: 2018-05-22T19:54:16Z)\n\t|> range(start: 2018-05-22T19:54:06Z)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   4,
									},
									Source: "start: 2018-05-22T19:54:06Z",
									Start: ast.Position{
										Column: 11,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   4,
										},
										Source: "start: 2018-05-22T19:54:06Z",
										Start: ast.Position{
											Column: 11,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   4,
											},
											Source: "start",
											Start: ast.Position{
												Column: 11,
												Line:   4,
											},
										},
									},
									Name: "start",
								},
								Value: &ast.DateTimeLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   4,
											},
											Source: "2018-05-22T19:54:06Z",
											Start: ast.Position{
												Column: 18,
												Line:   4,
											},
										},
									},
									Value: time.Time{},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   4,
								},
								Source: "range(start: 2018-05-22T19:54:06Z)",
								Start: ast.Position{
									Column: 5,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   4,
									},
									Source: "range",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Name: "range",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 21,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 148,
						Line:   6,
					},
					Source: "testingTest(name: \"multiple_range\", load: testLoadData, infile: \"multiple_range.in.csv\", outfile: \"multiple_range.out.csv\", test: t_multiple_range)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 147,
								Line:   6,
							},
							Source: "name: \"multiple_range\", load: testLoadData, infile: \"multiple_range.in.csv\", outfile: \"multiple_range.out.csv\", test: t_multiple_range",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   6,
								},
								Source: "name: \"multiple_range\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   6,
									},
									Source: "\"multiple_range\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "multiple_range",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 37,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 37,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 43,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   6,
								},
								Source: "infile: \"multiple_range.in.csv\"",
								Start: ast.Position{
									Column: 57,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 57,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   6,
									},
									Source: "\"multiple_range.in.csv\"",
									Start: ast.Position{
										Column: 65,
										Line:   6,
									},
								},
							},
							Value: "multiple_range.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   6,
								},
								Source: "outfile: \"multiple_range.out.csv\"",
								Start: ast.Position{
									Column: 90,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 90,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   6,
									},
									Source: "\"multiple_range.out.csv\"",
									Start: ast.Position{
										Column: 99,
										Line:   6,
									},
								},
							},
							Value: "multiple_range.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   6,
								},
								Source: "test: t_multiple_range",
								Start: ast.Position{
									Column: 125,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 125,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   6,
									},
									Source: "t_multiple_range",
									Start: ast.Position{
										Column: 131,
										Line:   6,
									},
								},
							},
							Name: "t_multiple_range",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 148,
							Line:   6,
						},
						Source: "testingTest(name: \"multiple_range\", load: testLoadData, infile: \"multiple_range.in.csv\", outfile: \"multiple_range.out.csv\", test: t_multiple_range)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "multiple_range.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 144,
					Line:   6,
				},
				Source: "t_null_as_value = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n\t|> filter(fn: (r) => r._value == null)\n\ntestingTest(name: \"null_as_value\", load: testLoadData, infile: \"null_as_value.in.csv\", outfile: \"null_as_value.out.csv\", test: t_null_as_value)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   4,
					},
					Source: "t_null_as_value = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n\t|> filter(fn: (r) => r._value == null)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						Source: "t_null_as_value",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_null_as_value",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n\t|> filter(fn: (r) => r._value == null)",
						Start: ast.Position{
							Column: 19,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n\t|> filter(fn: (r) => r._value == null)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   4,
									},
									Source: "fn: (r) => r._value == null",
									Start: ast.Position{
										Column: 12,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   4,
										},
										Source: "fn: (r) => r._value == null",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   4,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   4,
											},
											Source: "(r) => r._value == null",
											Start: ast.Position{
												Column: 16,
												Line:   4,
											},
										},
									},
									Body: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   4,
												},
												Source: "r._value == null",
												Start: ast.Position{
													Column: 23,
													Line:   4,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   4,
													},
													Source: "r._value",
													Start: ast.Position{
														Column: 23,
														Line:   4,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   4,
														},
														Source: "r",
														Start: ast.Position{
															Column: 23,
															Line:   4,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   4,
														},
														Source: "_value",
														Start: ast.Position{
															Column: 25,
															Line:   4,
														},
													},
												},
												Name: "_value",
											},
										},
										Operator: 14,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   4,
													},
													Source: "null",
													Start: ast.Position{
														Column: 35,
														Line:   4,
													},
												},
											},
											Name: "null",
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   4,
												},
												Source: "r",
												Start: ast.Position{
													Column: 17,
													Line:   4,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   4,
													},
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   4,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   4,
								},
								Source: "filter(fn: (r) => r._value == null)",
								Start: ast.Position{
									Column: 5,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   4,
									},
									Source: "filter",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Name: "filter",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 20,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 26,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 144,
						Line:   6,
					},
					Source: "testingTest(name: \"null_as_value\", load: testLoadData, infile: \"null_as_value.in.csv\", outfile: \"null_as_value.out.csv\", test: t_null_as_value)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 143,
								Line:   6,
							},
							Source: "name: \"null_as_value\", load: testLoadData, infile: \"null_as_value.in.csv\", outfile: \"null_as_value.out.csv\", test: t_null_as_value",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   6,
								},
								Source: "name: \"null_as_value\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   6,
									},
									Source: "\"null_as_value\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "null_as_value",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 36,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 36,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 42,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   6,
								},
								Source: "infile: \"null_as_value.in.csv\"",
								Start: ast.Position{
									Column: 56,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 56,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   6,
									},
									Source: "\"null_as_value.in.csv\"",
									Start: ast.Position{
										Column: 64,
										Line:   6,
									},
								},
							},
							Value: "null_as_value.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 120,
									Line:   6,
								},
								Source: "outfile: \"null_as_value.out.csv\"",
								Start: ast.Position{
									Column: 88,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 88,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   6,
									},
									Source: "\"null_as_value.out.csv\"",
									Start: ast.Position{
										Column: 97,
										Line:   6,
									},
								},
							},
							Value: "null_as_value.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 143,
									Line:   6,
								},
								Source: "test: t_null_as_value",
								Start: ast.Position{
									Column: 122,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 122,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 143,
										Line:   6,
									},
									Source: "t_null_as_value",
									Start: ast.Position{
										Column: 128,
										Line:   6,
									},
								},
							},
							Name: "t_null_as_value",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 144,
							Line:   6,
						},
						Source: "testingTest(name: \"null_as_value\", load: testLoadData, infile: \"null_as_value.in.csv\", outfile: \"null_as_value.out.csv\", test: t_null_as_value)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "null_as_value.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 136,
					Line:   9,
				},
				Source: "filterRegex = /inodes*/\n\nt_parse_regex = (table=<-) =>\n  table\n\n    |> range(start:2018-05-20T19:53:26Z)\n    |> filter(fn: (r) => r._field =~ filterRegex)\n    |> max()\ntestingTest(name: \"parse_regex\", load: testLoadData, infile: \"parse_regex.in.csv\", outfile: \"parse_regex.out.csv\", test: t_parse_regex)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 24,
						Line:   1,
					},
					Source: "filterRegex = /inodes*/",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1,
						},
						Source: "filterRegex",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "filterRegex",
			},
			Init: &ast.RegexpLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 24,
							Line:   1,
						},
						Source: "/inodes*/",
						Start: ast.Position{
							Column: 15,
							Line:   1,
						},
					},
				},
				Value: &regexp.Regexp{},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   8,
					},
					Source: "t_parse_regex = (table=<-) =>\n  table\n\n    |> range(start:2018-05-20T19:53:26Z)\n    |> filter(fn: (r) => r._field =~ filterRegex)\n    |> max()",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   3,
						},
						Source: "t_parse_regex",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_parse_regex",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   8,
						},
						Source: "(table=<-) =>\n  table\n\n    |> range(start:2018-05-20T19:53:26Z)\n    |> filter(fn: (r) => r._field =~ filterRegex)\n    |> max()",
						Start: ast.Position{
							Column: 17,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   4,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   4,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   6,
									},
									Source: "table\n\n    |> range(start:2018-05-20T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   4,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   6,
											},
											Source: "start:2018-05-20T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   6,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   6,
												},
												Source: "start:2018-05-20T19:53:26Z",
												Start: ast.Position{
													Column: 14,
													Line:   6,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   6,
													},
													Source: "start",
													Start: ast.Position{
														Column: 14,
														Line:   6,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   6,
													},
													Source: "2018-05-20T19:53:26Z",
													Start: ast.Position{
														Column: 20,
														Line:   6,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   6,
										},
										Source: "range(start:2018-05-20T19:53:26Z)",
										Start: ast.Position{
											Column: 8,
											Line:   6,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   6,
											},
											Source: "range",
											Start: ast.Position{
												Column: 8,
												Line:   6,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   7,
								},
								Source: "table\n\n    |> range(start:2018-05-20T19:53:26Z)\n    |> filter(fn: (r) => r._field =~ filterRegex)",
								Start: ast.Position{
									Column: 3,
									Line:   4,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   7,
										},
										Source: "fn: (r) => r._field =~ filterRegex",
										Start: ast.Position{
											Column: 15,
											Line:   7,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   7,
											},
											Source: "fn: (r) => r._field =~ filterRegex",
											Start: ast.Position{
												Column: 15,
												Line:   7,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   7,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 15,
													Line:   7,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   7,
												},
												Source: "(r) => r._field =~ filterRegex",
												Start: ast.Position{
													Column: 19,
													Line:   7,
												},
											},
										},
										Body: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   7,
													},
													Source: "r._field =~ filterRegex",
													Start: ast.Position{
														Column: 26,
														Line:   7,
													},
												},
											},
											Left: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   7,
														},
														Source: "r._field",
														Start: ast.Position{
															Column: 26,
															Line:   7,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 27,
																Line:   7,
															},
															Source: "r",
															Start: ast.Position{
																Column: 26,
																Line:   7,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   7,
															},
															Source: "_field",
															Start: ast.Position{
																Column: 28,
																Line:   7,
															},
														},
													},
													Name: "_field",
												},
											},
											Operator: 16,
											Right: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   7,
														},
														Source: "filterRegex",
														Start: ast.Position{
															Column: 38,
															Line:   7,
														},
													},
												},
												Name: "filterRegex",
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   7,
													},
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   7,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   7,
														},
														Source: "r",
														Start: ast.Position{
															Column: 20,
															Line:   7,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   7,
									},
									Source: "filter(fn: (r) => r._field =~ filterRegex)",
									Start: ast.Position{
										Column: 8,
										Line:   7,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   7,
										},
										Source: "filter",
										Start: ast.Position{
											Column: 8,
											Line:   7,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   8,
							},
							Source: "table\n\n    |> range(start:2018-05-20T19:53:26Z)\n    |> filter(fn: (r) => r._field =~ filterRegex)\n    |> max()",
							Start: ast.Position{
								Column: 3,
								Line:   4,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   8,
								},
								Source: "max()",
								Start: ast.Position{
									Column: 8,
									Line:   8,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   8,
									},
									Source: "max",
									Start: ast.Position{
										Column: 8,
										Line:   8,
									},
								},
							},
							Name: "max",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 18,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 18,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 24,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 136,
						Line:   9,
					},
					Source: "testingTest(name: \"parse_regex\", load: testLoadData, infile: \"parse_regex.in.csv\", outfile: \"parse_regex.out.csv\", test: t_parse_regex)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 135,
								Line:   9,
							},
							Source: "name: \"parse_regex\", load: testLoadData, infile: \"parse_regex.in.csv\", outfile: \"parse_regex.out.csv\", test: t_parse_regex",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   9,
								},
								Source: "name: \"parse_regex\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   9,
									},
									Source: "\"parse_regex\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "parse_regex",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 34,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 34,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 40,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   9,
								},
								Source: "infile: \"parse_regex.in.csv\"",
								Start: ast.Position{
									Column: 54,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 54,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 82,
										Line:   9,
									},
									Source: "\"parse_regex.in.csv\"",
									Start: ast.Position{
										Column: 62,
										Line:   9,
									},
								},
							},
							Value: "parse_regex.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   9,
								},
								Source: "outfile: \"parse_regex.out.csv\"",
								Start: ast.Position{
									Column: 84,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 91,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 84,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   9,
									},
									Source: "\"parse_regex.out.csv\"",
									Start: ast.Position{
										Column: 93,
										Line:   9,
									},
								},
							},
							Value: "parse_regex.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   9,
								},
								Source: "test: t_parse_regex",
								Start: ast.Position{
									Column: 116,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 116,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   9,
									},
									Source: "t_parse_regex",
									Start: ast.Position{
										Column: 122,
										Line:   9,
									},
								},
							},
							Name: "t_parse_regex",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 136,
							Line:   9,
						},
						Source: "testingTest(name: \"parse_regex\", load: testLoadData, infile: \"parse_regex.in.csv\", outfile: \"parse_regex.out.csv\", test: t_parse_regex)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "parse_regex.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 132,
					Line:   9,
				},
				Source: "t_percentile = (table=<-) =>\n  table\n    |> range(start: 2018-05-22T19:50:26Z)\n    |> group(columns: [\"_measurement\", \"_start\"])\n    |> percentile(percentile:0.75, method:\"exact_selector\")\n    |> map(fn: (r) => ({_time: r._time, percentile: r._value}))\n    |> yield(name:\"0\")\n\ntestingTest(name: \"percentile\", load: testLoadData, infile: \"percentile.in.csv\", outfile: \"percentile.out.csv\", test: t_percentile)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 23,
						Line:   7,
					},
					Source: "t_percentile = (table=<-) =>\n  table\n    |> range(start: 2018-05-22T19:50:26Z)\n    |> group(columns: [\"_measurement\", \"_start\"])\n    |> percentile(percentile:0.75, method:\"exact_selector\")\n    |> map(fn: (r) => ({_time: r._time, percentile: r._value}))\n    |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						Source: "t_percentile",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_percentile",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start: 2018-05-22T19:50:26Z)\n    |> group(columns: [\"_measurement\", \"_start\"])\n    |> percentile(percentile:0.75, method:\"exact_selector\")\n    |> map(fn: (r) => ({_time: r._time, percentile: r._value}))\n    |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 16,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   3,
											},
											Source: "table\n    |> range(start: 2018-05-22T19:50:26Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   3,
													},
													Source: "start: 2018-05-22T19:50:26Z",
													Start: ast.Position{
														Column: 14,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   3,
														},
														Source: "start: 2018-05-22T19:50:26Z",
														Start: ast.Position{
															Column: 14,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 14,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   3,
															},
															Source: "2018-05-22T19:50:26Z",
															Start: ast.Position{
																Column: 21,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   3,
												},
												Source: "range(start: 2018-05-22T19:50:26Z)",
												Start: ast.Position{
													Column: 8,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 8,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   4,
										},
										Source: "table\n    |> range(start: 2018-05-22T19:50:26Z)\n    |> group(columns: [\"_measurement\", \"_start\"])",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   4,
												},
												Source: "columns: [\"_measurement\", \"_start\"]",
												Start: ast.Position{
													Column: 14,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   4,
													},
													Source: "columns: [\"_measurement\", \"_start\"]",
													Start: ast.Position{
														Column: 14,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   4,
														},
														Source: "columns",
														Start: ast.Position{
															Column: 14,
															Line:   4,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   4,
														},
														Source: "[\"_measurement\", \"_start\"]",
														Start: ast.Position{
															Column: 23,
															Line:   4,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   4,
															},
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 24,
																Line:   4,
															},
														},
													},
													Value: "_measurement",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   4,
															},
															Source: "\"_start\"",
															Start: ast.Position{
																Column: 40,
																Line:   4,
															},
														},
													},
													Value: "_start",
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   4,
											},
											Source: "group(columns: [\"_measurement\", \"_start\"])",
											Start: ast.Position{
												Column: 8,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   4,
												},
												Source: "group",
												Start: ast.Position{
													Column: 8,
													Line:   4,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   5,
									},
									Source: "table\n    |> range(start: 2018-05-22T19:50:26Z)\n    |> group(columns: [\"_measurement\", \"_start\"])\n    |> percentile(percentile:0.75, method:\"exact_selector\")",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   5,
											},
											Source: "percentile:0.75, method:\"exact_selector\"",
											Start: ast.Position{
												Column: 19,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   5,
												},
												Source: "percentile:0.75",
												Start: ast.Position{
													Column: 19,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   5,
													},
													Source: "percentile",
													Start: ast.Position{
														Column: 19,
														Line:   5,
													},
												},
											},
											Name: "percentile",
										},
										Value: &ast.FloatLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   5,
													},
													Source: "0.75",
													Start: ast.Position{
														Column: 30,
														Line:   5,
													},
												},
											},
											Value: 0.75,
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   5,
												},
												Source: "method:\"exact_selector\"",
												Start: ast.Position{
													Column: 36,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   5,
													},
													Source: "method",
													Start: ast.Position{
														Column: 36,
														Line:   5,
													},
												},
											},
											Name: "method",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   5,
													},
													Source: "\"exact_selector\"",
													Start: ast.Position{
														Column: 43,
														Line:   5,
													},
												},
											},
											Value: "exact_selector",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   5,
										},
										Source: "percentile(percentile:0.75, method:\"exact_selector\")",
										Start: ast.Position{
											Column: 8,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   5,
											},
											Source: "percentile",
											Start: ast.Position{
												Column: 8,
												Line:   5,
											},
										},
									},
									Name: "percentile",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   6,
								},
								Source: "table\n    |> range(start: 2018-05-22T19:50:26Z)\n    |> group(columns: [\"_measurement\", \"_start\"])\n    |> percentile(percentile:0.75, method:\"exact_selector\")\n    |> map(fn: (r) => ({_time: r._time, percentile: r._value}))",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   6,
										},
										Source: "fn: (r) => ({_time: r._time, percentile: r._value}",
										Start: ast.Position{
											Column: 12,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   6,
											},
											Source: "fn: (r) => ({_time: r._time, percentile: r._value}",
											Start: ast.Position{
												Column: 12,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   6,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 12,
													Line:   6,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   6,
												},
												Source: "(r) => ({_time: r._time, percentile: r._value}",
												Start: ast.Position{
													Column: 16,
													Line:   6,
												},
											},
										},
										Body: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   6,
													},
													Source: "{_time: r._time, percentile: r._value}",
													Start: ast.Position{
														Column: 24,
														Line:   6,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   6,
														},
														Source: "_time: r._time",
														Start: ast.Position{
															Column: 25,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 30,
																Line:   6,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 25,
																Line:   6,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   6,
															},
															Source: "r._time",
															Start: ast.Position{
																Column: 32,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 32,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   6,
																},
																Source: "_time",
																Start: ast.Position{
																	Column: 34,
																	Line:   6,
																},
															},
														},
														Name: "_time",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   6,
														},
														Source: "percentile: r._value",
														Start: ast.Position{
															Column: 41,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 51,
																Line:   6,
															},
															Source: "percentile",
															Start: ast.Position{
																Column: 41,
																Line:   6,
															},
														},
													},
													Name: "percentile",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 61,
																Line:   6,
															},
															Source: "r._value",
															Start: ast.Position{
																Column: 53,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 54,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 53,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 61,
																	Line:   6,
																},
																Source: "_value",
																Start: ast.Position{
																	Column: 55,
																	Line:   6,
																},
															},
														},
														Name: "_value",
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   6,
													},
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   6,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   6,
														},
														Source: "r",
														Start: ast.Position{
															Column: 17,
															Line:   6,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   6,
									},
									Source: "map(fn: (r) => ({_time: r._time, percentile: r._value}))",
									Start: ast.Position{
										Column: 8,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   6,
										},
										Source: "map",
										Start: ast.Position{
											Column: 8,
											Line:   6,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   7,
							},
							Source: "table\n    |> range(start: 2018-05-22T19:50:26Z)\n    |> group(columns: [\"_measurement\", \"_start\"])\n    |> percentile(percentile:0.75, method:\"exact_selector\")\n    |> map(fn: (r) => ({_time: r._time, percentile: r._value}))\n    |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   7,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 14,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   7,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 14,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   7,
											},
											Source: "name",
											Start: ast.Position{
												Column: 14,
												Line:   7,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   7,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 19,
												Line:   7,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   7,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 8,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   7,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 8,
										Line:   7,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 132,
						Line:   9,
					},
					Source: "testingTest(name: \"percentile\", load: testLoadData, infile: \"percentile.in.csv\", outfile: \"percentile.out.csv\", test: t_percentile)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 131,
								Line:   9,
							},
							Source: "name: \"percentile\", load: testLoadData, infile: \"percentile.in.csv\", outfile: \"percentile.out.csv\", test: t_percentile",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   9,
								},
								Source: "name: \"percentile\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   9,
									},
									Source: "\"percentile\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "percentile",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 33,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 33,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 39,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   9,
								},
								Source: "infile: \"percentile.in.csv\"",
								Start: ast.Position{
									Column: 53,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 53,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   9,
									},
									Source: "\"percentile.in.csv\"",
									Start: ast.Position{
										Column: 61,
										Line:   9,
									},
								},
							},
							Value: "percentile.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   9,
								},
								Source: "outfile: \"percentile.out.csv\"",
								Start: ast.Position{
									Column: 82,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 82,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   9,
									},
									Source: "\"percentile.out.csv\"",
									Start: ast.Position{
										Column: 91,
										Line:   9,
									},
								},
							},
							Value: "percentile.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 131,
									Line:   9,
								},
								Source: "test: t_percentile",
								Start: ast.Position{
									Column: 113,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 113,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 131,
										Line:   9,
									},
									Source: "t_percentile",
									Start: ast.Position{
										Column: 119,
										Line:   9,
									},
								},
							},
							Name: "t_percentile",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 132,
							Line:   9,
						},
						Source: "testingTest(name: \"percentile\", load: testLoadData, infile: \"percentile.in.csv\", outfile: \"percentile.out.csv\", test: t_percentile)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "percentile.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 162,
					Line:   7,
				},
				Source: "option now = () => 2018-12-18T21:14:00Z\n\nt_percentile = (table=<-) => table\n    |> range(start: -2m)\n    |> percentile(percentile: 0.75, method: \"exact_mean\")\n\ntestingTest(name: \"percentile_aggregate\", load: testLoadData, infile: \"percentile_aggregate.in.csv\", outfile: \"percentile_aggregate.out.csv\", test: t_percentile)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-18T21:14:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-18T21:14:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-18T21:14:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-18T21:14:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 58,
						Line:   5,
					},
					Source: "t_percentile = (table=<-) => table\n    |> range(start: -2m)\n    |> percentile(percentile: 0.75, method: \"exact_mean\")",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   3,
						},
						Source: "t_percentile",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_percentile",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 58,
							Line:   5,
						},
						Source: "(table=<-) => table\n    |> range(start: -2m)\n    |> percentile(percentile: 0.75, method: \"exact_mean\")",
						Start: ast.Position{
							Column: 16,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 30,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   4,
								},
								Source: "table\n    |> range(start: -2m)",
								Start: ast.Position{
									Column: 30,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   4,
										},
										Source: "start: -2m",
										Start: ast.Position{
											Column: 14,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   4,
											},
											Source: "start: -2m",
											Start: ast.Position{
												Column: 14,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   4,
													},
													Source: "2m",
													Start: ast.Position{
														Column: 22,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(2),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   4,
												},
												Source: "-2m",
												Start: ast.Position{
													Column: 21,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   4,
									},
									Source: "range(start: -2m)",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   5,
							},
							Source: "table\n    |> range(start: -2m)\n    |> percentile(percentile: 0.75, method: \"exact_mean\")",
							Start: ast.Position{
								Column: 30,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   5,
									},
									Source: "percentile: 0.75, method: \"exact_mean\"",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   5,
										},
										Source: "percentile: 0.75",
										Start: ast.Position{
											Column: 19,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   5,
											},
											Source: "percentile",
											Start: ast.Position{
												Column: 19,
												Line:   5,
											},
										},
									},
									Name: "percentile",
								},
								Value: &ast.FloatLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   5,
											},
											Source: "0.75",
											Start: ast.Position{
												Column: 31,
												Line:   5,
											},
										},
									},
									Value: 0.75,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   5,
										},
										Source: "method: \"exact_mean\"",
										Start: ast.Position{
											Column: 37,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   5,
											},
											Source: "method",
											Start: ast.Position{
												Column: 37,
												Line:   5,
											},
										},
									},
									Name: "method",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   5,
											},
											Source: "\"exact_mean\"",
											Start: ast.Position{
												Column: 45,
												Line:   5,
											},
										},
									},
									Value: "exact_mean",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   5,
								},
								Source: "percentile(percentile: 0.75, method: \"exact_mean\")",
								Start: ast.Position{
									Column: 8,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   5,
									},
									Source: "percentile",
									Start: ast.Position{
										Column: 8,
										Line:   5,
									},
								},
							},
							Name: "percentile",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 162,
						Line:   7,
					},
					Source: "testingTest(name: \"percentile_aggregate\", load: testLoadData, infile: \"percentile_aggregate.in.csv\", outfile: \"percentile_aggregate.out.csv\", test: t_percentile)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 161,
								Line:   7,
							},
							Source: "name: \"percentile_aggregate\", load: testLoadData, infile: \"percentile_aggregate.in.csv\", outfile: \"percentile_aggregate.out.csv\", test: t_percentile",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   7,
								},
								Source: "name: \"percentile_aggregate\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   7,
									},
									Source: "\"percentile_aggregate\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "percentile_aggregate",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 43,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 43,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 49,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 100,
									Line:   7,
								},
								Source: "infile: \"percentile_aggregate.in.csv\"",
								Start: ast.Position{
									Column: 63,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 63,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 100,
										Line:   7,
									},
									Source: "\"percentile_aggregate.in.csv\"",
									Start: ast.Position{
										Column: 71,
										Line:   7,
									},
								},
							},
							Value: "percentile_aggregate.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 141,
									Line:   7,
								},
								Source: "outfile: \"percentile_aggregate.out.csv\"",
								Start: ast.Position{
									Column: 102,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 102,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   7,
									},
									Source: "\"percentile_aggregate.out.csv\"",
									Start: ast.Position{
										Column: 111,
										Line:   7,
									},
								},
							},
							Value: "percentile_aggregate.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 161,
									Line:   7,
								},
								Source: "test: t_percentile",
								Start: ast.Position{
									Column: 143,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 143,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 161,
										Line:   7,
									},
									Source: "t_percentile",
									Start: ast.Position{
										Column: 149,
										Line:   7,
									},
								},
							},
							Name: "t_percentile",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 162,
							Line:   7,
						},
						Source: "testingTest(name: \"percentile_aggregate\", load: testLoadData, infile: \"percentile_aggregate.in.csv\", outfile: \"percentile_aggregate.out.csv\", test: t_percentile)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "percentile_aggregate.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 156,
					Line:   7,
				},
				Source: "option now = () => 2018-12-18T21:14:00Z\n\nt_percentile = (table=<-) => table\n    |> range(start: -2m)\n    |> percentile(percentile: 0.75, method: \"estimate_tdigest\")\n\ntestingTest(name: \"percentile_tdigest\", load: testLoadData, infile: \"percentile_tdigest.in.csv\", outfile: \"percentile_tdigest.out.csv\", test: t_percentile)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-18T21:14:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-18T21:14:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-18T21:14:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-18T21:14:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 64,
						Line:   5,
					},
					Source: "t_percentile = (table=<-) => table\n    |> range(start: -2m)\n    |> percentile(percentile: 0.75, method: \"estimate_tdigest\")",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   3,
						},
						Source: "t_percentile",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_percentile",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 64,
							Line:   5,
						},
						Source: "(table=<-) => table\n    |> range(start: -2m)\n    |> percentile(percentile: 0.75, method: \"estimate_tdigest\")",
						Start: ast.Position{
							Column: 16,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 30,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   4,
								},
								Source: "table\n    |> range(start: -2m)",
								Start: ast.Position{
									Column: 30,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   4,
										},
										Source: "start: -2m",
										Start: ast.Position{
											Column: 14,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   4,
											},
											Source: "start: -2m",
											Start: ast.Position{
												Column: 14,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   4,
													},
													Source: "2m",
													Start: ast.Position{
														Column: 22,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(2),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   4,
												},
												Source: "-2m",
												Start: ast.Position{
													Column: 21,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   4,
									},
									Source: "range(start: -2m)",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   5,
							},
							Source: "table\n    |> range(start: -2m)\n    |> percentile(percentile: 0.75, method: \"estimate_tdigest\")",
							Start: ast.Position{
								Column: 30,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   5,
									},
									Source: "percentile: 0.75, method: \"estimate_tdigest\"",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   5,
										},
										Source: "percentile: 0.75",
										Start: ast.Position{
											Column: 19,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   5,
											},
											Source: "percentile",
											Start: ast.Position{
												Column: 19,
												Line:   5,
											},
										},
									},
									Name: "percentile",
								},
								Value: &ast.FloatLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   5,
											},
											Source: "0.75",
											Start: ast.Position{
												Column: 31,
												Line:   5,
											},
										},
									},
									Value: 0.75,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   5,
										},
										Source: "method: \"estimate_tdigest\"",
										Start: ast.Position{
											Column: 37,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   5,
											},
											Source: "method",
											Start: ast.Position{
												Column: 37,
												Line:   5,
											},
										},
									},
									Name: "method",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   5,
											},
											Source: "\"estimate_tdigest\"",
											Start: ast.Position{
												Column: 45,
												Line:   5,
											},
										},
									},
									Value: "estimate_tdigest",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   5,
								},
								Source: "percentile(percentile: 0.75, method: \"estimate_tdigest\")",
								Start: ast.Position{
									Column: 8,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   5,
									},
									Source: "percentile",
									Start: ast.Position{
										Column: 8,
										Line:   5,
									},
								},
							},
							Name: "percentile",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 156,
						Line:   7,
					},
					Source: "testingTest(name: \"percentile_tdigest\", load: testLoadData, infile: \"percentile_tdigest.in.csv\", outfile: \"percentile_tdigest.out.csv\", test: t_percentile)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 155,
								Line:   7,
							},
							Source: "name: \"percentile_tdigest\", load: testLoadData, infile: \"percentile_tdigest.in.csv\", outfile: \"percentile_tdigest.out.csv\", test: t_percentile",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   7,
								},
								Source: "name: \"percentile_tdigest\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   7,
									},
									Source: "\"percentile_tdigest\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "percentile_tdigest",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 41,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 41,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 47,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   7,
								},
								Source: "infile: \"percentile_tdigest.in.csv\"",
								Start: ast.Position{
									Column: 61,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 61,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   7,
									},
									Source: "\"percentile_tdigest.in.csv\"",
									Start: ast.Position{
										Column: 69,
										Line:   7,
									},
								},
							},
							Value: "percentile_tdigest.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   7,
								},
								Source: "outfile: \"percentile_tdigest.out.csv\"",
								Start: ast.Position{
									Column: 98,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 98,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   7,
									},
									Source: "\"percentile_tdigest.out.csv\"",
									Start: ast.Position{
										Column: 107,
										Line:   7,
									},
								},
							},
							Value: "percentile_tdigest.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 155,
									Line:   7,
								},
								Source: "test: t_percentile",
								Start: ast.Position{
									Column: 137,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 137,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 155,
										Line:   7,
									},
									Source: "t_percentile",
									Start: ast.Position{
										Column: 143,
										Line:   7,
									},
								},
							},
							Name: "t_percentile",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 156,
							Line:   7,
						},
						Source: "testingTest(name: \"percentile_tdigest\", load: testLoadData, infile: \"percentile_tdigest.in.csv\", outfile: \"percentile_tdigest.out.csv\", test: t_percentile)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "percentile_tdigest.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 112,
					Line:   7,
				},
				Source: "t_pivot = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\", \"_field\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")\n\ntestingTest(name: \"pivot\", load: testLoadData, infile: \"pivot.in.csv\", outfile: \"pivot.out.csv\", test: t_pivot)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   5,
					},
					Source: "t_pivot = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\", \"_field\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   1,
						},
						Source: "t_pivot",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_pivot",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\", \"_field\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 11,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   3,
									},
									Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 12,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "start: 2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 19,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "range(start: 2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 6,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 92,
									Line:   4,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\", \"_field\"], valueColumn: \"_value\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 91,
											Line:   4,
										},
										Source: "rowKey: [\"_time\"], columnKey: [\"_measurement\", \"_field\"], valueColumn: \"_value\"",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   4,
											},
											Source: "rowKey: [\"_time\"]",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   4,
												},
												Source: "rowKey",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "rowKey",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   4,
												},
												Source: "[\"_time\"]",
												Start: ast.Position{
													Column: 20,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   4,
													},
													Source: "\"_time\"",
													Start: ast.Position{
														Column: 21,
														Line:   4,
													},
												},
											},
											Value: "_time",
										}},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   4,
											},
											Source: "columnKey: [\"_measurement\", \"_field\"]",
											Start: ast.Position{
												Column: 31,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   4,
												},
												Source: "columnKey",
												Start: ast.Position{
													Column: 31,
													Line:   4,
												},
											},
										},
										Name: "columnKey",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 68,
													Line:   4,
												},
												Source: "[\"_measurement\", \"_field\"]",
												Start: ast.Position{
													Column: 42,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 57,
														Line:   4,
													},
													Source: "\"_measurement\"",
													Start: ast.Position{
														Column: 43,
														Line:   4,
													},
												},
											},
											Value: "_measurement",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 67,
														Line:   4,
													},
													Source: "\"_field\"",
													Start: ast.Position{
														Column: 59,
														Line:   4,
													},
												},
											},
											Value: "_field",
										}},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 91,
												Line:   4,
											},
											Source: "valueColumn: \"_value\"",
											Start: ast.Position{
												Column: 70,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 81,
													Line:   4,
												},
												Source: "valueColumn",
												Start: ast.Position{
													Column: 70,
													Line:   4,
												},
											},
										},
										Name: "valueColumn",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 91,
													Line:   4,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 83,
													Line:   4,
												},
											},
										},
										Value: "_value",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 92,
										Line:   4,
									},
									Source: "pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\", \"_field\"], valueColumn: \"_value\")",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "pivot",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "pivot",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   5,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\", \"_field\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   5,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   5,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   5,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   5,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   5,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   5,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 12,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 12,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 112,
						Line:   7,
					},
					Source: "testingTest(name: \"pivot\", load: testLoadData, infile: \"pivot.in.csv\", outfile: \"pivot.out.csv\", test: t_pivot)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 111,
								Line:   7,
							},
							Source: "name: \"pivot\", load: testLoadData, infile: \"pivot.in.csv\", outfile: \"pivot.out.csv\", test: t_pivot",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   7,
								},
								Source: "name: \"pivot\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   7,
									},
									Source: "\"pivot\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "pivot",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 28,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 28,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 34,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   7,
								},
								Source: "infile: \"pivot.in.csv\"",
								Start: ast.Position{
									Column: 48,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 48,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   7,
									},
									Source: "\"pivot.in.csv\"",
									Start: ast.Position{
										Column: 56,
										Line:   7,
									},
								},
							},
							Value: "pivot.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   7,
								},
								Source: "outfile: \"pivot.out.csv\"",
								Start: ast.Position{
									Column: 72,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 72,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   7,
									},
									Source: "\"pivot.out.csv\"",
									Start: ast.Position{
										Column: 81,
										Line:   7,
									},
								},
							},
							Value: "pivot.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   7,
								},
								Source: "test: t_pivot",
								Start: ast.Position{
									Column: 98,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 98,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   7,
									},
									Source: "t_pivot",
									Start: ast.Position{
										Column: 104,
										Line:   7,
									},
								},
							},
							Name: "t_pivot",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 112,
							Line:   7,
						},
						Source: "testingTest(name: \"pivot\", load: testLoadData, infile: \"pivot.in.csv\", outfile: \"pivot.out.csv\", test: t_pivot)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "pivot.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 140,
					Line:   7,
				},
				Source: "t_pivot_fields = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")\n\ntestingTest(name: \"pivot_fields\", load: testLoadData, infile: \"pivot_fields.in.csv\", outfile: \"pivot_fields.out.csv\", test: t_pivot_fields)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   5,
					},
					Source: "t_pivot_fields = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   1,
						},
						Source: "t_pivot_fields",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_pivot_fields",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 18,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   3,
									},
									Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 12,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "start: 2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 19,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "range(start: 2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 6,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   4,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   4,
										},
										Source: "rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\"",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   4,
											},
											Source: "rowKey: [\"_time\"]",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   4,
												},
												Source: "rowKey",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "rowKey",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   4,
												},
												Source: "[\"_time\"]",
												Start: ast.Position{
													Column: 20,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   4,
													},
													Source: "\"_time\"",
													Start: ast.Position{
														Column: 21,
														Line:   4,
													},
												},
											},
											Value: "_time",
										}},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   4,
											},
											Source: "columnKey: [\"_field\"]",
											Start: ast.Position{
												Column: 31,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   4,
												},
												Source: "columnKey",
												Start: ast.Position{
													Column: 31,
													Line:   4,
												},
											},
										},
										Name: "columnKey",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   4,
												},
												Source: "[\"_field\"]",
												Start: ast.Position{
													Column: 42,
													Line:   4,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   4,
													},
													Source: "\"_field\"",
													Start: ast.Position{
														Column: 43,
														Line:   4,
													},
												},
											},
											Value: "_field",
										}},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 75,
												Line:   4,
											},
											Source: "valueColumn: \"_value\"",
											Start: ast.Position{
												Column: 54,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   4,
												},
												Source: "valueColumn",
												Start: ast.Position{
													Column: 54,
													Line:   4,
												},
											},
										},
										Name: "valueColumn",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 75,
													Line:   4,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 67,
													Line:   4,
												},
											},
										},
										Value: "_value",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 76,
										Line:   4,
									},
									Source: "pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "pivot",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "pivot",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   5,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   5,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   5,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   5,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   5,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   5,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   5,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 19,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 19,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 25,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 140,
						Line:   7,
					},
					Source: "testingTest(name: \"pivot_fields\", load: testLoadData, infile: \"pivot_fields.in.csv\", outfile: \"pivot_fields.out.csv\", test: t_pivot_fields)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 139,
								Line:   7,
							},
							Source: "name: \"pivot_fields\", load: testLoadData, infile: \"pivot_fields.in.csv\", outfile: \"pivot_fields.out.csv\", test: t_pivot_fields",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   7,
								},
								Source: "name: \"pivot_fields\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   7,
									},
									Source: "\"pivot_fields\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "pivot_fields",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 35,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 35,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 41,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   7,
								},
								Source: "infile: \"pivot_fields.in.csv\"",
								Start: ast.Position{
									Column: 55,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 55,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 84,
										Line:   7,
									},
									Source: "\"pivot_fields.in.csv\"",
									Start: ast.Position{
										Column: 63,
										Line:   7,
									},
								},
							},
							Value: "pivot_fields.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 117,
									Line:   7,
								},
								Source: "outfile: \"pivot_fields.out.csv\"",
								Start: ast.Position{
									Column: 86,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 86,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   7,
									},
									Source: "\"pivot_fields.out.csv\"",
									Start: ast.Position{
										Column: 95,
										Line:   7,
									},
								},
							},
							Value: "pivot_fields.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 139,
									Line:   7,
								},
								Source: "test: t_pivot_fields",
								Start: ast.Position{
									Column: 119,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 119,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 139,
										Line:   7,
									},
									Source: "t_pivot_fields",
									Start: ast.Position{
										Column: 125,
										Line:   7,
									},
								},
							},
							Name: "t_pivot_fields",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 140,
							Line:   7,
						},
						Source: "testingTest(name: \"pivot_fields\", load: testLoadData, infile: \"pivot_fields.in.csv\", outfile: \"pivot_fields.out.csv\", test: t_pivot_fields)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "pivot_fields.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 132,
					Line:   9,
				},
				Source: "t_pivot_mean = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"])\n  |> mean()\n  |> pivot(rowKey: [\"_stop\"], columnKey: [\"host\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")\n\ntestingTest(name: \"pivot_mean\", load: testLoadData, infile: \"pivot_mean.in.csv\", outfile: \"pivot_mean.out.csv\", test: t_pivot_mean)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   7,
					},
					Source: "t_pivot_mean = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"])\n  |> mean()\n  |> pivot(rowKey: [\"_stop\"], columnKey: [\"host\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						Source: "t_pivot_mean",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_pivot_mean",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"])\n  |> mean()\n  |> pivot(rowKey: [\"_stop\"], columnKey: [\"host\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 16,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   3,
													},
													Source: "start: 2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   3,
														},
														Source: "start: 2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   3,
															},
															Source: "2018-05-22T19:53:26Z",
															Start: ast.Position{
																Column: 19,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "range(start: 2018-05-22T19:53:26Z)",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   4,
										},
										Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"])",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 64,
													Line:   4,
												},
												Source: "columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"]",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 64,
														Line:   4,
													},
													Source: "columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"]",
													Start: ast.Position{
														Column: 12,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   4,
														},
														Source: "columns",
														Start: ast.Position{
															Column: 12,
															Line:   4,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 64,
															Line:   4,
														},
														Source: "[\"_stop\", \"_measurement\", \"_field\", \"host\"]",
														Start: ast.Position{
															Column: 21,
															Line:   4,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   4,
															},
															Source: "\"_stop\"",
															Start: ast.Position{
																Column: 22,
																Line:   4,
															},
														},
													},
													Value: "_stop",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   4,
															},
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 31,
																Line:   4,
															},
														},
													},
													Value: "_measurement",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   4,
															},
															Source: "\"_field\"",
															Start: ast.Position{
																Column: 47,
																Line:   4,
															},
														},
													},
													Value: "_field",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 63,
																Line:   4,
															},
															Source: "\"host\"",
															Start: ast.Position{
																Column: 57,
																Line:   4,
															},
														},
													},
													Value: "host",
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   4,
											},
											Source: "group(columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"])",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   4,
												},
												Source: "group",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   5,
									},
									Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"])\n  |> mean()",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   5,
										},
										Source: "mean()",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   5,
											},
											Source: "mean",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Name: "mean",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   6,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"])\n  |> mean()\n  |> pivot(rowKey: [\"_stop\"], columnKey: [\"host\"], valueColumn: \"_value\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 73,
											Line:   6,
										},
										Source: "rowKey: [\"_stop\"], columnKey: [\"host\"], valueColumn: \"_value\"",
										Start: ast.Position{
											Column: 12,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   6,
											},
											Source: "rowKey: [\"_stop\"]",
											Start: ast.Position{
												Column: 12,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   6,
												},
												Source: "rowKey",
												Start: ast.Position{
													Column: 12,
													Line:   6,
												},
											},
										},
										Name: "rowKey",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   6,
												},
												Source: "[\"_stop\"]",
												Start: ast.Position{
													Column: 20,
													Line:   6,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   6,
													},
													Source: "\"_stop\"",
													Start: ast.Position{
														Column: 21,
														Line:   6,
													},
												},
											},
											Value: "_stop",
										}},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   6,
											},
											Source: "columnKey: [\"host\"]",
											Start: ast.Position{
												Column: 31,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   6,
												},
												Source: "columnKey",
												Start: ast.Position{
													Column: 31,
													Line:   6,
												},
											},
										},
										Name: "columnKey",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   6,
												},
												Source: "[\"host\"]",
												Start: ast.Position{
													Column: 42,
													Line:   6,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   6,
													},
													Source: "\"host\"",
													Start: ast.Position{
														Column: 43,
														Line:   6,
													},
												},
											},
											Value: "host",
										}},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 73,
												Line:   6,
											},
											Source: "valueColumn: \"_value\"",
											Start: ast.Position{
												Column: 52,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   6,
												},
												Source: "valueColumn",
												Start: ast.Position{
													Column: 52,
													Line:   6,
												},
											},
										},
										Name: "valueColumn",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 73,
													Line:   6,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 65,
													Line:   6,
												},
											},
										},
										Value: "_value",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   6,
									},
									Source: "pivot(rowKey: [\"_stop\"], columnKey: [\"host\"], valueColumn: \"_value\")",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   6,
										},
										Source: "pivot",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Name: "pivot",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   7,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> group(columns: [\"_stop\", \"_measurement\", \"_field\", \"host\"])\n  |> mean()\n  |> pivot(rowKey: [\"_stop\"], columnKey: [\"host\"], valueColumn: \"_value\")\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   7,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   7,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   7,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   7,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   7,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   7,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   7,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 132,
						Line:   9,
					},
					Source: "testingTest(name: \"pivot_mean\", load: testLoadData, infile: \"pivot_mean.in.csv\", outfile: \"pivot_mean.out.csv\", test: t_pivot_mean)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 131,
								Line:   9,
							},
							Source: "name: \"pivot_mean\", load: testLoadData, infile: \"pivot_mean.in.csv\", outfile: \"pivot_mean.out.csv\", test: t_pivot_mean",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   9,
								},
								Source: "name: \"pivot_mean\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   9,
									},
									Source: "\"pivot_mean\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "pivot_mean",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 33,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 33,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 39,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   9,
								},
								Source: "infile: \"pivot_mean.in.csv\"",
								Start: ast.Position{
									Column: 53,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 53,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   9,
									},
									Source: "\"pivot_mean.in.csv\"",
									Start: ast.Position{
										Column: 61,
										Line:   9,
									},
								},
							},
							Value: "pivot_mean.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   9,
								},
								Source: "outfile: \"pivot_mean.out.csv\"",
								Start: ast.Position{
									Column: 82,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 82,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   9,
									},
									Source: "\"pivot_mean.out.csv\"",
									Start: ast.Position{
										Column: 91,
										Line:   9,
									},
								},
							},
							Value: "pivot_mean.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 131,
									Line:   9,
								},
								Source: "test: t_pivot_mean",
								Start: ast.Position{
									Column: 113,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 113,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 131,
										Line:   9,
									},
									Source: "t_pivot_mean",
									Start: ast.Position{
										Column: 119,
										Line:   9,
									},
								},
							},
							Name: "t_pivot_mean",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 132,
							Line:   9,
						},
						Source: "testingTest(name: \"pivot_mean\", load: testLoadData, infile: \"pivot_mean.in.csv\", outfile: \"pivot_mean.out.csv\", test: t_pivot_mean)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "pivot_mean.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 152,
					Line:   7,
				},
				Source: "t_pivot_task_test = (table=<-) =>\n  table\n    |> range(start: 2018-10-02T17:55:11.520461Z)\n\t|> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\n\t|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\ntestingTest(name: \"pivot_task_test\", load: testLoadData, infile: \"pivot_task_test.in.csv\", outfile: \"pivot_task_test.out.csv\", test: t_pivot_task_test)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 75,
						Line:   5,
					},
					Source: "t_pivot_task_test = (table=<-) =>\n  table\n    |> range(start: 2018-10-02T17:55:11.520461Z)\n\t|> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\n\t|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1,
						},
						Source: "t_pivot_task_test",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_pivot_task_test",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 75,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start: 2018-10-02T17:55:11.520461Z)\n\t|> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\n\t|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
						Start: ast.Position{
							Column: 21,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   3,
									},
									Source: "table\n    |> range(start: 2018-10-02T17:55:11.520461Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   3,
											},
											Source: "start: 2018-10-02T17:55:11.520461Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   3,
												},
												Source: "start: 2018-10-02T17:55:11.520461Z",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 14,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   3,
													},
													Source: "2018-10-02T17:55:11.520461Z",
													Start: ast.Position{
														Column: 21,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   3,
										},
										Source: "range(start: 2018-10-02T17:55:11.520461Z)",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 8,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 87,
									Line:   4,
								},
								Source: "table\n    |> range(start: 2018-10-02T17:55:11.520461Z)\n\t|> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 85,
											Line:   4,
										},
										Source: "fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 85,
												Line:   4,
											},
											Source: "fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   4,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 85,
													Line:   4,
												},
												Source: "(r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
												Start: ast.Position{
													Column: 16,
													Line:   4,
												},
											},
										},
										Body: &ast.LogicalExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 85,
														Line:   4,
													},
													Source: "r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
													Start: ast.Position{
														Column: 23,
														Line:   4,
													},
												},
											},
											Left: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   4,
														},
														Source: "r._measurement == \"records\"",
														Start: ast.Position{
															Column: 23,
															Line:   4,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   4,
															},
															Source: "r._measurement",
															Start: ast.Position{
																Column: 23,
																Line:   4,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 24,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 23,
																	Line:   4,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   4,
																},
																Source: "_measurement",
																Start: ast.Position{
																	Column: 25,
																	Line:   4,
																},
															},
														},
														Name: "_measurement",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 50,
																Line:   4,
															},
															Source: "\"records\"",
															Start: ast.Position{
																Column: 41,
																Line:   4,
															},
														},
													},
													Value: "records",
												},
											},
											Operator: 1,
											Right: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 85,
															Line:   4,
														},
														Source: "r.taskID == \"02bac3c8f0f37000\"",
														Start: ast.Position{
															Column: 55,
															Line:   4,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 63,
																Line:   4,
															},
															Source: "r.taskID",
															Start: ast.Position{
																Column: 55,
																Line:   4,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 56,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 55,
																	Line:   4,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 63,
																	Line:   4,
																},
																Source: "taskID",
																Start: ast.Position{
																	Column: 57,
																	Line:   4,
																},
															},
														},
														Name: "taskID",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 85,
																Line:   4,
															},
															Source: "\"02bac3c8f0f37000\"",
															Start: ast.Position{
																Column: 67,
																Line:   4,
															},
														},
													},
													Value: "02bac3c8f0f37000",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   4,
													},
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   4,
														},
														Source: "r",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 87,
										Line:   4,
									},
									Source: "filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "filter",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   5,
							},
							Source: "table\n    |> range(start: 2018-10-02T17:55:11.520461Z)\n\t|> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\n\t|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   5,
									},
									Source: "rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   5,
										},
										Source: "rowKey: [\"_time\"]",
										Start: ast.Position{
											Column: 11,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   5,
											},
											Source: "rowKey",
											Start: ast.Position{
												Column: 11,
												Line:   5,
											},
										},
									},
									Name: "rowKey",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   5,
											},
											Source: "[\"_time\"]",
											Start: ast.Position{
												Column: 19,
												Line:   5,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   5,
												},
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   5,
												},
											},
										},
										Value: "_time",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   5,
										},
										Source: "columnKey: [\"_field\"]",
										Start: ast.Position{
											Column: 30,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   5,
											},
											Source: "columnKey",
											Start: ast.Position{
												Column: 30,
												Line:   5,
											},
										},
									},
									Name: "columnKey",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   5,
											},
											Source: "[\"_field\"]",
											Start: ast.Position{
												Column: 41,
												Line:   5,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   5,
												},
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 42,
													Line:   5,
												},
											},
										},
										Value: "_field",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   5,
										},
										Source: "valueColumn: \"_value\"",
										Start: ast.Position{
											Column: 53,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 64,
												Line:   5,
											},
											Source: "valueColumn",
											Start: ast.Position{
												Column: 53,
												Line:   5,
											},
										},
									},
									Name: "valueColumn",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   5,
											},
											Source: "\"_value\"",
											Start: ast.Position{
												Column: 66,
												Line:   5,
											},
										},
									},
									Value: "_value",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   5,
								},
								Source: "pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   5,
									},
									Source: "pivot",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "pivot",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 22,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 152,
						Line:   7,
					},
					Source: "testingTest(name: \"pivot_task_test\", load: testLoadData, infile: \"pivot_task_test.in.csv\", outfile: \"pivot_task_test.out.csv\", test: t_pivot_task_test)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 151,
								Line:   7,
							},
							Source: "name: \"pivot_task_test\", load: testLoadData, infile: \"pivot_task_test.in.csv\", outfile: \"pivot_task_test.out.csv\", test: t_pivot_task_test",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   7,
								},
								Source: "name: \"pivot_task_test\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   7,
									},
									Source: "\"pivot_task_test\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "pivot_task_test",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 38,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 38,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 44,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   7,
								},
								Source: "infile: \"pivot_task_test.in.csv\"",
								Start: ast.Position{
									Column: 58,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 58,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   7,
									},
									Source: "\"pivot_task_test.in.csv\"",
									Start: ast.Position{
										Column: 66,
										Line:   7,
									},
								},
							},
							Value: "pivot_task_test.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 126,
									Line:   7,
								},
								Source: "outfile: \"pivot_task_test.out.csv\"",
								Start: ast.Position{
									Column: 92,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 92,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   7,
									},
									Source: "\"pivot_task_test.out.csv\"",
									Start: ast.Position{
										Column: 101,
										Line:   7,
									},
								},
							},
							Value: "pivot_task_test.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 151,
									Line:   7,
								},
								Source: "test: t_pivot_task_test",
								Start: ast.Position{
									Column: 128,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 128,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 151,
										Line:   7,
									},
									Source: "t_pivot_task_test",
									Start: ast.Position{
										Column: 134,
										Line:   7,
									},
								},
							},
							Name: "t_pivot_task_test",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 152,
							Line:   7,
						},
						Source: "testingTest(name: \"pivot_task_test\", load: testLoadData, infile: \"pivot_task_test.in.csv\", outfile: \"pivot_task_test.out.csv\", test: t_pivot_task_test)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "pivot_task_test.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 112,
					Line:   6,
				},
				Source: "t_range = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:36Z)\n\n\ntestingTest(name: \"range\", load: testLoadData, infile: \"range.in.csv\", outfile: \"range.out.csv\", test: t_range)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   3,
					},
					Source: "t_range = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:36Z)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   1,
						},
						Source: "t_range",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_range",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:36Z)",
						Start: ast.Position{
							Column: 11,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 41,
								Line:   3,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:36Z)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   3,
									},
									Source: "start:2018-05-22T19:53:36Z",
									Start: ast.Position{
										Column: 14,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:36Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   3,
											},
											Source: "start",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Name: "start",
								},
								Value: &ast.DateTimeLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "2018-05-22T19:53:36Z",
											Start: ast.Position{
												Column: 20,
												Line:   3,
											},
										},
									},
									Value: time.Time{},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "range(start:2018-05-22T19:53:36Z)",
								Start: ast.Position{
									Column: 8,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   3,
									},
									Source: "range",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Name: "range",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 12,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 12,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 112,
						Line:   6,
					},
					Source: "testingTest(name: \"range\", load: testLoadData, infile: \"range.in.csv\", outfile: \"range.out.csv\", test: t_range)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 111,
								Line:   6,
							},
							Source: "name: \"range\", load: testLoadData, infile: \"range.in.csv\", outfile: \"range.out.csv\", test: t_range",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   6,
								},
								Source: "name: \"range\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   6,
									},
									Source: "\"range\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "range",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 28,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 28,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 34,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   6,
								},
								Source: "infile: \"range.in.csv\"",
								Start: ast.Position{
									Column: 48,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 48,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   6,
									},
									Source: "\"range.in.csv\"",
									Start: ast.Position{
										Column: 56,
										Line:   6,
									},
								},
							},
							Value: "range.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   6,
								},
								Source: "outfile: \"range.out.csv\"",
								Start: ast.Position{
									Column: 72,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 72,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   6,
									},
									Source: "\"range.out.csv\"",
									Start: ast.Position{
										Column: 81,
										Line:   6,
									},
								},
							},
							Value: "range.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   6,
								},
								Source: "test: t_range",
								Start: ast.Position{
									Column: 98,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 98,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   6,
									},
									Source: "t_range",
									Start: ast.Position{
										Column: 104,
										Line:   6,
									},
								},
							},
							Name: "t_range",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 112,
							Line:   6,
						},
						Source: "testingTest(name: \"range\", load: testLoadData, infile: \"range.in.csv\", outfile: \"range.out.csv\", test: t_range)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "range.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 116,
					Line:   8,
				},
				Source: "t_rename = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns:{host:\"server\"})\n\t|> drop(columns:[\"_start\", \"_stop\"])\n\n\ntestingTest(name: \"rename\", load: testLoadData, infile: \"rename.in.csv\", outfile: \"rename.out.csv\", test: t_rename)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 38,
						Line:   5,
					},
					Source: "t_rename = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns:{host:\"server\"})\n\t|> drop(columns:[\"_start\", \"_stop\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   1,
						},
						Source: "t_rename",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_rename",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 38,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns:{host:\"server\"})\n\t|> drop(columns:[\"_start\", \"_stop\"])",
						Start: ast.Position{
							Column: 12,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   3,
									},
									Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 17,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   3,
										},
										Source: "range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   4,
								},
								Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns:{host:\"server\"})",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   4,
										},
										Source: "columns:{host:\"server\"}",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   4,
											},
											Source: "columns:{host:\"server\"}",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   4,
												},
												Source: "{host:\"server\"}",
												Start: ast.Position{
													Column: 20,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   4,
													},
													Source: "host:\"server\"",
													Start: ast.Position{
														Column: 21,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   4,
														},
														Source: "host",
														Start: ast.Position{
															Column: 21,
															Line:   4,
														},
													},
												},
												Name: "host",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   4,
														},
														Source: "\"server\"",
														Start: ast.Position{
															Column: 26,
															Line:   4,
														},
													},
												},
												Value: "server",
											},
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   4,
									},
									Source: "rename(columns:{host:\"server\"})",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "rename",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "rename",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   5,
							},
							Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns:{host:\"server\"})\n\t|> drop(columns:[\"_start\", \"_stop\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   5,
									},
									Source: "columns:[\"_start\", \"_stop\"]",
									Start: ast.Position{
										Column: 10,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   5,
										},
										Source: "columns:[\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 10,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   5,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   5,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   5,
											},
											Source: "[\"_start\", \"_stop\"]",
											Start: ast.Position{
												Column: 18,
												Line:   5,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   5,
												},
												Source: "\"_start\"",
												Start: ast.Position{
													Column: 19,
													Line:   5,
												},
											},
										},
										Value: "_start",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   5,
												},
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 29,
													Line:   5,
												},
											},
										},
										Value: "_stop",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   5,
								},
								Source: "drop(columns:[\"_start\", \"_stop\"])",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 13,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 13,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 19,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 116,
						Line:   8,
					},
					Source: "testingTest(name: \"rename\", load: testLoadData, infile: \"rename.in.csv\", outfile: \"rename.out.csv\", test: t_rename)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 115,
								Line:   8,
							},
							Source: "name: \"rename\", load: testLoadData, infile: \"rename.in.csv\", outfile: \"rename.out.csv\", test: t_rename",
							Start: ast.Position{
								Column: 13,
								Line:   8,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   8,
								},
								Source: "name: \"rename\"",
								Start: ast.Position{
									Column: 13,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   8,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   8,
									},
									Source: "\"rename\"",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Value: "rename",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   8,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 29,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   8,
									},
									Source: "load",
									Start: ast.Position{
										Column: 29,
										Line:   8,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   8,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 35,
										Line:   8,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   8,
								},
								Source: "infile: \"rename.in.csv\"",
								Start: ast.Position{
									Column: 49,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   8,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 49,
										Line:   8,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   8,
									},
									Source: "\"rename.in.csv\"",
									Start: ast.Position{
										Column: 57,
										Line:   8,
									},
								},
							},
							Value: "rename.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   8,
								},
								Source: "outfile: \"rename.out.csv\"",
								Start: ast.Position{
									Column: 74,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 74,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   8,
									},
									Source: "\"rename.out.csv\"",
									Start: ast.Position{
										Column: 83,
										Line:   8,
									},
								},
							},
							Value: "rename.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   8,
								},
								Source: "test: t_rename",
								Start: ast.Position{
									Column: 101,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   8,
									},
									Source: "test",
									Start: ast.Position{
										Column: 101,
										Line:   8,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 115,
										Line:   8,
									},
									Source: "t_rename",
									Start: ast.Position{
										Column: 107,
										Line:   8,
									},
								},
							},
							Name: "t_rename",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 116,
							Line:   8,
						},
						Source: "testingTest(name: \"rename\", load: testLoadData, infile: \"rename.in.csv\", outfile: \"rename.out.csv\", test: t_rename)",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   8,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   8,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "rename.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 128,
					Line:   7,
				},
				Source: "t_rename_fn = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(fn: (column) => column)\n\t|> drop(fn: (column) => column == \"_start\" or column == \"_stop\")\n\ntestingTest(name: \"rename_fn\", load: testLoadData, infile: \"rename_fn.in.csv\", outfile: \"rename_fn.out.csv\", test: t_rename_fn)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 66,
						Line:   5,
					},
					Source: "t_rename_fn = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(fn: (column) => column)\n\t|> drop(fn: (column) => column == \"_start\" or column == \"_stop\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1,
						},
						Source: "t_rename_fn",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_rename_fn",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 66,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(fn: (column) => column)\n\t|> drop(fn: (column) => column == \"_start\" or column == \"_stop\")",
						Start: ast.Position{
							Column: 15,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   3,
									},
									Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 17,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   3,
										},
										Source: "range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   4,
								},
								Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(fn: (column) => column)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   4,
										},
										Source: "fn: (column) => column",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   4,
											},
											Source: "fn: (column) => column",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   4,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   4,
												},
												Source: "(column) => column",
												Start: ast.Position{
													Column: 16,
													Line:   4,
												},
											},
										},
										Body: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   4,
													},
													Source: "column",
													Start: ast.Position{
														Column: 28,
														Line:   4,
													},
												},
											},
											Name: "column",
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   4,
													},
													Source: "column",
													Start: ast.Position{
														Column: 17,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   4,
														},
														Source: "column",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Name: "column",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   4,
									},
									Source: "rename(fn: (column) => column)",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "rename",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "rename",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 66,
								Line:   5,
							},
							Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(fn: (column) => column)\n\t|> drop(fn: (column) => column == \"_start\" or column == \"_stop\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   5,
									},
									Source: "fn: (column) => column == \"_start\" or column == \"_stop\"",
									Start: ast.Position{
										Column: 10,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   5,
										},
										Source: "fn: (column) => column == \"_start\" or column == \"_stop\"",
										Start: ast.Position{
											Column: 10,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   5,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 10,
												Line:   5,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   5,
											},
											Source: "(column) => column == \"_start\" or column == \"_stop\"",
											Start: ast.Position{
												Column: 14,
												Line:   5,
											},
										},
									},
									Body: &ast.LogicalExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   5,
												},
												Source: "column == \"_start\" or column == \"_stop\"",
												Start: ast.Position{
													Column: 26,
													Line:   5,
												},
											},
										},
										Left: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   5,
													},
													Source: "column == \"_start\"",
													Start: ast.Position{
														Column: 26,
														Line:   5,
													},
												},
											},
											Left: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   5,
														},
														Source: "column",
														Start: ast.Position{
															Column: 26,
															Line:   5,
														},
													},
												},
												Name: "column",
											},
											Operator: 14,
											Right: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   5,
														},
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 36,
															Line:   5,
														},
													},
												},
												Value: "_start",
											},
										},
										Operator: 2,
										Right: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 65,
														Line:   5,
													},
													Source: "column == \"_stop\"",
													Start: ast.Position{
														Column: 48,
														Line:   5,
													},
												},
											},
											Left: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   5,
														},
														Source: "column",
														Start: ast.Position{
															Column: 48,
															Line:   5,
														},
													},
												},
												Name: "column",
											},
											Operator: 14,
											Right: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 65,
															Line:   5,
														},
														Source: "\"_stop\"",
														Start: ast.Position{
															Column: 58,
															Line:   5,
														},
													},
												},
												Value: "_stop",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   5,
												},
												Source: "column",
												Start: ast.Position{
													Column: 15,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   5,
													},
													Source: "column",
													Start: ast.Position{
														Column: 15,
														Line:   5,
													},
												},
											},
											Name: "column",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   5,
								},
								Source: "drop(fn: (column) => column == \"_start\" or column == \"_stop\")",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 16,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 128,
						Line:   7,
					},
					Source: "testingTest(name: \"rename_fn\", load: testLoadData, infile: \"rename_fn.in.csv\", outfile: \"rename_fn.out.csv\", test: t_rename_fn)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 127,
								Line:   7,
							},
							Source: "name: \"rename_fn\", load: testLoadData, infile: \"rename_fn.in.csv\", outfile: \"rename_fn.out.csv\", test: t_rename_fn",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   7,
								},
								Source: "name: \"rename_fn\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   7,
									},
									Source: "\"rename_fn\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "rename_fn",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 32,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 32,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 38,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   7,
								},
								Source: "infile: \"rename_fn.in.csv\"",
								Start: ast.Position{
									Column: 52,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 52,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   7,
									},
									Source: "\"rename_fn.in.csv\"",
									Start: ast.Position{
										Column: 60,
										Line:   7,
									},
								},
							},
							Value: "rename_fn.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   7,
								},
								Source: "outfile: \"rename_fn.out.csv\"",
								Start: ast.Position{
									Column: 80,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 87,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 80,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 108,
										Line:   7,
									},
									Source: "\"rename_fn.out.csv\"",
									Start: ast.Position{
										Column: 89,
										Line:   7,
									},
								},
							},
							Value: "rename_fn.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 127,
									Line:   7,
								},
								Source: "test: t_rename_fn",
								Start: ast.Position{
									Column: 110,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 110,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 127,
										Line:   7,
									},
									Source: "t_rename_fn",
									Start: ast.Position{
										Column: 116,
										Line:   7,
									},
								},
							},
							Name: "t_rename_fn",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 128,
							Line:   7,
						},
						Source: "testingTest(name: \"rename_fn\", load: testLoadData, infile: \"rename_fn.in.csv\", outfile: \"rename_fn.out.csv\", test: t_rename_fn)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "rename_fn.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 152,
					Line:   7,
				},
				Source: "t_rename_multiple = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns: {old:\"new\"})\n\t|> rename(columns: {new: \"new1\"})\n\ntestingTest(name: \"rename_multiple\", load: testLoadData, infile: \"rename_multiple.in.csv\", outfile: \"rename_multiple.out.csv\", test: t_rename_multiple)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 35,
						Line:   5,
					},
					Source: "t_rename_multiple = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns: {old:\"new\"})\n\t|> rename(columns: {new: \"new1\"})",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1,
						},
						Source: "t_rename_multiple",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_rename_multiple",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 35,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns: {old:\"new\"})\n\t|> rename(columns: {new: \"new1\"})",
						Start: ast.Position{
							Column: 21,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   3,
									},
									Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 11,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 17,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   3,
										},
										Source: "range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 5,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   4,
								},
								Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns: {old:\"new\"})",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   4,
										},
										Source: "columns: {old:\"new\"}",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   4,
											},
											Source: "columns: {old:\"new\"}",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   4,
												},
												Source: "columns",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   4,
												},
												Source: "{old:\"new\"}",
												Start: ast.Position{
													Column: 21,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   4,
													},
													Source: "old:\"new\"",
													Start: ast.Position{
														Column: 22,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   4,
														},
														Source: "old",
														Start: ast.Position{
															Column: 22,
															Line:   4,
														},
													},
												},
												Name: "old",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   4,
														},
														Source: "\"new\"",
														Start: ast.Position{
															Column: 26,
															Line:   4,
														},
													},
												},
												Value: "new",
											},
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   4,
									},
									Source: "rename(columns: {old:\"new\"})",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "rename",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "rename",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   5,
							},
							Source: "table\n\t|> range(start:2018-05-22T19:53:26Z)\n\t|> rename(columns: {old:\"new\"})\n\t|> rename(columns: {new: \"new1\"})",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   5,
									},
									Source: "columns: {new: \"new1\"}",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   5,
										},
										Source: "columns: {new: \"new1\"}",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   5,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   5,
											},
											Source: "{new: \"new1\"}",
											Start: ast.Position{
												Column: 21,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   5,
												},
												Source: "new: \"new1\"",
												Start: ast.Position{
													Column: 22,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   5,
													},
													Source: "new",
													Start: ast.Position{
														Column: 22,
														Line:   5,
													},
												},
											},
											Name: "new",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   5,
													},
													Source: "\"new1\"",
													Start: ast.Position{
														Column: 27,
														Line:   5,
													},
												},
											},
											Value: "new1",
										},
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   5,
								},
								Source: "rename(columns: {new: \"new1\"})",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   5,
									},
									Source: "rename",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "rename",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 22,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 22,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 152,
						Line:   7,
					},
					Source: "testingTest(name: \"rename_multiple\", load: testLoadData, infile: \"rename_multiple.in.csv\", outfile: \"rename_multiple.out.csv\", test: t_rename_multiple)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 151,
								Line:   7,
							},
							Source: "name: \"rename_multiple\", load: testLoadData, infile: \"rename_multiple.in.csv\", outfile: \"rename_multiple.out.csv\", test: t_rename_multiple",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   7,
								},
								Source: "name: \"rename_multiple\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   7,
									},
									Source: "\"rename_multiple\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "rename_multiple",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 38,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 38,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 44,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   7,
								},
								Source: "infile: \"rename_multiple.in.csv\"",
								Start: ast.Position{
									Column: 58,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 58,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   7,
									},
									Source: "\"rename_multiple.in.csv\"",
									Start: ast.Position{
										Column: 66,
										Line:   7,
									},
								},
							},
							Value: "rename_multiple.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 126,
									Line:   7,
								},
								Source: "outfile: \"rename_multiple.out.csv\"",
								Start: ast.Position{
									Column: 92,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 92,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   7,
									},
									Source: "\"rename_multiple.out.csv\"",
									Start: ast.Position{
										Column: 101,
										Line:   7,
									},
								},
							},
							Value: "rename_multiple.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 151,
									Line:   7,
								},
								Source: "test: t_rename_multiple",
								Start: ast.Position{
									Column: 128,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 128,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 151,
										Line:   7,
									},
									Source: "t_rename_multiple",
									Start: ast.Position{
										Column: 134,
										Line:   7,
									},
								},
							},
							Name: "t_rename_multiple",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 152,
							Line:   7,
						},
						Source: "testingTest(name: \"rename_multiple\", load: testLoadData, infile: \"rename_multiple.in.csv\", outfile: \"rename_multiple.out.csv\", test: t_rename_multiple)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "rename_multiple.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 116,
					Line:   4,
				},
				Source: "t_sample = (table=<-) =>\n  table\n  |> sample(n: 3, pos: 1)\ntestingTest(name: \"sample\", load: testLoadData, infile: \"sample.in.csv\", outfile: \"sample.out.csv\", test: t_sample)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 26,
						Line:   3,
					},
					Source: "t_sample = (table=<-) =>\n  table\n  |> sample(n: 3, pos: 1)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   1,
						},
						Source: "t_sample",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_sample",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 26,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n  |> sample(n: 3, pos: 1)",
						Start: ast.Position{
							Column: 12,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   3,
							},
							Source: "table\n  |> sample(n: 3, pos: 1)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   3,
									},
									Source: "n: 3, pos: 1",
									Start: ast.Position{
										Column: 13,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   3,
										},
										Source: "n: 3",
										Start: ast.Position{
											Column: 13,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   3,
											},
											Source: "n",
											Start: ast.Position{
												Column: 13,
												Line:   3,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   3,
											},
											Source: "3",
											Start: ast.Position{
												Column: 16,
												Line:   3,
											},
										},
									},
									Value: int64(3),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   3,
										},
										Source: "pos: 1",
										Start: ast.Position{
											Column: 19,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   3,
											},
											Source: "pos",
											Start: ast.Position{
												Column: 19,
												Line:   3,
											},
										},
									},
									Name: "pos",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   3,
											},
											Source: "1",
											Start: ast.Position{
												Column: 24,
												Line:   3,
											},
										},
									},
									Value: int64(1),
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   3,
								},
								Source: "sample(n: 3, pos: 1)",
								Start: ast.Position{
									Column: 6,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   3,
									},
									Source: "sample",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Name: "sample",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 13,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 13,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 19,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 116,
						Line:   4,
					},
					Source: "testingTest(name: \"sample\", load: testLoadData, infile: \"sample.in.csv\", outfile: \"sample.out.csv\", test: t_sample)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 115,
								Line:   4,
							},
							Source: "name: \"sample\", load: testLoadData, infile: \"sample.in.csv\", outfile: \"sample.out.csv\", test: t_sample",
							Start: ast.Position{
								Column: 13,
								Line:   4,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   4,
								},
								Source: "name: \"sample\"",
								Start: ast.Position{
									Column: 13,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   4,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   4,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   4,
									},
									Source: "\"sample\"",
									Start: ast.Position{
										Column: 19,
										Line:   4,
									},
								},
							},
							Value: "sample",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   4,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 29,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   4,
									},
									Source: "load",
									Start: ast.Position{
										Column: 29,
										Line:   4,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   4,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 35,
										Line:   4,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   4,
								},
								Source: "infile: \"sample.in.csv\"",
								Start: ast.Position{
									Column: 49,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   4,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 49,
										Line:   4,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   4,
									},
									Source: "\"sample.in.csv\"",
									Start: ast.Position{
										Column: 57,
										Line:   4,
									},
								},
							},
							Value: "sample.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   4,
								},
								Source: "outfile: \"sample.out.csv\"",
								Start: ast.Position{
									Column: 74,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   4,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 74,
										Line:   4,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   4,
									},
									Source: "\"sample.out.csv\"",
									Start: ast.Position{
										Column: 83,
										Line:   4,
									},
								},
							},
							Value: "sample.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   4,
								},
								Source: "test: t_sample",
								Start: ast.Position{
									Column: 101,
									Line:   4,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   4,
									},
									Source: "test",
									Start: ast.Position{
										Column: 101,
										Line:   4,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 115,
										Line:   4,
									},
									Source: "t_sample",
									Start: ast.Position{
										Column: 107,
										Line:   4,
									},
								},
							},
							Name: "t_sample",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 116,
							Line:   4,
						},
						Source: "testingTest(name: \"sample\", load: testLoadData, infile: \"sample.in.csv\", outfile: \"sample.out.csv\", test: t_sample)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "sample.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 164,
					Line:   9,
				},
				Source: "t_select_measurement = (table=<-) =>\n  table\n  |> range(start: 2018-05-21T13:09:22.885021542Z)\n  |> filter(fn: (r) => r._measurement ==  \"swap\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, used_percent:r._value}))\n  |> yield(name:\"0\")\n\ntestingTest(name: \"select_measurement\", load: testLoadData, infile: \"select_measurement.in.csv\", outfile: \"select_measurement.out.csv\", test: t_select_measurement)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   7,
					},
					Source: "t_select_measurement = (table=<-) =>\n  table\n  |> range(start: 2018-05-21T13:09:22.885021542Z)\n  |> filter(fn: (r) => r._measurement ==  \"swap\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, used_percent:r._value}))\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   1,
						},
						Source: "t_select_measurement",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_select_measurement",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-21T13:09:22.885021542Z)\n  |> filter(fn: (r) => r._measurement ==  \"swap\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, used_percent:r._value}))\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 24,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   3,
											},
											Source: "table\n  |> range(start: 2018-05-21T13:09:22.885021542Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   3,
													},
													Source: "start: 2018-05-21T13:09:22.885021542Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   3,
														},
														Source: "start: 2018-05-21T13:09:22.885021542Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   3,
															},
															Source: "2018-05-21T13:09:22.885021542Z",
															Start: ast.Position{
																Column: 19,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   3,
												},
												Source: "range(start: 2018-05-21T13:09:22.885021542Z)",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   4,
										},
										Source: "table\n  |> range(start: 2018-05-21T13:09:22.885021542Z)\n  |> filter(fn: (r) => r._measurement ==  \"swap\")",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   4,
												},
												Source: "fn: (r) => r._measurement ==  \"swap\"",
												Start: ast.Position{
													Column: 13,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   4,
													},
													Source: "fn: (r) => r._measurement ==  \"swap\"",
													Start: ast.Position{
														Column: 13,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   4,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 13,
															Line:   4,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   4,
														},
														Source: "(r) => r._measurement ==  \"swap\"",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   4,
															},
															Source: "r._measurement ==  \"swap\"",
															Start: ast.Position{
																Column: 24,
																Line:   4,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 38,
																	Line:   4,
																},
																Source: "r._measurement",
																Start: ast.Position{
																	Column: 24,
																	Line:   4,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   4,
																	},
																	Source: "r",
																	Start: ast.Position{
																		Column: 24,
																		Line:   4,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   4,
																	},
																	Source: "_measurement",
																	Start: ast.Position{
																		Column: 26,
																		Line:   4,
																	},
																},
															},
															Name: "_measurement",
														},
													},
													Operator: 14,
													Right: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   4,
																},
																Source: "\"swap\"",
																Start: ast.Position{
																	Column: 43,
																	Line:   4,
																},
															},
														},
														Value: "swap",
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   4,
															},
															Source: "r",
															Start: ast.Position{
																Column: 18,
																Line:   4,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 18,
																	Line:   4,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   4,
											},
											Source: "filter(fn: (r) => r._measurement ==  \"swap\")",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   4,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   5,
									},
									Source: "table\n  |> range(start: 2018-05-21T13:09:22.885021542Z)\n  |> filter(fn: (r) => r._measurement ==  \"swap\")\n  |> group(columns: [\"_measurement\", \"_start\"])",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   5,
											},
											Source: "columns: [\"_measurement\", \"_start\"]",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   5,
												},
												Source: "columns: [\"_measurement\", \"_start\"]",
												Start: ast.Position{
													Column: 12,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   5,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 12,
														Line:   5,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   5,
													},
													Source: "[\"_measurement\", \"_start\"]",
													Start: ast.Position{
														Column: 21,
														Line:   5,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   5,
														},
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 22,
															Line:   5,
														},
													},
												},
												Value: "_measurement",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   5,
														},
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 38,
															Line:   5,
														},
													},
												},
												Value: "_start",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   5,
										},
										Source: "group(columns: [\"_measurement\", \"_start\"])",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   5,
											},
											Source: "group",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   6,
								},
								Source: "table\n  |> range(start: 2018-05-21T13:09:22.885021542Z)\n  |> filter(fn: (r) => r._measurement ==  \"swap\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, used_percent:r._value}))",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   6,
										},
										Source: "fn: (r) => ({_time: r._time, used_percent:r._value}",
										Start: ast.Position{
											Column: 10,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   6,
											},
											Source: "fn: (r) => ({_time: r._time, used_percent:r._value}",
											Start: ast.Position{
												Column: 10,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   6,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   6,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   6,
												},
												Source: "(r) => ({_time: r._time, used_percent:r._value}",
												Start: ast.Position{
													Column: 14,
													Line:   6,
												},
											},
										},
										Body: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   6,
													},
													Source: "{_time: r._time, used_percent:r._value}",
													Start: ast.Position{
														Column: 22,
														Line:   6,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   6,
														},
														Source: "_time: r._time",
														Start: ast.Position{
															Column: 23,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   6,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 23,
																Line:   6,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   6,
															},
															Source: "r._time",
															Start: ast.Position{
																Column: 30,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   6,
																},
																Source: "_time",
																Start: ast.Position{
																	Column: 32,
																	Line:   6,
																},
															},
														},
														Name: "_time",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 60,
															Line:   6,
														},
														Source: "used_percent:r._value",
														Start: ast.Position{
															Column: 39,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 51,
																Line:   6,
															},
															Source: "used_percent",
															Start: ast.Position{
																Column: 39,
																Line:   6,
															},
														},
													},
													Name: "used_percent",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   6,
															},
															Source: "r._value",
															Start: ast.Position{
																Column: 52,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 52,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   6,
																},
																Source: "_value",
																Start: ast.Position{
																	Column: 54,
																	Line:   6,
																},
															},
														},
														Name: "_value",
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   6,
													},
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   6,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   6,
														},
														Source: "r",
														Start: ast.Position{
															Column: 15,
															Line:   6,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   6,
									},
									Source: "map(fn: (r) => ({_time: r._time, used_percent:r._value}))",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   6,
										},
										Source: "map",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   7,
							},
							Source: "table\n  |> range(start: 2018-05-21T13:09:22.885021542Z)\n  |> filter(fn: (r) => r._measurement ==  \"swap\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, used_percent:r._value}))\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   7,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   7,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   7,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   7,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   7,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   7,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   7,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 25,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 25,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 31,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 164,
						Line:   9,
					},
					Source: "testingTest(name: \"select_measurement\", load: testLoadData, infile: \"select_measurement.in.csv\", outfile: \"select_measurement.out.csv\", test: t_select_measurement)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 163,
								Line:   9,
							},
							Source: "name: \"select_measurement\", load: testLoadData, infile: \"select_measurement.in.csv\", outfile: \"select_measurement.out.csv\", test: t_select_measurement",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   9,
								},
								Source: "name: \"select_measurement\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   9,
									},
									Source: "\"select_measurement\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "select_measurement",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 41,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 41,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 47,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   9,
								},
								Source: "infile: \"select_measurement.in.csv\"",
								Start: ast.Position{
									Column: 61,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 61,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   9,
									},
									Source: "\"select_measurement.in.csv\"",
									Start: ast.Position{
										Column: 69,
										Line:   9,
									},
								},
							},
							Value: "select_measurement.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   9,
								},
								Source: "outfile: \"select_measurement.out.csv\"",
								Start: ast.Position{
									Column: 98,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 98,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   9,
									},
									Source: "\"select_measurement.out.csv\"",
									Start: ast.Position{
										Column: 107,
										Line:   9,
									},
								},
							},
							Value: "select_measurement.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 163,
									Line:   9,
								},
								Source: "test: t_select_measurement",
								Start: ast.Position{
									Column: 137,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 137,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 163,
										Line:   9,
									},
									Source: "t_select_measurement",
									Start: ast.Position{
										Column: 143,
										Line:   9,
									},
								},
							},
							Name: "t_select_measurement",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 164,
							Line:   9,
						},
						Source: "testingTest(name: \"select_measurement\", load: testLoadData, infile: \"select_measurement.in.csv\", outfile: \"select_measurement.out.csv\", test: t_select_measurement)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "select_measurement.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 188,
					Line:   9,
				},
				Source: "t_select_measurement_field = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, load1:r._value}))\n  |> yield(name:\"0\")\n\ntestingTest(name: \"select_measurement_field\", load: testLoadData, infile: \"select_measurement_field.in.csv\", outfile: \"select_measurement_field.out.csv\", test: t_select_measurement_field)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   7,
					},
					Source: "t_select_measurement_field = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, load1:r._value}))\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   1,
						},
						Source: "t_select_measurement_field",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_select_measurement_field",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, load1:r._value}))\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 30,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   3,
													},
													Source: "start: 2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   3,
														},
														Source: "start: 2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   3,
															},
															Source: "2018-05-22T19:53:26Z",
															Start: ast.Position{
																Column: 19,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "range(start: 2018-05-22T19:53:26Z)",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 76,
											Line:   4,
										},
										Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\")",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 75,
													Line:   4,
												},
												Source: "fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\"",
												Start: ast.Position{
													Column: 13,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   4,
													},
													Source: "fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\"",
													Start: ast.Position{
														Column: 13,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   4,
														},
														Source: "fn",
														Start: ast.Position{
															Column: 13,
															Line:   4,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 75,
															Line:   4,
														},
														Source: "(r) => r._measurement ==  \"system\" and r._field == \"load1\"",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Body: &ast.LogicalExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 75,
																Line:   4,
															},
															Source: "r._measurement ==  \"system\" and r._field == \"load1\"",
															Start: ast.Position{
																Column: 24,
																Line:   4,
															},
														},
													},
													Left: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 51,
																	Line:   4,
																},
																Source: "r._measurement ==  \"system\"",
																Start: ast.Position{
																	Column: 24,
																	Line:   4,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   4,
																	},
																	Source: "r._measurement",
																	Start: ast.Position{
																		Column: 24,
																		Line:   4,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   4,
																		},
																		Source: "r",
																		Start: ast.Position{
																			Column: 24,
																			Line:   4,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   4,
																		},
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 26,
																			Line:   4,
																		},
																	},
																},
																Name: "_measurement",
															},
														},
														Operator: 14,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 51,
																		Line:   4,
																	},
																	Source: "\"system\"",
																	Start: ast.Position{
																		Column: 43,
																		Line:   4,
																	},
																},
															},
															Value: "system",
														},
													},
													Operator: 1,
													Right: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 75,
																	Line:   4,
																},
																Source: "r._field == \"load1\"",
																Start: ast.Position{
																	Column: 56,
																	Line:   4,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 64,
																		Line:   4,
																	},
																	Source: "r._field",
																	Start: ast.Position{
																		Column: 56,
																		Line:   4,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 57,
																			Line:   4,
																		},
																		Source: "r",
																		Start: ast.Position{
																			Column: 56,
																			Line:   4,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 64,
																			Line:   4,
																		},
																		Source: "_field",
																		Start: ast.Position{
																			Column: 58,
																			Line:   4,
																		},
																	},
																},
																Name: "_field",
															},
														},
														Operator: 14,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 75,
																		Line:   4,
																	},
																	Source: "\"load1\"",
																	Start: ast.Position{
																		Column: 68,
																		Line:   4,
																	},
																},
															},
															Value: "load1",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   4,
															},
															Source: "r",
															Start: ast.Position{
																Column: 18,
																Line:   4,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   4,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 18,
																	Line:   4,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   4,
											},
											Source: "filter(fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\")",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   4,
												},
												Source: "filter",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   5,
									},
									Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\")\n  |> group(columns: [\"_measurement\", \"_start\"])",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   5,
											},
											Source: "columns: [\"_measurement\", \"_start\"]",
											Start: ast.Position{
												Column: 12,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   5,
												},
												Source: "columns: [\"_measurement\", \"_start\"]",
												Start: ast.Position{
													Column: 12,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   5,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 12,
														Line:   5,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   5,
													},
													Source: "[\"_measurement\", \"_start\"]",
													Start: ast.Position{
														Column: 21,
														Line:   5,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   5,
														},
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 22,
															Line:   5,
														},
													},
												},
												Value: "_measurement",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   5,
														},
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 38,
															Line:   5,
														},
													},
												},
												Value: "_start",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   5,
										},
										Source: "group(columns: [\"_measurement\", \"_start\"])",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   5,
											},
											Source: "group",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   6,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, load1:r._value}))",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   6,
										},
										Source: "fn: (r) => ({_time: r._time, load1:r._value}",
										Start: ast.Position{
											Column: 10,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   6,
											},
											Source: "fn: (r) => ({_time: r._time, load1:r._value}",
											Start: ast.Position{
												Column: 10,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   6,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   6,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   6,
												},
												Source: "(r) => ({_time: r._time, load1:r._value}",
												Start: ast.Position{
													Column: 14,
													Line:   6,
												},
											},
										},
										Body: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   6,
													},
													Source: "{_time: r._time, load1:r._value}",
													Start: ast.Position{
														Column: 22,
														Line:   6,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   6,
														},
														Source: "_time: r._time",
														Start: ast.Position{
															Column: 23,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   6,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 23,
																Line:   6,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   6,
															},
															Source: "r._time",
															Start: ast.Position{
																Column: 30,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   6,
																},
																Source: "_time",
																Start: ast.Position{
																	Column: 32,
																	Line:   6,
																},
															},
														},
														Name: "_time",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   6,
														},
														Source: "load1:r._value",
														Start: ast.Position{
															Column: 39,
															Line:   6,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   6,
															},
															Source: "load1",
															Start: ast.Position{
																Column: 39,
																Line:   6,
															},
														},
													},
													Name: "load1",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   6,
															},
															Source: "r._value",
															Start: ast.Position{
																Column: 45,
																Line:   6,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   6,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 45,
																	Line:   6,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   6,
																},
																Source: "_value",
																Start: ast.Position{
																	Column: 47,
																	Line:   6,
																},
															},
														},
														Name: "_value",
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   6,
													},
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   6,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   6,
														},
														Source: "r",
														Start: ast.Position{
															Column: 15,
															Line:   6,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   6,
									},
									Source: "map(fn: (r) => ({_time: r._time, load1:r._value}))",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   6,
										},
										Source: "map",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   7,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> filter(fn: (r) => r._measurement ==  \"system\" and r._field == \"load1\")\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> map(fn: (r) => ({_time: r._time, load1:r._value}))\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   7,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   7,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   7,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   7,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   7,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   7,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   7,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 31,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 31,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 37,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 188,
						Line:   9,
					},
					Source: "testingTest(name: \"select_measurement_field\", load: testLoadData, infile: \"select_measurement_field.in.csv\", outfile: \"select_measurement_field.out.csv\", test: t_select_measurement_field)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 187,
								Line:   9,
							},
							Source: "name: \"select_measurement_field\", load: testLoadData, infile: \"select_measurement_field.in.csv\", outfile: \"select_measurement_field.out.csv\", test: t_select_measurement_field",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   9,
								},
								Source: "name: \"select_measurement_field\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   9,
									},
									Source: "\"select_measurement_field\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "select_measurement_field",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 47,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 47,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 53,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   9,
								},
								Source: "infile: \"select_measurement_field.in.csv\"",
								Start: ast.Position{
									Column: 67,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 73,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 67,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 108,
										Line:   9,
									},
									Source: "\"select_measurement_field.in.csv\"",
									Start: ast.Position{
										Column: 75,
										Line:   9,
									},
								},
							},
							Value: "select_measurement_field.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 153,
									Line:   9,
								},
								Source: "outfile: \"select_measurement_field.out.csv\"",
								Start: ast.Position{
									Column: 110,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 110,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 153,
										Line:   9,
									},
									Source: "\"select_measurement_field.out.csv\"",
									Start: ast.Position{
										Column: 119,
										Line:   9,
									},
								},
							},
							Value: "select_measurement_field.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 187,
									Line:   9,
								},
								Source: "test: t_select_measurement_field",
								Start: ast.Position{
									Column: 155,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 159,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 155,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 187,
										Line:   9,
									},
									Source: "t_select_measurement_field",
									Start: ast.Position{
										Column: 161,
										Line:   9,
									},
								},
							},
							Name: "t_select_measurement_field",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 188,
							Line:   9,
						},
						Source: "testingTest(name: \"select_measurement_field\", load: testLoadData, infile: \"select_measurement_field.in.csv\", outfile: \"select_measurement_field.out.csv\", test: t_select_measurement_field)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "select_measurement_field.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 180,
					Line:   7,
				},
				Source: "t_selector_preserve_time = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n\t|> top(n:3)\n\t|> group(columns:[\"host\"])\n\ntestingTest(name: \"selector_preserve_time\", load: testLoadData, infile: \"selector_preserve_time.in.csv\", outfile: \"selector_preserve_time.out.csv\", test: t_selector_preserve_time)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 28,
						Line:   5,
					},
					Source: "t_selector_preserve_time = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n\t|> top(n:3)\n\t|> group(columns:[\"host\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   1,
						},
						Source: "t_selector_preserve_time",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_selector_preserve_time",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   5,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n\t|> top(n:3)\n\t|> group(columns:[\"host\"])",
						Start: ast.Position{
							Column: 28,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   2,
										},
										Source: "table",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   3,
													},
													Source: "start",
													Start: ast.Position{
														Column: 14,
														Line:   3,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   3,
													},
													Source: "2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 20,
														Line:   3,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   3,
										},
										Source: "range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   3,
											},
											Source: "range",
											Start: ast.Position{
												Column: 8,
												Line:   3,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   4,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n\t|> top(n:3)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   4,
										},
										Source: "n:3",
										Start: ast.Position{
											Column: 9,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   4,
											},
											Source: "n:3",
											Start: ast.Position{
												Column: 9,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   4,
												},
												Source: "n",
												Start: ast.Position{
													Column: 9,
													Line:   4,
												},
											},
										},
										Name: "n",
									},
									Value: &ast.IntegerLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   4,
												},
												Source: "3",
												Start: ast.Position{
													Column: 11,
													Line:   4,
												},
											},
										},
										Value: int64(3),
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   4,
									},
									Source: "top(n:3)",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   4,
										},
										Source: "top",
										Start: ast.Position{
											Column: 5,
											Line:   4,
										},
									},
								},
								Name: "top",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   5,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n\t|> top(n:3)\n\t|> group(columns:[\"host\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   5,
									},
									Source: "columns:[\"host\"]",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   5,
										},
										Source: "columns:[\"host\"]",
										Start: ast.Position{
											Column: 11,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   5,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 11,
												Line:   5,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   5,
											},
											Source: "[\"host\"]",
											Start: ast.Position{
												Column: 19,
												Line:   5,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   5,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 20,
													Line:   5,
												},
											},
										},
										Value: "host",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   5,
								},
								Source: "group(columns:[\"host\"])",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   5,
									},
									Source: "group",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "group",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 29,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 29,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 35,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 180,
						Line:   7,
					},
					Source: "testingTest(name: \"selector_preserve_time\", load: testLoadData, infile: \"selector_preserve_time.in.csv\", outfile: \"selector_preserve_time.out.csv\", test: t_selector_preserve_time)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 179,
								Line:   7,
							},
							Source: "name: \"selector_preserve_time\", load: testLoadData, infile: \"selector_preserve_time.in.csv\", outfile: \"selector_preserve_time.out.csv\", test: t_selector_preserve_time",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   7,
								},
								Source: "name: \"selector_preserve_time\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   7,
									},
									Source: "\"selector_preserve_time\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "selector_preserve_time",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 45,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 45,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 51,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 104,
									Line:   7,
								},
								Source: "infile: \"selector_preserve_time.in.csv\"",
								Start: ast.Position{
									Column: 65,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 65,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 104,
										Line:   7,
									},
									Source: "\"selector_preserve_time.in.csv\"",
									Start: ast.Position{
										Column: 73,
										Line:   7,
									},
								},
							},
							Value: "selector_preserve_time.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   7,
								},
								Source: "outfile: \"selector_preserve_time.out.csv\"",
								Start: ast.Position{
									Column: 106,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 113,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 106,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   7,
									},
									Source: "\"selector_preserve_time.out.csv\"",
									Start: ast.Position{
										Column: 115,
										Line:   7,
									},
								},
							},
							Value: "selector_preserve_time.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 179,
									Line:   7,
								},
								Source: "test: t_selector_preserve_time",
								Start: ast.Position{
									Column: 149,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 153,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 149,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 179,
										Line:   7,
									},
									Source: "t_selector_preserve_time",
									Start: ast.Position{
										Column: 155,
										Line:   7,
									},
								},
							},
							Name: "t_selector_preserve_time",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 180,
							Line:   7,
						},
						Source: "testingTest(name: \"selector_preserve_time\", load: testLoadData, infile: \"selector_preserve_time.in.csv\", outfile: \"selector_preserve_time.out.csv\", test: t_selector_preserve_time)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "selector_preserve_time.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 104,
					Line:   7,
				},
				Source: "option now = () => 2018-12-19T22:15:00Z\n\nt_set = (table=<-) => table\n  |> range(start: -5m)\n  |> set(key: \"t0\", value: \"server01\")\n\ntestingTest(name: \"set\", load: testLoadData, infile: \"set.in.csv\", outfile: \"set.out.csv\", test: t_set)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-19T22:15:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-19T22:15:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-19T22:15:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-19T22:15:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 39,
						Line:   5,
					},
					Source: "t_set = (table=<-) => table\n  |> range(start: -5m)\n  |> set(key: \"t0\", value: \"server01\")",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   3,
						},
						Source: "t_set",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_set",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 39,
							Line:   5,
						},
						Source: "(table=<-) => table\n  |> range(start: -5m)\n  |> set(key: \"t0\", value: \"server01\")",
						Start: ast.Position{
							Column: 9,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 23,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   4,
								},
								Source: "table\n  |> range(start: -5m)",
								Start: ast.Position{
									Column: 23,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   4,
										},
										Source: "start: -5m",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "start: -5m",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   4,
													},
													Source: "5m",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(5),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   4,
												},
												Source: "-5m",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   4,
									},
									Source: "range(start: -5m)",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   5,
							},
							Source: "table\n  |> range(start: -5m)\n  |> set(key: \"t0\", value: \"server01\")",
							Start: ast.Position{
								Column: 23,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   5,
									},
									Source: "key: \"t0\", value: \"server01\"",
									Start: ast.Position{
										Column: 10,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   5,
										},
										Source: "key: \"t0\"",
										Start: ast.Position{
											Column: 10,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   5,
											},
											Source: "key",
											Start: ast.Position{
												Column: 10,
												Line:   5,
											},
										},
									},
									Name: "key",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   5,
											},
											Source: "\"t0\"",
											Start: ast.Position{
												Column: 15,
												Line:   5,
											},
										},
									},
									Value: "t0",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   5,
										},
										Source: "value: \"server01\"",
										Start: ast.Position{
											Column: 21,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   5,
											},
											Source: "value",
											Start: ast.Position{
												Column: 21,
												Line:   5,
											},
										},
									},
									Name: "value",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   5,
											},
											Source: "\"server01\"",
											Start: ast.Position{
												Column: 28,
												Line:   5,
											},
										},
									},
									Value: "server01",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   5,
								},
								Source: "set(key: \"t0\", value: \"server01\")",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "set",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "set",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 104,
						Line:   7,
					},
					Source: "testingTest(name: \"set\", load: testLoadData, infile: \"set.in.csv\", outfile: \"set.out.csv\", test: t_set)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   7,
							},
							Source: "name: \"set\", load: testLoadData, infile: \"set.in.csv\", outfile: \"set.out.csv\", test: t_set",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   7,
								},
								Source: "name: \"set\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   7,
									},
									Source: "\"set\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "set",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 26,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 26,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 32,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   7,
								},
								Source: "infile: \"set.in.csv\"",
								Start: ast.Position{
									Column: 46,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 46,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   7,
									},
									Source: "\"set.in.csv\"",
									Start: ast.Position{
										Column: 54,
										Line:   7,
									},
								},
							},
							Value: "set.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   7,
								},
								Source: "outfile: \"set.out.csv\"",
								Start: ast.Position{
									Column: 68,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 68,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   7,
									},
									Source: "\"set.out.csv\"",
									Start: ast.Position{
										Column: 77,
										Line:   7,
									},
								},
							},
							Value: "set.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   7,
								},
								Source: "test: t_set",
								Start: ast.Position{
									Column: 92,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 92,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   7,
									},
									Source: "t_set",
									Start: ast.Position{
										Column: 98,
										Line:   7,
									},
								},
							},
							Name: "t_set",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 104,
							Line:   7,
						},
						Source: "testingTest(name: \"set\", load: testLoadData, infile: \"set.in.csv\", outfile: \"set.out.csv\", test: t_set)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "set.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 148,
					Line:   7,
				},
				Source: "option now = () => 2018-12-19T22:15:00Z\n\nt_set_new_column = (table=<-) => table\n  |> range(start: -5m)\n  |> set(key: \"t1\", value: \"server01\")\n\ntestingTest(name: \"set_new_column\", load: testLoadData, infile: \"set_new_column.in.csv\", outfile: \"set_new_column.out.csv\", test: t_set_new_column)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-19T22:15:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-19T22:15:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-19T22:15:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-19T22:15:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 39,
						Line:   5,
					},
					Source: "t_set_new_column = (table=<-) => table\n  |> range(start: -5m)\n  |> set(key: \"t1\", value: \"server01\")",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						Source: "t_set_new_column",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_set_new_column",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 39,
							Line:   5,
						},
						Source: "(table=<-) => table\n  |> range(start: -5m)\n  |> set(key: \"t1\", value: \"server01\")",
						Start: ast.Position{
							Column: 20,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 34,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   4,
								},
								Source: "table\n  |> range(start: -5m)",
								Start: ast.Position{
									Column: 34,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   4,
										},
										Source: "start: -5m",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "start: -5m",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   4,
													},
													Source: "5m",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(5),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   4,
												},
												Source: "-5m",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   4,
									},
									Source: "range(start: -5m)",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   5,
							},
							Source: "table\n  |> range(start: -5m)\n  |> set(key: \"t1\", value: \"server01\")",
							Start: ast.Position{
								Column: 34,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   5,
									},
									Source: "key: \"t1\", value: \"server01\"",
									Start: ast.Position{
										Column: 10,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   5,
										},
										Source: "key: \"t1\"",
										Start: ast.Position{
											Column: 10,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   5,
											},
											Source: "key",
											Start: ast.Position{
												Column: 10,
												Line:   5,
											},
										},
									},
									Name: "key",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   5,
											},
											Source: "\"t1\"",
											Start: ast.Position{
												Column: 15,
												Line:   5,
											},
										},
									},
									Value: "t1",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   5,
										},
										Source: "value: \"server01\"",
										Start: ast.Position{
											Column: 21,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   5,
											},
											Source: "value",
											Start: ast.Position{
												Column: 21,
												Line:   5,
											},
										},
									},
									Name: "value",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   5,
											},
											Source: "\"server01\"",
											Start: ast.Position{
												Column: 28,
												Line:   5,
											},
										},
									},
									Value: "server01",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   5,
								},
								Source: "set(key: \"t1\", value: \"server01\")",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "set",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "set",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 21,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 21,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 148,
						Line:   7,
					},
					Source: "testingTest(name: \"set_new_column\", load: testLoadData, infile: \"set_new_column.in.csv\", outfile: \"set_new_column.out.csv\", test: t_set_new_column)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 147,
								Line:   7,
							},
							Source: "name: \"set_new_column\", load: testLoadData, infile: \"set_new_column.in.csv\", outfile: \"set_new_column.out.csv\", test: t_set_new_column",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   7,
								},
								Source: "name: \"set_new_column\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   7,
									},
									Source: "\"set_new_column\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "set_new_column",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 37,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 37,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 43,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   7,
								},
								Source: "infile: \"set_new_column.in.csv\"",
								Start: ast.Position{
									Column: 57,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 57,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   7,
									},
									Source: "\"set_new_column.in.csv\"",
									Start: ast.Position{
										Column: 65,
										Line:   7,
									},
								},
							},
							Value: "set_new_column.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   7,
								},
								Source: "outfile: \"set_new_column.out.csv\"",
								Start: ast.Position{
									Column: 90,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 90,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   7,
									},
									Source: "\"set_new_column.out.csv\"",
									Start: ast.Position{
										Column: 99,
										Line:   7,
									},
								},
							},
							Value: "set_new_column.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   7,
								},
								Source: "test: t_set_new_column",
								Start: ast.Position{
									Column: 125,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 125,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   7,
									},
									Source: "t_set_new_column",
									Start: ast.Position{
										Column: 131,
										Line:   7,
									},
								},
							},
							Name: "t_set_new_column",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 148,
							Line:   7,
						},
						Source: "testingTest(name: \"set_new_column\", load: testLoadData, infile: \"set_new_column.in.csv\", outfile: \"set_new_column.out.csv\", test: t_set_new_column)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "set_new_column.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   10,
				},
				Source: "t_shift = (table=<-) => table\n  |> shift(shift: 120s)\n\ntestingTest(\n    name: \"shift\",\n    load: testLoadData,\n    infile: \"shift.in.csv\",\n    outfile: \"shift.out.csv\",\n    test: t_shift,\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 24,
						Line:   2,
					},
					Source: "t_shift = (table=<-) => table\n  |> shift(shift: 120s)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   1,
						},
						Source: "t_shift",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_shift",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 24,
							Line:   2,
						},
						Source: "(table=<-) => table\n  |> shift(shift: 120s)",
						Start: ast.Position{
							Column: 11,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 25,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   2,
							},
							Source: "table\n  |> shift(shift: 120s)",
							Start: ast.Position{
								Column: 25,
								Line:   1,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   2,
									},
									Source: "shift: 120s",
									Start: ast.Position{
										Column: 12,
										Line:   2,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   2,
										},
										Source: "shift: 120s",
										Start: ast.Position{
											Column: 12,
											Line:   2,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   2,
											},
											Source: "shift",
											Start: ast.Position{
												Column: 12,
												Line:   2,
											},
										},
									},
									Name: "shift",
								},
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   2,
											},
											Source: "120s",
											Start: ast.Position{
												Column: 19,
												Line:   2,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(120),
										Unit:      "s",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   2,
								},
								Source: "shift(shift: 120s)",
								Start: ast.Position{
									Column: 6,
									Line:   2,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   2,
									},
									Source: "shift",
									Start: ast.Position{
										Column: 6,
										Line:   2,
									},
								},
							},
							Name: "shift",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 12,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 12,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   10,
					},
					Source: "testingTest(\n    name: \"shift\",\n    load: testLoadData,\n    infile: \"shift.in.csv\",\n    outfile: \"shift.out.csv\",\n    test: t_shift,\n)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   9,
							},
							Source: "name: \"shift\",\n    load: testLoadData,\n    infile: \"shift.in.csv\",\n    outfile: \"shift.out.csv\",\n    test: t_shift",
							Start: ast.Position{
								Column: 5,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   5,
								},
								Source: "name: \"shift\"",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   5,
									},
									Source: "\"shift\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Value: "shift",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   7,
								},
								Source: "infile: \"shift.in.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   7,
									},
									Source: "\"shift.in.csv\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Value: "shift.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   8,
								},
								Source: "outfile: \"shift.out.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   8,
									},
									Source: "\"shift.out.csv\"",
									Start: ast.Position{
										Column: 14,
										Line:   8,
									},
								},
							},
							Value: "shift.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   9,
								},
								Source: "test: t_shift",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   9,
									},
									Source: "t_shift",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Name: "t_shift",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   10,
						},
						Source: "testingTest(\n    name: \"shift\",\n    load: testLoadData,\n    infile: \"shift.in.csv\",\n    outfile: \"shift.out.csv\",\n    test: t_shift,\n)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "shift.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   10,
				},
				Source: "t_shift_negative_duration = (table=<-) => table\n  |> shift(shift: -5m)\n\ntestingTest(\n    name: \"shift_negative_duration\",\n    load: testLoadData,\n    infile: \"shift_negative_duration.in.csv\",\n    outfile: \"shift_negative_duration.out.csv\",\n    test: t_shift_negative_duration,\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 23,
						Line:   2,
					},
					Source: "t_shift_negative_duration = (table=<-) => table\n  |> shift(shift: -5m)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 26,
							Line:   1,
						},
						Source: "t_shift_negative_duration",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_shift_negative_duration",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   2,
						},
						Source: "(table=<-) => table\n  |> shift(shift: -5m)",
						Start: ast.Position{
							Column: 29,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 43,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   2,
							},
							Source: "table\n  |> shift(shift: -5m)",
							Start: ast.Position{
								Column: 43,
								Line:   1,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   2,
									},
									Source: "shift: -5m",
									Start: ast.Position{
										Column: 12,
										Line:   2,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   2,
										},
										Source: "shift: -5m",
										Start: ast.Position{
											Column: 12,
											Line:   2,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   2,
											},
											Source: "shift",
											Start: ast.Position{
												Column: 12,
												Line:   2,
											},
										},
									},
									Name: "shift",
								},
								Value: &ast.UnaryExpression{
									Argument: &ast.DurationLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   2,
												},
												Source: "5m",
												Start: ast.Position{
													Column: 20,
													Line:   2,
												},
											},
										},
										Values: []ast.Duration{ast.Duration{
											Magnitude: int64(5),
											Unit:      "m",
										}},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   2,
											},
											Source: "-5m",
											Start: ast.Position{
												Column: 19,
												Line:   2,
											},
										},
									},
									Operator: 4,
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   2,
								},
								Source: "shift(shift: -5m)",
								Start: ast.Position{
									Column: 6,
									Line:   2,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   2,
									},
									Source: "shift",
									Start: ast.Position{
										Column: 6,
										Line:   2,
									},
								},
							},
							Name: "shift",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 30,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 30,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 36,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   10,
					},
					Source: "testingTest(\n    name: \"shift_negative_duration\",\n    load: testLoadData,\n    infile: \"shift_negative_duration.in.csv\",\n    outfile: \"shift_negative_duration.out.csv\",\n    test: t_shift_negative_duration,\n)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   9,
							},
							Source: "name: \"shift_negative_duration\",\n    load: testLoadData,\n    infile: \"shift_negative_duration.in.csv\",\n    outfile: \"shift_negative_duration.out.csv\",\n    test: t_shift_negative_duration",
							Start: ast.Position{
								Column: 5,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   5,
								},
								Source: "name: \"shift_negative_duration\"",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   5,
									},
									Source: "\"shift_negative_duration\"",
									Start: ast.Position{
										Column: 11,
										Line:   5,
									},
								},
							},
							Value: "shift_negative_duration",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 11,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   7,
								},
								Source: "infile: \"shift_negative_duration.in.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   7,
									},
									Source: "\"shift_negative_duration.in.csv\"",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Value: "shift_negative_duration.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   8,
								},
								Source: "outfile: \"shift_negative_duration.out.csv\"",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   8,
									},
									Source: "\"shift_negative_duration.out.csv\"",
									Start: ast.Position{
										Column: 14,
										Line:   8,
									},
								},
							},
							Value: "shift_negative_duration.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   9,
								},
								Source: "test: t_shift_negative_duration",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   9,
									},
									Source: "t_shift_negative_duration",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Name: "t_shift_negative_duration",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   10,
						},
						Source: "testingTest(\n    name: \"shift_negative_duration\",\n    load: testLoadData,\n    infile: \"shift_negative_duration.in.csv\",\n    outfile: \"shift_negative_duration.out.csv\",\n    test: t_shift_negative_duration,\n)",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   4,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   4,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "shift_negative_duration.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 160,
					Line:   8,
				},
				Source: "t_show_all_tag_keys = (table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:26Z)\n  |> keys(except: [\"_time\",\"_value\",\"_start\",\"_stop\"])\n  |> group()\n  |> distinct()\n  |> map(fn:(r) => r._value)\ntestingTest(name: \"show_all_tag_keys\", load: testLoadData, infile: \"show_all_tag_keys.in.csv\", outfile: \"show_all_tag_keys.out.csv\", test: t_show_all_tag_keys)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   7,
					},
					Source: "t_show_all_tag_keys = (table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:26Z)\n  |> keys(except: [\"_time\",\"_value\",\"_start\",\"_stop\"])\n  |> group()\n  |> distinct()\n  |> map(fn:(r) => r._value)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   1,
						},
						Source: "t_show_all_tag_keys",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_show_all_tag_keys",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:26Z)\n  |> keys(except: [\"_time\",\"_value\",\"_start\",\"_stop\"])\n  |> group()\n  |> distinct()\n  |> map(fn:(r) => r._value)",
						Start: ast.Position{
							Column: 23,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "table\n  |> range(start:2018-05-22T19:53:26Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   3,
													},
													Source: "start:2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   3,
														},
														Source: "start:2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   3,
															},
															Source: "2018-05-22T19:53:26Z",
															Start: ast.Position{
																Column: 18,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "range(start:2018-05-22T19:53:26Z)",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   4,
										},
										Source: "table\n  |> range(start:2018-05-22T19:53:26Z)\n  |> keys(except: [\"_time\",\"_value\",\"_start\",\"_stop\"])",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   4,
												},
												Source: "except: [\"_time\",\"_value\",\"_start\",\"_stop\"]",
												Start: ast.Position{
													Column: 11,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   4,
													},
													Source: "except: [\"_time\",\"_value\",\"_start\",\"_stop\"]",
													Start: ast.Position{
														Column: 11,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   4,
														},
														Source: "except",
														Start: ast.Position{
															Column: 11,
															Line:   4,
														},
													},
												},
												Name: "except",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   4,
														},
														Source: "[\"_time\",\"_value\",\"_start\",\"_stop\"]",
														Start: ast.Position{
															Column: 19,
															Line:   4,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 27,
																Line:   4,
															},
															Source: "\"_time\"",
															Start: ast.Position{
																Column: 20,
																Line:   4,
															},
														},
													},
													Value: "_time",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   4,
															},
															Source: "\"_value\"",
															Start: ast.Position{
																Column: 28,
																Line:   4,
															},
														},
													},
													Value: "_value",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   4,
															},
															Source: "\"_start\"",
															Start: ast.Position{
																Column: 37,
																Line:   4,
															},
														},
													},
													Value: "_start",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   4,
															},
															Source: "\"_stop\"",
															Start: ast.Position{
																Column: 46,
																Line:   4,
															},
														},
													},
													Value: "_stop",
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   4,
											},
											Source: "keys(except: [\"_time\",\"_value\",\"_start\",\"_stop\"])",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   4,
												},
												Source: "keys",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Name: "keys",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   5,
									},
									Source: "table\n  |> range(start:2018-05-22T19:53:26Z)\n  |> keys(except: [\"_time\",\"_value\",\"_start\",\"_stop\"])\n  |> group()",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   5,
										},
										Source: "group()",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   5,
											},
											Source: "group",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   6,
								},
								Source: "table\n  |> range(start:2018-05-22T19:53:26Z)\n  |> keys(except: [\"_time\",\"_value\",\"_start\",\"_stop\"])\n  |> group()\n  |> distinct()",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   6,
									},
									Source: "distinct()",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   6,
										},
										Source: "distinct",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Name: "distinct",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   7,
							},
							Source: "table\n  |> range(start:2018-05-22T19:53:26Z)\n  |> keys(except: [\"_time\",\"_value\",\"_start\",\"_stop\"])\n  |> group()\n  |> distinct()\n  |> map(fn:(r) => r._value)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   7,
									},
									Source: "fn:(r) => r._value",
									Start: ast.Position{
										Column: 10,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   7,
										},
										Source: "fn:(r) => r._value",
										Start: ast.Position{
											Column: 10,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   7,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 10,
												Line:   7,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   7,
											},
											Source: "(r) => r._value",
											Start: ast.Position{
												Column: 13,
												Line:   7,
											},
										},
									},
									Body: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   7,
												},
												Source: "r._value",
												Start: ast.Position{
													Column: 20,
													Line:   7,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   7,
													},
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   7,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   7,
													},
													Source: "_value",
													Start: ast.Position{
														Column: 22,
														Line:   7,
													},
												},
											},
											Name: "_value",
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   7,
												},
												Source: "r",
												Start: ast.Position{
													Column: 14,
													Line:   7,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   7,
													},
													Source: "r",
													Start: ast.Position{
														Column: 14,
														Line:   7,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   7,
								},
								Source: "map(fn:(r) => r._value)",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   7,
									},
									Source: "map",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 24,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 24,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 30,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 160,
						Line:   8,
					},
					Source: "testingTest(name: \"show_all_tag_keys\", load: testLoadData, infile: \"show_all_tag_keys.in.csv\", outfile: \"show_all_tag_keys.out.csv\", test: t_show_all_tag_keys)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 159,
								Line:   8,
							},
							Source: "name: \"show_all_tag_keys\", load: testLoadData, infile: \"show_all_tag_keys.in.csv\", outfile: \"show_all_tag_keys.out.csv\", test: t_show_all_tag_keys",
							Start: ast.Position{
								Column: 13,
								Line:   8,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   8,
								},
								Source: "name: \"show_all_tag_keys\"",
								Start: ast.Position{
									Column: 13,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   8,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   8,
									},
									Source: "\"show_all_tag_keys\"",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Value: "show_all_tag_keys",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   8,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 40,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   8,
									},
									Source: "load",
									Start: ast.Position{
										Column: 40,
										Line:   8,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   8,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 46,
										Line:   8,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   8,
								},
								Source: "infile: \"show_all_tag_keys.in.csv\"",
								Start: ast.Position{
									Column: 60,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   8,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 60,
										Line:   8,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 94,
										Line:   8,
									},
									Source: "\"show_all_tag_keys.in.csv\"",
									Start: ast.Position{
										Column: 68,
										Line:   8,
									},
								},
							},
							Value: "show_all_tag_keys.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 132,
									Line:   8,
								},
								Source: "outfile: \"show_all_tag_keys.out.csv\"",
								Start: ast.Position{
									Column: 96,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 96,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   8,
									},
									Source: "\"show_all_tag_keys.out.csv\"",
									Start: ast.Position{
										Column: 105,
										Line:   8,
									},
								},
							},
							Value: "show_all_tag_keys.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 159,
									Line:   8,
								},
								Source: "test: t_show_all_tag_keys",
								Start: ast.Position{
									Column: 134,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 138,
										Line:   8,
									},
									Source: "test",
									Start: ast.Position{
										Column: 134,
										Line:   8,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 159,
										Line:   8,
									},
									Source: "t_show_all_tag_keys",
									Start: ast.Position{
										Column: 140,
										Line:   8,
									},
								},
							},
							Name: "t_show_all_tag_keys",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 160,
							Line:   8,
						},
						Source: "testingTest(name: \"show_all_tag_keys\", load: testLoadData, infile: \"show_all_tag_keys.in.csv\", outfile: \"show_all_tag_keys.out.csv\", test: t_show_all_tag_keys)",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   8,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   8,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "show_all_tag_keys.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 130,
					Line:   8,
				},
				Source: "simple_max = (table=<-) =>\n  table\n  |> range(start:2018-04-17T00:00:00Z)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> max(column: \"_value\")\n  |> map(fn: (r) => ({_time: r._time,max:r._value}))\n\ntestingTest(name: \"simple_max\", load: testLoadData, infile: \"simple_max.in.csv\", outfile: \"simple_max.out.csv\", test: simple_max)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 53,
						Line:   6,
					},
					Source: "simple_max = (table=<-) =>\n  table\n  |> range(start:2018-04-17T00:00:00Z)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> max(column: \"_value\")\n  |> map(fn: (r) => ({_time: r._time,max:r._value}))",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   1,
						},
						Source: "simple_max",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "simple_max",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 53,
							Line:   6,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start:2018-04-17T00:00:00Z)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> max(column: \"_value\")\n  |> map(fn: (r) => ({_time: r._time,max:r._value}))",
						Start: ast.Position{
							Column: 14,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 8,
												Line:   2,
											},
											Source: "table",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Name: "table",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "table\n  |> range(start:2018-04-17T00:00:00Z)",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   3,
												},
												Source: "start:2018-04-17T00:00:00Z",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   3,
													},
													Source: "start:2018-04-17T00:00:00Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   3,
														},
														Source: "start",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Name: "start",
											},
											Value: &ast.DateTimeLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   3,
														},
														Source: "2018-04-17T00:00:00Z",
														Start: ast.Position{
															Column: 18,
															Line:   3,
														},
													},
												},
												Value: time.Time{},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "range(start:2018-04-17T00:00:00Z)",
											Start: ast.Position{
												Column: 6,
												Line:   3,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   3,
												},
												Source: "range",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Name: "range",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   4,
									},
									Source: "table\n  |> range(start:2018-04-17T00:00:00Z)\n  |> group(columns: [\"_measurement\", \"_start\"])",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   4,
											},
											Source: "columns: [\"_measurement\", \"_start\"]",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   4,
												},
												Source: "columns: [\"_measurement\", \"_start\"]",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   4,
													},
													Source: "columns",
													Start: ast.Position{
														Column: 12,
														Line:   4,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   4,
													},
													Source: "[\"_measurement\", \"_start\"]",
													Start: ast.Position{
														Column: 21,
														Line:   4,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   4,
														},
														Source: "\"_measurement\"",
														Start: ast.Position{
															Column: 22,
															Line:   4,
														},
													},
												},
												Value: "_measurement",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   4,
														},
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 38,
															Line:   4,
														},
													},
												},
												Value: "_start",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   4,
										},
										Source: "group(columns: [\"_measurement\", \"_start\"])",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   4,
											},
											Source: "group",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   5,
								},
								Source: "table\n  |> range(start:2018-04-17T00:00:00Z)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> max(column: \"_value\")",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   5,
										},
										Source: "column: \"_value\"",
										Start: ast.Position{
											Column: 10,
											Line:   5,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   5,
											},
											Source: "column: \"_value\"",
											Start: ast.Position{
												Column: 10,
												Line:   5,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   5,
												},
												Source: "column",
												Start: ast.Position{
													Column: 10,
													Line:   5,
												},
											},
										},
										Name: "column",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   5,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 18,
													Line:   5,
												},
											},
										},
										Value: "_value",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   5,
									},
									Source: "max(column: \"_value\")",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   5,
										},
										Source: "max",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Name: "max",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 53,
								Line:   6,
							},
							Source: "table\n  |> range(start:2018-04-17T00:00:00Z)\n  |> group(columns: [\"_measurement\", \"_start\"])\n  |> max(column: \"_value\")\n  |> map(fn: (r) => ({_time: r._time,max:r._value}))",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   6,
									},
									Source: "fn: (r) => ({_time: r._time,max:r._value}",
									Start: ast.Position{
										Column: 10,
										Line:   6,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   6,
										},
										Source: "fn: (r) => ({_time: r._time,max:r._value}",
										Start: ast.Position{
											Column: 10,
											Line:   6,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   6,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 10,
												Line:   6,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   6,
											},
											Source: "(r) => ({_time: r._time,max:r._value}",
											Start: ast.Position{
												Column: 14,
												Line:   6,
											},
										},
									},
									Body: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   6,
												},
												Source: "{_time: r._time,max:r._value}",
												Start: ast.Position{
													Column: 22,
													Line:   6,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   6,
													},
													Source: "_time: r._time",
													Start: ast.Position{
														Column: 23,
														Line:   6,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   6,
														},
														Source: "_time",
														Start: ast.Position{
															Column: 23,
															Line:   6,
														},
													},
												},
												Name: "_time",
											},
											Value: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   6,
														},
														Source: "r._time",
														Start: ast.Position{
															Column: 30,
															Line:   6,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   6,
															},
															Source: "r",
															Start: ast.Position{
																Column: 30,
																Line:   6,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   6,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 32,
																Line:   6,
															},
														},
													},
													Name: "_time",
												},
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 50,
														Line:   6,
													},
													Source: "max:r._value",
													Start: ast.Position{
														Column: 38,
														Line:   6,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   6,
														},
														Source: "max",
														Start: ast.Position{
															Column: 38,
															Line:   6,
														},
													},
												},
												Name: "max",
											},
											Value: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   6,
														},
														Source: "r._value",
														Start: ast.Position{
															Column: 42,
															Line:   6,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   6,
															},
															Source: "r",
															Start: ast.Position{
																Column: 42,
																Line:   6,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 50,
																Line:   6,
															},
															Source: "_value",
															Start: ast.Position{
																Column: 44,
																Line:   6,
															},
														},
													},
													Name: "_value",
												},
											},
										}},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   6,
												},
												Source: "r",
												Start: ast.Position{
													Column: 15,
													Line:   6,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   6,
													},
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   6,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   6,
								},
								Source: "map(fn: (r) => ({_time: r._time,max:r._value}))",
								Start: ast.Position{
									Column: 6,
									Line:   6,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   6,
									},
									Source: "map",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 15,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 15,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 130,
						Line:   8,
					},
					Source: "testingTest(name: \"simple_max\", load: testLoadData, infile: \"simple_max.in.csv\", outfile: \"simple_max.out.csv\", test: simple_max)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 129,
								Line:   8,
							},
							Source: "name: \"simple_max\", load: testLoadData, infile: \"simple_max.in.csv\", outfile: \"simple_max.out.csv\", test: simple_max",
							Start: ast.Position{
								Column: 13,
								Line:   8,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   8,
								},
								Source: "name: \"simple_max\"",
								Start: ast.Position{
									Column: 13,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   8,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   8,
									},
									Source: "\"simple_max\"",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Value: "simple_max",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   8,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 33,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   8,
									},
									Source: "load",
									Start: ast.Position{
										Column: 33,
										Line:   8,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   8,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 39,
										Line:   8,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   8,
								},
								Source: "infile: \"simple_max.in.csv\"",
								Start: ast.Position{
									Column: 53,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   8,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 53,
										Line:   8,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   8,
									},
									Source: "\"simple_max.in.csv\"",
									Start: ast.Position{
										Column: 61,
										Line:   8,
									},
								},
							},
							Value: "simple_max.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   8,
								},
								Source: "outfile: \"simple_max.out.csv\"",
								Start: ast.Position{
									Column: 82,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 82,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   8,
									},
									Source: "\"simple_max.out.csv\"",
									Start: ast.Position{
										Column: 91,
										Line:   8,
									},
								},
							},
							Value: "simple_max.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 129,
									Line:   8,
								},
								Source: "test: simple_max",
								Start: ast.Position{
									Column: 113,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   8,
									},
									Source: "test",
									Start: ast.Position{
										Column: 113,
										Line:   8,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   8,
									},
									Source: "simple_max",
									Start: ast.Position{
										Column: 119,
										Line:   8,
									},
								},
							},
							Name: "simple_max",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 130,
							Line:   8,
						},
						Source: "testingTest(name: \"simple_max\", load: testLoadData, infile: \"simple_max.in.csv\", outfile: \"simple_max.out.csv\", test: simple_max)",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   8,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   8,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "simple_max.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 108,
					Line:   7,
				},
				Source: "option now = () => 2018-12-18T22:12:00Z\n\nt_skew = (table=<-) => table\n  |> range(start: -5m)\n  |> skew()\n\ntestingTest(name: \"skew\", load: testLoadData, infile: \"skew.in.csv\", outfile: \"skew.out.csv\", test: t_skew)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-18T22:12:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-18T22:12:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-18T22:12:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-18T22:12:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   5,
					},
					Source: "t_skew = (table=<-) => table\n  |> range(start: -5m)\n  |> skew()",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   3,
						},
						Source: "t_skew",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_skew",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   5,
						},
						Source: "(table=<-) => table\n  |> range(start: -5m)\n  |> skew()",
						Start: ast.Position{
							Column: 10,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 24,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   4,
								},
								Source: "table\n  |> range(start: -5m)",
								Start: ast.Position{
									Column: 24,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   4,
										},
										Source: "start: -5m",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "start: -5m",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   4,
													},
													Source: "5m",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(5),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   4,
												},
												Source: "-5m",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   4,
									},
									Source: "range(start: -5m)",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   5,
							},
							Source: "table\n  |> range(start: -5m)\n  |> skew()",
							Start: ast.Position{
								Column: 24,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   5,
								},
								Source: "skew()",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   5,
									},
									Source: "skew",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "skew",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 11,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 11,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 17,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 108,
						Line:   7,
					},
					Source: "testingTest(name: \"skew\", load: testLoadData, infile: \"skew.in.csv\", outfile: \"skew.out.csv\", test: t_skew)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 107,
								Line:   7,
							},
							Source: "name: \"skew\", load: testLoadData, infile: \"skew.in.csv\", outfile: \"skew.out.csv\", test: t_skew",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   7,
								},
								Source: "name: \"skew\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   7,
									},
									Source: "\"skew\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "skew",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 27,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 27,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 33,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   7,
								},
								Source: "infile: \"skew.in.csv\"",
								Start: ast.Position{
									Column: 47,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 47,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   7,
									},
									Source: "\"skew.in.csv\"",
									Start: ast.Position{
										Column: 55,
										Line:   7,
									},
								},
							},
							Value: "skew.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   7,
								},
								Source: "outfile: \"skew.out.csv\"",
								Start: ast.Position{
									Column: 70,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 70,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   7,
									},
									Source: "\"skew.out.csv\"",
									Start: ast.Position{
										Column: 79,
										Line:   7,
									},
								},
							},
							Value: "skew.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   7,
								},
								Source: "test: t_skew",
								Start: ast.Position{
									Column: 95,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 95,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 107,
										Line:   7,
									},
									Source: "t_skew",
									Start: ast.Position{
										Column: 101,
										Line:   7,
									},
								},
							},
							Name: "t_skew",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 108,
							Line:   7,
						},
						Source: "testingTest(name: \"skew\", load: testLoadData, infile: \"skew.in.csv\", outfile: \"skew.out.csv\", test: t_skew)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "skew.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 108,
					Line:   6,
				},
				Source: "t_sort = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> sort(columns:[\"_value\", \"_time\"])\n\ntestingTest(name: \"sort\", load: testLoadData, infile: \"sort.in.csv\", outfile: \"sort.out.csv\", test: t_sort)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 39,
						Line:   4,
					},
					Source: "t_sort = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> sort(columns:[\"_value\", \"_time\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   1,
						},
						Source: "t_sort",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_sort",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 39,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> sort(columns:[\"_value\", \"_time\"])",
						Start: ast.Position{
							Column: 10,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   3,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "start: 2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 12,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 12,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 19,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   3,
									},
									Source: "range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   4,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> sort(columns:[\"_value\", \"_time\"])",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   4,
									},
									Source: "columns:[\"_value\", \"_time\"]",
									Start: ast.Position{
										Column: 11,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   4,
										},
										Source: "columns:[\"_value\", \"_time\"]",
										Start: ast.Position{
											Column: 11,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   4,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 11,
												Line:   4,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   4,
											},
											Source: "[\"_value\", \"_time\"]",
											Start: ast.Position{
												Column: 19,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   4,
												},
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 20,
													Line:   4,
												},
											},
										},
										Value: "_value",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   4,
												},
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 30,
													Line:   4,
												},
											},
										},
										Value: "_time",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   4,
								},
								Source: "sort(columns:[\"_value\", \"_time\"])",
								Start: ast.Position{
									Column: 6,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   4,
									},
									Source: "sort",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Name: "sort",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 11,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 11,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 108,
						Line:   6,
					},
					Source: "testingTest(name: \"sort\", load: testLoadData, infile: \"sort.in.csv\", outfile: \"sort.out.csv\", test: t_sort)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 107,
								Line:   6,
							},
							Source: "name: \"sort\", load: testLoadData, infile: \"sort.in.csv\", outfile: \"sort.out.csv\", test: t_sort",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   6,
								},
								Source: "name: \"sort\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   6,
									},
									Source: "\"sort\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "sort",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 27,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 27,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 33,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   6,
								},
								Source: "infile: \"sort.in.csv\"",
								Start: ast.Position{
									Column: 47,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 47,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   6,
									},
									Source: "\"sort.in.csv\"",
									Start: ast.Position{
										Column: 55,
										Line:   6,
									},
								},
							},
							Value: "sort.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   6,
								},
								Source: "outfile: \"sort.out.csv\"",
								Start: ast.Position{
									Column: 70,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 70,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   6,
									},
									Source: "\"sort.out.csv\"",
									Start: ast.Position{
										Column: 79,
										Line:   6,
									},
								},
							},
							Value: "sort.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   6,
								},
								Source: "test: t_sort",
								Start: ast.Position{
									Column: 95,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 95,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 107,
										Line:   6,
									},
									Source: "t_sort",
									Start: ast.Position{
										Column: 101,
										Line:   6,
									},
								},
							},
							Name: "t_sort",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 108,
							Line:   6,
						},
						Source: "testingTest(name: \"sort\", load: testLoadData, infile: \"sort.in.csv\", outfile: \"sort.out.csv\", test: t_sort)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "sort.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 116,
					Line:   7,
				},
				Source: "option now = () => 2018-12-18T22:12:00Z\n\nt_spread = (table=<-) => table\n  |> range(start: -5m)\n  |> spread()\n\ntestingTest(name: \"spread\", load: testLoadData, infile: \"spread.in.csv\", outfile: \"spread.out.csv\", test: t_spread)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-18T22:12:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-18T22:12:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-18T22:12:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-18T22:12:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   5,
					},
					Source: "t_spread = (table=<-) => table\n  |> range(start: -5m)\n  |> spread()",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   3,
						},
						Source: "t_spread",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_spread",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   5,
						},
						Source: "(table=<-) => table\n  |> range(start: -5m)\n  |> spread()",
						Start: ast.Position{
							Column: 12,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 26,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   4,
								},
								Source: "table\n  |> range(start: -5m)",
								Start: ast.Position{
									Column: 26,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   4,
										},
										Source: "start: -5m",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "start: -5m",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   4,
													},
													Source: "5m",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(5),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   4,
												},
												Source: "-5m",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   4,
									},
									Source: "range(start: -5m)",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   5,
							},
							Source: "table\n  |> range(start: -5m)\n  |> spread()",
							Start: ast.Position{
								Column: 26,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   5,
								},
								Source: "spread()",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   5,
									},
									Source: "spread",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "spread",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 13,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 13,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 19,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 116,
						Line:   7,
					},
					Source: "testingTest(name: \"spread\", load: testLoadData, infile: \"spread.in.csv\", outfile: \"spread.out.csv\", test: t_spread)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 115,
								Line:   7,
							},
							Source: "name: \"spread\", load: testLoadData, infile: \"spread.in.csv\", outfile: \"spread.out.csv\", test: t_spread",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   7,
								},
								Source: "name: \"spread\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   7,
									},
									Source: "\"spread\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "spread",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 29,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 29,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 35,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   7,
								},
								Source: "infile: \"spread.in.csv\"",
								Start: ast.Position{
									Column: 49,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 49,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   7,
									},
									Source: "\"spread.in.csv\"",
									Start: ast.Position{
										Column: 57,
										Line:   7,
									},
								},
							},
							Value: "spread.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   7,
								},
								Source: "outfile: \"spread.out.csv\"",
								Start: ast.Position{
									Column: 74,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 74,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   7,
									},
									Source: "\"spread.out.csv\"",
									Start: ast.Position{
										Column: 83,
										Line:   7,
									},
								},
							},
							Value: "spread.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   7,
								},
								Source: "test: t_spread",
								Start: ast.Position{
									Column: 101,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 101,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 115,
										Line:   7,
									},
									Source: "t_spread",
									Start: ast.Position{
										Column: 107,
										Line:   7,
									},
								},
							},
							Name: "t_spread",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 116,
							Line:   7,
						},
						Source: "testingTest(name: \"spread\", load: testLoadData, infile: \"spread.in.csv\", outfile: \"spread.out.csv\", test: t_spread)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "spread.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 136,
					Line:   6,
				},
				Source: "t_state_count = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> stateCount(fn:(r) => r._value > 80)\n\ntestingTest(name: \"state_count\", load: testLoadData, infile: \"state_count.in.csv\", outfile: \"state_count.out.csv\", test: t_state_count)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   4,
					},
					Source: "t_state_count = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> stateCount(fn:(r) => r._value > 80)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   1,
						},
						Source: "t_state_count",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_state_count",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> stateCount(fn:(r) => r._value > 80)",
						Start: ast.Position{
							Column: 17,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   3,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "start: 2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 12,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 12,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 19,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   3,
									},
									Source: "range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 41,
								Line:   4,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> stateCount(fn:(r) => r._value > 80)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   4,
									},
									Source: "fn:(r) => r._value > 80",
									Start: ast.Position{
										Column: 17,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   4,
										},
										Source: "fn:(r) => r._value > 80",
										Start: ast.Position{
											Column: 17,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   4,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 17,
												Line:   4,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   4,
											},
											Source: "(r) => r._value > 80",
											Start: ast.Position{
												Column: 20,
												Line:   4,
											},
										},
									},
									Body: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   4,
												},
												Source: "r._value > 80",
												Start: ast.Position{
													Column: 27,
													Line:   4,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   4,
													},
													Source: "r._value",
													Start: ast.Position{
														Column: 27,
														Line:   4,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   4,
														},
														Source: "r",
														Start: ast.Position{
															Column: 27,
															Line:   4,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   4,
														},
														Source: "_value",
														Start: ast.Position{
															Column: 29,
															Line:   4,
														},
													},
												},
												Name: "_value",
											},
										},
										Operator: 8,
										Right: &ast.IntegerLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   4,
													},
													Source: "80",
													Start: ast.Position{
														Column: 38,
														Line:   4,
													},
												},
											},
											Value: int64(80),
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   4,
												},
												Source: "r",
												Start: ast.Position{
													Column: 21,
													Line:   4,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   4,
													},
													Source: "r",
													Start: ast.Position{
														Column: 21,
														Line:   4,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   4,
								},
								Source: "stateCount(fn:(r) => r._value > 80)",
								Start: ast.Position{
									Column: 6,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   4,
									},
									Source: "stateCount",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Name: "stateCount",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 18,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 18,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 24,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 136,
						Line:   6,
					},
					Source: "testingTest(name: \"state_count\", load: testLoadData, infile: \"state_count.in.csv\", outfile: \"state_count.out.csv\", test: t_state_count)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 135,
								Line:   6,
							},
							Source: "name: \"state_count\", load: testLoadData, infile: \"state_count.in.csv\", outfile: \"state_count.out.csv\", test: t_state_count",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   6,
								},
								Source: "name: \"state_count\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   6,
									},
									Source: "\"state_count\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "state_count",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 34,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 34,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 40,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   6,
								},
								Source: "infile: \"state_count.in.csv\"",
								Start: ast.Position{
									Column: 54,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 54,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 82,
										Line:   6,
									},
									Source: "\"state_count.in.csv\"",
									Start: ast.Position{
										Column: 62,
										Line:   6,
									},
								},
							},
							Value: "state_count.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   6,
								},
								Source: "outfile: \"state_count.out.csv\"",
								Start: ast.Position{
									Column: 84,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 91,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 84,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   6,
									},
									Source: "\"state_count.out.csv\"",
									Start: ast.Position{
										Column: 93,
										Line:   6,
									},
								},
							},
							Value: "state_count.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   6,
								},
								Source: "test: t_state_count",
								Start: ast.Position{
									Column: 116,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 116,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   6,
									},
									Source: "t_state_count",
									Start: ast.Position{
										Column: 122,
										Line:   6,
									},
								},
							},
							Name: "t_state_count",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 136,
							Line:   6,
						},
						Source: "testingTest(name: \"state_count\", load: testLoadData, infile: \"state_count.in.csv\", outfile: \"state_count.out.csv\", test: t_state_count)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "state_count.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 148,
					Line:   6,
				},
				Source: "t_state_duration = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> stateDuration(fn:(r) => r._value > 80)\n\ntestingTest(name: \"state_duration\", load: testLoadData, infile: \"state_duration.in.csv\", outfile: \"state_duration.out.csv\", test: t_state_duration)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 44,
						Line:   4,
					},
					Source: "t_state_duration = (table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> stateDuration(fn:(r) => r._value > 80)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						Source: "t_state_duration",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_state_duration",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 44,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> stateDuration(fn:(r) => r._value > 80)",
						Start: ast.Position{
							Column: 20,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   3,
								},
								Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   3,
										},
										Source: "start: 2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 12,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   3,
											},
											Source: "start: 2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 12,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 19,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   3,
									},
									Source: "range(start: 2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 44,
								Line:   4,
							},
							Source: "table\n  |> range(start: 2018-05-22T19:53:26Z)\n  |> stateDuration(fn:(r) => r._value > 80)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   4,
									},
									Source: "fn:(r) => r._value > 80",
									Start: ast.Position{
										Column: 20,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   4,
										},
										Source: "fn:(r) => r._value > 80",
										Start: ast.Position{
											Column: 20,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 20,
												Line:   4,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   4,
											},
											Source: "(r) => r._value > 80",
											Start: ast.Position{
												Column: 23,
												Line:   4,
											},
										},
									},
									Body: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   4,
												},
												Source: "r._value > 80",
												Start: ast.Position{
													Column: 30,
													Line:   4,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   4,
													},
													Source: "r._value",
													Start: ast.Position{
														Column: 30,
														Line:   4,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   4,
														},
														Source: "r",
														Start: ast.Position{
															Column: 30,
															Line:   4,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   4,
														},
														Source: "_value",
														Start: ast.Position{
															Column: 32,
															Line:   4,
														},
													},
												},
												Name: "_value",
											},
										},
										Operator: 8,
										Right: &ast.IntegerLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   4,
													},
													Source: "80",
													Start: ast.Position{
														Column: 41,
														Line:   4,
													},
												},
											},
											Value: int64(80),
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   4,
												},
												Source: "r",
												Start: ast.Position{
													Column: 24,
													Line:   4,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   4,
													},
													Source: "r",
													Start: ast.Position{
														Column: 24,
														Line:   4,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   4,
								},
								Source: "stateDuration(fn:(r) => r._value > 80)",
								Start: ast.Position{
									Column: 6,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   4,
									},
									Source: "stateDuration",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Name: "stateDuration",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 21,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 21,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 148,
						Line:   6,
					},
					Source: "testingTest(name: \"state_duration\", load: testLoadData, infile: \"state_duration.in.csv\", outfile: \"state_duration.out.csv\", test: t_state_duration)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 147,
								Line:   6,
							},
							Source: "name: \"state_duration\", load: testLoadData, infile: \"state_duration.in.csv\", outfile: \"state_duration.out.csv\", test: t_state_duration",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   6,
								},
								Source: "name: \"state_duration\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   6,
									},
									Source: "\"state_duration\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "state_duration",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 37,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 37,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 43,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   6,
								},
								Source: "infile: \"state_duration.in.csv\"",
								Start: ast.Position{
									Column: 57,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 57,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   6,
									},
									Source: "\"state_duration.in.csv\"",
									Start: ast.Position{
										Column: 65,
										Line:   6,
									},
								},
							},
							Value: "state_duration.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   6,
								},
								Source: "outfile: \"state_duration.out.csv\"",
								Start: ast.Position{
									Column: 90,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 90,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   6,
									},
									Source: "\"state_duration.out.csv\"",
									Start: ast.Position{
										Column: 99,
										Line:   6,
									},
								},
							},
							Value: "state_duration.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 147,
									Line:   6,
								},
								Source: "test: t_state_duration",
								Start: ast.Position{
									Column: 125,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 129,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 125,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 147,
										Line:   6,
									},
									Source: "t_state_duration",
									Start: ast.Position{
										Column: 131,
										Line:   6,
									},
								},
							},
							Name: "t_state_duration",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 148,
							Line:   6,
						},
						Source: "testingTest(name: \"state_duration\", load: testLoadData, infile: \"state_duration.in.csv\", outfile: \"state_duration.out.csv\", test: t_state_duration)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "state_duration.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 116,
					Line:   7,
				},
				Source: "option now = () => 2018-12-18T22:12:00Z\n\nt_stddev = (table=<-) => table\n  |> range(start: -5m)\n  |> stddev()\n\ntestingTest(name: \"stddev\", load: testLoadData, infile: \"stddev.in.csv\", outfile: \"stddev.out.csv\", test: t_stddev)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-18T22:12:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-18T22:12:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-18T22:12:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-18T22:12:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   5,
					},
					Source: "t_stddev = (table=<-) => table\n  |> range(start: -5m)\n  |> stddev()",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   3,
						},
						Source: "t_stddev",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_stddev",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   5,
						},
						Source: "(table=<-) => table\n  |> range(start: -5m)\n  |> stddev()",
						Start: ast.Position{
							Column: 12,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 26,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   4,
								},
								Source: "table\n  |> range(start: -5m)",
								Start: ast.Position{
									Column: 26,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   4,
										},
										Source: "start: -5m",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "start: -5m",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   4,
													},
													Source: "5m",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(5),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   4,
												},
												Source: "-5m",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   4,
									},
									Source: "range(start: -5m)",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   5,
							},
							Source: "table\n  |> range(start: -5m)\n  |> stddev()",
							Start: ast.Position{
								Column: 26,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   5,
								},
								Source: "stddev()",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   5,
									},
									Source: "stddev",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "stddev",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 13,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 13,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 19,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 116,
						Line:   7,
					},
					Source: "testingTest(name: \"stddev\", load: testLoadData, infile: \"stddev.in.csv\", outfile: \"stddev.out.csv\", test: t_stddev)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 115,
								Line:   7,
							},
							Source: "name: \"stddev\", load: testLoadData, infile: \"stddev.in.csv\", outfile: \"stddev.out.csv\", test: t_stddev",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   7,
								},
								Source: "name: \"stddev\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   7,
									},
									Source: "\"stddev\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "stddev",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 29,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 29,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 35,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   7,
								},
								Source: "infile: \"stddev.in.csv\"",
								Start: ast.Position{
									Column: 49,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 49,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   7,
									},
									Source: "\"stddev.in.csv\"",
									Start: ast.Position{
										Column: 57,
										Line:   7,
									},
								},
							},
							Value: "stddev.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   7,
								},
								Source: "outfile: \"stddev.out.csv\"",
								Start: ast.Position{
									Column: 74,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 74,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   7,
									},
									Source: "\"stddev.out.csv\"",
									Start: ast.Position{
										Column: 83,
										Line:   7,
									},
								},
							},
							Value: "stddev.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   7,
								},
								Source: "test: t_stddev",
								Start: ast.Position{
									Column: 101,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 101,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 115,
										Line:   7,
									},
									Source: "t_stddev",
									Start: ast.Position{
										Column: 107,
										Line:   7,
									},
								},
							},
							Name: "t_stddev",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 116,
							Line:   7,
						},
						Source: "testingTest(name: \"stddev\", load: testLoadData, infile: \"stddev.in.csv\", outfile: \"stddev.out.csv\", test: t_stddev)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "stddev.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 144,
					Line:   8,
				},
				Source: "n = 1\nfieldSelect = \"field{n}\"\n\nt_string_interp = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._field == fieldSelect)\ntestingTest(name: \"string_interp\", load: testLoadData, infile: \"string_interp.in.csv\", outfile: \"string_interp.out.csv\", test: t_string_interp)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 6,
						Line:   1,
					},
					Source: "n = 1",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   1,
						},
						Source: "n",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "n",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   1,
						},
						Source: "1",
						Start: ast.Position{
							Column: 5,
							Line:   1,
						},
					},
				},
				Value: int64(1),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   2,
					},
					Source: "fieldSelect = \"field{n}\"",
					Start: ast.Position{
						Column: 1,
						Line:   2,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   2,
						},
						Source: "fieldSelect",
						Start: ast.Position{
							Column: 1,
							Line:   2,
						},
					},
				},
				Name: "fieldSelect",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   2,
						},
						Source: "\"field{n}\"",
						Start: ast.Position{
							Column: 15,
							Line:   2,
						},
					},
				},
				Value: "field{n}",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 50,
						Line:   7,
					},
					Source: "t_string_interp = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._field == fieldSelect)",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   4,
						},
						Source: "t_string_interp",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Name: "t_string_interp",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._field == fieldSelect)",
						Start: ast.Position{
							Column: 19,
							Line:   4,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   5,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   5,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   6,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   5,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   6,
										},
										Source: "start:2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 14,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   6,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   6,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   6,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   6,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 20,
													Line:   6,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   6,
									},
									Source: "range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 8,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   6,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   6,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   7,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> filter(fn: (r) => r._field == fieldSelect)",
							Start: ast.Position{
								Column: 3,
								Line:   5,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   7,
									},
									Source: "fn: (r) => r._field == fieldSelect",
									Start: ast.Position{
										Column: 15,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   7,
										},
										Source: "fn: (r) => r._field == fieldSelect",
										Start: ast.Position{
											Column: 15,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   7,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 15,
												Line:   7,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   7,
											},
											Source: "(r) => r._field == fieldSelect",
											Start: ast.Position{
												Column: 19,
												Line:   7,
											},
										},
									},
									Body: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   7,
												},
												Source: "r._field == fieldSelect",
												Start: ast.Position{
													Column: 26,
													Line:   7,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   7,
													},
													Source: "r._field",
													Start: ast.Position{
														Column: 26,
														Line:   7,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   7,
														},
														Source: "r",
														Start: ast.Position{
															Column: 26,
															Line:   7,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   7,
														},
														Source: "_field",
														Start: ast.Position{
															Column: 28,
															Line:   7,
														},
													},
												},
												Name: "_field",
											},
										},
										Operator: 14,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   7,
													},
													Source: "fieldSelect",
													Start: ast.Position{
														Column: 38,
														Line:   7,
													},
												},
											},
											Name: "fieldSelect",
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   7,
												},
												Source: "r",
												Start: ast.Position{
													Column: 20,
													Line:   7,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   7,
													},
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   7,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   7,
								},
								Source: "filter(fn: (r) => r._field == fieldSelect)",
								Start: ast.Position{
									Column: 8,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   7,
									},
									Source: "filter",
									Start: ast.Position{
										Column: 8,
										Line:   7,
									},
								},
							},
							Name: "filter",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   4,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 20,
								Line:   4,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   4,
								},
								Source: "table",
								Start: ast.Position{
									Column: 20,
									Line:   4,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   4,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 26,
								Line:   4,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 144,
						Line:   8,
					},
					Source: "testingTest(name: \"string_interp\", load: testLoadData, infile: \"string_interp.in.csv\", outfile: \"string_interp.out.csv\", test: t_string_interp)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 143,
								Line:   8,
							},
							Source: "name: \"string_interp\", load: testLoadData, infile: \"string_interp.in.csv\", outfile: \"string_interp.out.csv\", test: t_string_interp",
							Start: ast.Position{
								Column: 13,
								Line:   8,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   8,
								},
								Source: "name: \"string_interp\"",
								Start: ast.Position{
									Column: 13,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   8,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   8,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   8,
									},
									Source: "\"string_interp\"",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Value: "string_interp",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   8,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 36,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   8,
									},
									Source: "load",
									Start: ast.Position{
										Column: 36,
										Line:   8,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   8,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 42,
										Line:   8,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   8,
								},
								Source: "infile: \"string_interp.in.csv\"",
								Start: ast.Position{
									Column: 56,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   8,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 56,
										Line:   8,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   8,
									},
									Source: "\"string_interp.in.csv\"",
									Start: ast.Position{
										Column: 64,
										Line:   8,
									},
								},
							},
							Value: "string_interp.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 120,
									Line:   8,
								},
								Source: "outfile: \"string_interp.out.csv\"",
								Start: ast.Position{
									Column: 88,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   8,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 88,
										Line:   8,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   8,
									},
									Source: "\"string_interp.out.csv\"",
									Start: ast.Position{
										Column: 97,
										Line:   8,
									},
								},
							},
							Value: "string_interp.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 143,
									Line:   8,
								},
								Source: "test: t_string_interp",
								Start: ast.Position{
									Column: 122,
									Line:   8,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   8,
									},
									Source: "test",
									Start: ast.Position{
										Column: 122,
										Line:   8,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 143,
										Line:   8,
									},
									Source: "t_string_interp",
									Start: ast.Position{
										Column: 128,
										Line:   8,
									},
								},
							},
							Name: "t_string_interp",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 144,
							Line:   8,
						},
						Source: "testingTest(name: \"string_interp\", load: testLoadData, infile: \"string_interp.in.csv\", outfile: \"string_interp.out.csv\", test: t_string_interp)",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   8,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   8,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "string_interp.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 132,
					Line:   5,
				},
				Source: "t_string_max = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:54:16Z)\n    |> max()\ntestingTest(name: \"string_max\", load: testLoadData, infile: \"string_max.in.csv\", outfile: \"string_max.out.csv\", test: t_string_max)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   4,
					},
					Source: "t_string_max = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:54:16Z)\n    |> max()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						Source: "t_string_max",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_string_max",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:54:16Z)\n    |> max()",
						Start: ast.Position{
							Column: 16,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:54:16Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:54:16Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:54:16Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:54:16Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:54:16Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:54:16Z)\n    |> max()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   4,
								},
								Source: "max()",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   4,
									},
									Source: "max",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "max",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 132,
						Line:   5,
					},
					Source: "testingTest(name: \"string_max\", load: testLoadData, infile: \"string_max.in.csv\", outfile: \"string_max.out.csv\", test: t_string_max)",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 131,
								Line:   5,
							},
							Source: "name: \"string_max\", load: testLoadData, infile: \"string_max.in.csv\", outfile: \"string_max.out.csv\", test: t_string_max",
							Start: ast.Position{
								Column: 13,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   5,
								},
								Source: "name: \"string_max\"",
								Start: ast.Position{
									Column: 13,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   5,
									},
									Source: "\"string_max\"",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Value: "string_max",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   5,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 33,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   5,
									},
									Source: "load",
									Start: ast.Position{
										Column: 33,
										Line:   5,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   5,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 39,
										Line:   5,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   5,
								},
								Source: "infile: \"string_max.in.csv\"",
								Start: ast.Position{
									Column: 53,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   5,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 53,
										Line:   5,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   5,
									},
									Source: "\"string_max.in.csv\"",
									Start: ast.Position{
										Column: 61,
										Line:   5,
									},
								},
							},
							Value: "string_max.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   5,
								},
								Source: "outfile: \"string_max.out.csv\"",
								Start: ast.Position{
									Column: 82,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   5,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 82,
										Line:   5,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   5,
									},
									Source: "\"string_max.out.csv\"",
									Start: ast.Position{
										Column: 91,
										Line:   5,
									},
								},
							},
							Value: "string_max.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 131,
									Line:   5,
								},
								Source: "test: t_string_max",
								Start: ast.Position{
									Column: 113,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   5,
									},
									Source: "test",
									Start: ast.Position{
										Column: 113,
										Line:   5,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 131,
										Line:   5,
									},
									Source: "t_string_max",
									Start: ast.Position{
										Column: 119,
										Line:   5,
									},
								},
							},
							Name: "t_string_max",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 132,
							Line:   5,
						},
						Source: "testingTest(name: \"string_max\", load: testLoadData, infile: \"string_max.in.csv\", outfile: \"string_max.out.csv\", test: t_string_max)",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   5,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   5,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "string_max.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 136,
					Line:   6,
				},
				Source: "t_string_sort = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> sort()\n\ntestingTest(name: \"string_sort\", load: testLoadData, infile: \"string_sort.in.csv\", outfile: \"string_sort.out.csv\", test: t_string_sort)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   4,
					},
					Source: "t_string_sort = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> sort()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   1,
						},
						Source: "t_string_sort",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_string_sort",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> sort()",
						Start: ast.Position{
							Column: 17,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:26Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:26Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:26Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:26Z)\n    |> sort()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   4,
								},
								Source: "sort()",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   4,
									},
									Source: "sort",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "sort",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 18,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 18,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 24,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 136,
						Line:   6,
					},
					Source: "testingTest(name: \"string_sort\", load: testLoadData, infile: \"string_sort.in.csv\", outfile: \"string_sort.out.csv\", test: t_string_sort)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 135,
								Line:   6,
							},
							Source: "name: \"string_sort\", load: testLoadData, infile: \"string_sort.in.csv\", outfile: \"string_sort.out.csv\", test: t_string_sort",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   6,
								},
								Source: "name: \"string_sort\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   6,
									},
									Source: "\"string_sort\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "string_sort",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 34,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 34,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 40,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   6,
								},
								Source: "infile: \"string_sort.in.csv\"",
								Start: ast.Position{
									Column: 54,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 54,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 82,
										Line:   6,
									},
									Source: "\"string_sort.in.csv\"",
									Start: ast.Position{
										Column: 62,
										Line:   6,
									},
								},
							},
							Value: "string_sort.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   6,
								},
								Source: "outfile: \"string_sort.out.csv\"",
								Start: ast.Position{
									Column: 84,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 91,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 84,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   6,
									},
									Source: "\"string_sort.out.csv\"",
									Start: ast.Position{
										Column: 93,
										Line:   6,
									},
								},
							},
							Value: "string_sort.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   6,
								},
								Source: "test: t_string_sort",
								Start: ast.Position{
									Column: 116,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 116,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   6,
									},
									Source: "t_string_sort",
									Start: ast.Position{
										Column: 122,
										Line:   6,
									},
								},
							},
							Name: "t_string_sort",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 136,
							Line:   6,
						},
						Source: "testingTest(name: \"string_sort\", load: testLoadData, infile: \"string_sort.in.csv\", outfile: \"string_sort.out.csv\", test: t_string_sort)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "string_sort.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 104,
					Line:   7,
				},
				Source: "option now = () => 2018-12-18T22:12:00Z\n\nt_sum = (table=<-) => table\n  |> range(start: -5m)\n  |> sum()\n\ntestingTest(name: \"sum\", load: testLoadData, infile: \"sum.in.csv\", outfile: \"sum.out.csv\", test: t_sum)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   1,
						},
						Source: "now = () => 2018-12-18T22:12:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   1,
							},
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "() => 2018-12-18T22:12:00Z",
							Start: ast.Position{
								Column: 14,
								Line:   1,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   1,
								},
								Source: "2018-12-18T22:12:00Z",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Value: time.Time{},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   1,
					},
					Source: "option now = () => 2018-12-18T22:12:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 11,
						Line:   5,
					},
					Source: "t_sum = (table=<-) => table\n  |> range(start: -5m)\n  |> sum()",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   3,
						},
						Source: "t_sum",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "t_sum",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   5,
						},
						Source: "(table=<-) => table\n  |> range(start: -5m)\n  |> sum()",
						Start: ast.Position{
							Column: 9,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   3,
									},
									Source: "table",
									Start: ast.Position{
										Column: 23,
										Line:   3,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   4,
								},
								Source: "table\n  |> range(start: -5m)",
								Start: ast.Position{
									Column: 23,
									Line:   3,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   4,
										},
										Source: "start: -5m",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "start: -5m",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   4,
												},
												Source: "start",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.UnaryExpression{
										Argument: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   4,
													},
													Source: "5m",
													Start: ast.Position{
														Column: 20,
														Line:   4,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(5),
												Unit:      "m",
											}},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   4,
												},
												Source: "-5m",
												Start: ast.Position{
													Column: 19,
													Line:   4,
												},
											},
										},
										Operator: 4,
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   4,
									},
									Source: "range(start: -5m)",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   4,
										},
										Source: "range",
										Start: ast.Position{
											Column: 6,
											Line:   4,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   5,
							},
							Source: "table\n  |> range(start: -5m)\n  |> sum()",
							Start: ast.Position{
								Column: 23,
								Line:   3,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   5,
								},
								Source: "sum()",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   5,
									},
									Source: "sum",
									Start: ast.Position{
										Column: 6,
										Line:   5,
									},
								},
							},
							Name: "sum",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   3,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   3,
								},
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   3,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   3,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   3,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 104,
						Line:   7,
					},
					Source: "testingTest(name: \"sum\", load: testLoadData, infile: \"sum.in.csv\", outfile: \"sum.out.csv\", test: t_sum)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   7,
							},
							Source: "name: \"sum\", load: testLoadData, infile: \"sum.in.csv\", outfile: \"sum.out.csv\", test: t_sum",
							Start: ast.Position{
								Column: 13,
								Line:   7,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   7,
								},
								Source: "name: \"sum\"",
								Start: ast.Position{
									Column: 13,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   7,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   7,
									},
									Source: "\"sum\"",
									Start: ast.Position{
										Column: 19,
										Line:   7,
									},
								},
							},
							Value: "sum",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   7,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 26,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   7,
									},
									Source: "load",
									Start: ast.Position{
										Column: 26,
										Line:   7,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   7,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 32,
										Line:   7,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   7,
								},
								Source: "infile: \"sum.in.csv\"",
								Start: ast.Position{
									Column: 46,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   7,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 46,
										Line:   7,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   7,
									},
									Source: "\"sum.in.csv\"",
									Start: ast.Position{
										Column: 54,
										Line:   7,
									},
								},
							},
							Value: "sum.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   7,
								},
								Source: "outfile: \"sum.out.csv\"",
								Start: ast.Position{
									Column: 68,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   7,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 68,
										Line:   7,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   7,
									},
									Source: "\"sum.out.csv\"",
									Start: ast.Position{
										Column: 77,
										Line:   7,
									},
								},
							},
							Value: "sum.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   7,
								},
								Source: "test: t_sum",
								Start: ast.Position{
									Column: 92,
									Line:   7,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   7,
									},
									Source: "test",
									Start: ast.Position{
										Column: 92,
										Line:   7,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   7,
									},
									Source: "t_sum",
									Start: ast.Position{
										Column: 98,
										Line:   7,
									},
								},
							},
							Name: "t_sum",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 104,
							Line:   7,
						},
						Source: "testingTest(name: \"sum\", load: testLoadData, infile: \"sum.in.csv\", outfile: \"sum.out.csv\", test: t_sum)",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   7,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   7,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "sum.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 58,
					Line:   18,
				},
				Source: "supl = testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> group(columns: [\"runID\"])\r\n\r\n\r\n\r\nmain = testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> pivot(rowKey:[\"runID\"], columnKey: [\"status\"], valueColumn: \"_time\")\r\n\r\n\r\ngot = join(tables: {main: main, supl: supl}, on: [\"_start\", \"_stop\", \"orgID\", \"taskID\", \"runID\", \"_measurement\"])\r\nwant = testLoadData(file: \"task_per_line.out.csv\")\r\nassertEquals(name: \"task_per_line\", want: want, got: got)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 31,
						Line:   5,
					},
					Source: "supl = testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> group(columns: [\"runID\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   1,
						},
						Source: "supl",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "supl",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   1,
											},
											Source: "file: \"task_per_line.in.csv\"",
											Start: ast.Position{
												Column: 21,
												Line:   1,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   1,
												},
												Source: "file: \"task_per_line.in.csv\"",
												Start: ast.Position{
													Column: 21,
													Line:   1,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   1,
													},
													Source: "file",
													Start: ast.Position{
														Column: 21,
														Line:   1,
													},
												},
											},
											Name: "file",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   1,
													},
													Source: "\"task_per_line.in.csv\"",
													Start: ast.Position{
														Column: 27,
														Line:   1,
													},
												},
											},
											Value: "task_per_line.in.csv",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   1,
										},
										Source: "testLoadData(file: \"task_per_line.in.csv\")",
										Start: ast.Position{
											Column: 8,
											Line:   1,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   1,
											},
											Source: "testLoadData",
											Start: ast.Position{
												Column: 8,
												Line:   1,
											},
										},
									},
									Name: "testLoadData",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   2,
									},
									Source: "testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)",
									Start: ast.Position{
										Column: 8,
										Line:   1,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   2,
											},
											Source: "start: 2018-10-02T17:55:11.520461Z",
											Start: ast.Position{
												Column: 12,
												Line:   2,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   2,
												},
												Source: "start: 2018-10-02T17:55:11.520461Z",
												Start: ast.Position{
													Column: 12,
													Line:   2,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   2,
													},
													Source: "start",
													Start: ast.Position{
														Column: 12,
														Line:   2,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   2,
													},
													Source: "2018-10-02T17:55:11.520461Z",
													Start: ast.Position{
														Column: 19,
														Line:   2,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   2,
										},
										Source: "range(start: 2018-10-02T17:55:11.520461Z)",
										Start: ast.Position{
											Column: 6,
											Line:   2,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   2,
											},
											Source: "range",
											Start: ast.Position{
												Column: 6,
												Line:   2,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   3,
								},
								Source: "testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )",
								Start: ast.Position{
									Column: 8,
									Line:   1,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 86,
											Line:   3,
										},
										Source: "fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
										Start: ast.Position{
											Column: 13,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 86,
												Line:   3,
											},
											Source: "fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
											Start: ast.Position{
												Column: 13,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   3,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 13,
													Line:   3,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 86,
													Line:   3,
												},
												Source: "(r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
												Start: ast.Position{
													Column: 17,
													Line:   3,
												},
											},
										},
										Body: &ast.LogicalExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 86,
														Line:   3,
													},
													Source: "r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
													Start: ast.Position{
														Column: 24,
														Line:   3,
													},
												},
											},
											Left: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   3,
														},
														Source: "r._measurement == \"records\"",
														Start: ast.Position{
															Column: 24,
															Line:   3,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   3,
															},
															Source: "r._measurement",
															Start: ast.Position{
																Column: 24,
																Line:   3,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   3,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   3,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 38,
																	Line:   3,
																},
																Source: "_measurement",
																Start: ast.Position{
																	Column: 26,
																	Line:   3,
																},
															},
														},
														Name: "_measurement",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 51,
																Line:   3,
															},
															Source: "\"records\"",
															Start: ast.Position{
																Column: 42,
																Line:   3,
															},
														},
													},
													Value: "records",
												},
											},
											Operator: 1,
											Right: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 86,
															Line:   3,
														},
														Source: "r.taskID == \"02bac3c8f0f37000\"",
														Start: ast.Position{
															Column: 56,
															Line:   3,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 64,
																Line:   3,
															},
															Source: "r.taskID",
															Start: ast.Position{
																Column: 56,
																Line:   3,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 57,
																	Line:   3,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 56,
																	Line:   3,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 64,
																	Line:   3,
																},
																Source: "taskID",
																Start: ast.Position{
																	Column: 58,
																	Line:   3,
																},
															},
														},
														Name: "taskID",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 86,
																Line:   3,
															},
															Source: "\"02bac3c8f0f37000\"",
															Start: ast.Position{
																Column: 68,
																Line:   3,
															},
														},
													},
													Value: "02bac3c8f0f37000",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   3,
													},
													Source: "r",
													Start: ast.Position{
														Column: 18,
														Line:   3,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   3,
														},
														Source: "r",
														Start: ast.Position{
															Column: 18,
															Line:   3,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   3,
									},
									Source: "filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   3,
										},
										Source: "filter",
										Start: ast.Position{
											Column: 6,
											Line:   3,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   4,
							},
							Source: "testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   4,
									},
									Source: "rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\"",
									Start: ast.Position{
										Column: 12,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   4,
										},
										Source: "rowKey:[\"_time\"]",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   4,
											},
											Source: "rowKey",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Name: "rowKey",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   4,
											},
											Source: "[\"_time\"]",
											Start: ast.Position{
												Column: 19,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   4,
												},
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   4,
												},
											},
										},
										Value: "_time",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   4,
										},
										Source: "columnKey: [\"_field\"]",
										Start: ast.Position{
											Column: 30,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   4,
											},
											Source: "columnKey",
											Start: ast.Position{
												Column: 30,
												Line:   4,
											},
										},
									},
									Name: "columnKey",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   4,
											},
											Source: "[\"_field\"]",
											Start: ast.Position{
												Column: 41,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   4,
												},
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 42,
													Line:   4,
												},
											},
										},
										Value: "_field",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   4,
										},
										Source: "valueColumn: \"_value\"",
										Start: ast.Position{
											Column: 53,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 64,
												Line:   4,
											},
											Source: "valueColumn",
											Start: ast.Position{
												Column: 53,
												Line:   4,
											},
										},
									},
									Name: "valueColumn",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   4,
											},
											Source: "\"_value\"",
											Start: ast.Position{
												Column: 66,
												Line:   4,
											},
										},
									},
									Value: "_value",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   4,
								},
								Source: "pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
								Start: ast.Position{
									Column: 6,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   4,
									},
									Source: "pivot",
									Start: ast.Position{
										Column: 6,
										Line:   4,
									},
								},
							},
							Name: "pivot",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 31,
							Line:   5,
						},
						Source: "testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> group(columns: [\"runID\"])",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   5,
								},
								Source: "columns: [\"runID\"]",
								Start: ast.Position{
									Column: 12,
									Line:   5,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   5,
									},
									Source: "columns: [\"runID\"]",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   5,
										},
										Source: "columns",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Name: "columns",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   5,
										},
										Source: "[\"runID\"]",
										Start: ast.Position{
											Column: 21,
											Line:   5,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   5,
											},
											Source: "\"runID\"",
											Start: ast.Position{
												Column: 22,
												Line:   5,
											},
										},
									},
									Value: "runID",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   5,
							},
							Source: "group(columns: [\"runID\"])",
							Start: ast.Position{
								Column: 6,
								Line:   5,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   5,
								},
								Source: "group",
								Start: ast.Position{
									Column: 6,
									Line:   5,
								},
							},
						},
						Name: "group",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 74,
						Line:   13,
					},
					Source: "main = testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> pivot(rowKey:[\"runID\"], columnKey: [\"status\"], valueColumn: \"_time\")",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   9,
						},
						Source: "main",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Name: "main",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   9,
											},
											Source: "file: \"task_per_line.in.csv\"",
											Start: ast.Position{
												Column: 21,
												Line:   9,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   9,
												},
												Source: "file: \"task_per_line.in.csv\"",
												Start: ast.Position{
													Column: 21,
													Line:   9,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   9,
													},
													Source: "file",
													Start: ast.Position{
														Column: 21,
														Line:   9,
													},
												},
											},
											Name: "file",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   9,
													},
													Source: "\"task_per_line.in.csv\"",
													Start: ast.Position{
														Column: 27,
														Line:   9,
													},
												},
											},
											Value: "task_per_line.in.csv",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   9,
										},
										Source: "testLoadData(file: \"task_per_line.in.csv\")",
										Start: ast.Position{
											Column: 8,
											Line:   9,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   9,
											},
											Source: "testLoadData",
											Start: ast.Position{
												Column: 8,
												Line:   9,
											},
										},
									},
									Name: "testLoadData",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   10,
									},
									Source: "testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)",
									Start: ast.Position{
										Column: 8,
										Line:   9,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   10,
											},
											Source: "start: 2018-10-02T17:55:11.520461Z",
											Start: ast.Position{
												Column: 12,
												Line:   10,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   10,
												},
												Source: "start: 2018-10-02T17:55:11.520461Z",
												Start: ast.Position{
													Column: 12,
													Line:   10,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   10,
													},
													Source: "start",
													Start: ast.Position{
														Column: 12,
														Line:   10,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   10,
													},
													Source: "2018-10-02T17:55:11.520461Z",
													Start: ast.Position{
														Column: 19,
														Line:   10,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   10,
										},
										Source: "range(start: 2018-10-02T17:55:11.520461Z)",
										Start: ast.Position{
											Column: 6,
											Line:   10,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   10,
											},
											Source: "range",
											Start: ast.Position{
												Column: 6,
												Line:   10,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   11,
								},
								Source: "testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )",
								Start: ast.Position{
									Column: 8,
									Line:   9,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 86,
											Line:   11,
										},
										Source: "fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
										Start: ast.Position{
											Column: 13,
											Line:   11,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 86,
												Line:   11,
											},
											Source: "fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
											Start: ast.Position{
												Column: 13,
												Line:   11,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   11,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 13,
													Line:   11,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 86,
													Line:   11,
												},
												Source: "(r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
												Start: ast.Position{
													Column: 17,
													Line:   11,
												},
											},
										},
										Body: &ast.LogicalExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 86,
														Line:   11,
													},
													Source: "r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\"",
													Start: ast.Position{
														Column: 24,
														Line:   11,
													},
												},
											},
											Left: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   11,
														},
														Source: "r._measurement == \"records\"",
														Start: ast.Position{
															Column: 24,
															Line:   11,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   11,
															},
															Source: "r._measurement",
															Start: ast.Position{
																Column: 24,
																Line:   11,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   11,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   11,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 38,
																	Line:   11,
																},
																Source: "_measurement",
																Start: ast.Position{
																	Column: 26,
																	Line:   11,
																},
															},
														},
														Name: "_measurement",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 51,
																Line:   11,
															},
															Source: "\"records\"",
															Start: ast.Position{
																Column: 42,
																Line:   11,
															},
														},
													},
													Value: "records",
												},
											},
											Operator: 1,
											Right: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 86,
															Line:   11,
														},
														Source: "r.taskID == \"02bac3c8f0f37000\"",
														Start: ast.Position{
															Column: 56,
															Line:   11,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 64,
																Line:   11,
															},
															Source: "r.taskID",
															Start: ast.Position{
																Column: 56,
																Line:   11,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 57,
																	Line:   11,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 56,
																	Line:   11,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 64,
																	Line:   11,
																},
																Source: "taskID",
																Start: ast.Position{
																	Column: 58,
																	Line:   11,
																},
															},
														},
														Name: "taskID",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 86,
																Line:   11,
															},
															Source: "\"02bac3c8f0f37000\"",
															Start: ast.Position{
																Column: 68,
																Line:   11,
															},
														},
													},
													Value: "02bac3c8f0f37000",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   11,
													},
													Source: "r",
													Start: ast.Position{
														Column: 18,
														Line:   11,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   11,
														},
														Source: "r",
														Start: ast.Position{
															Column: 18,
															Line:   11,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   11,
									},
									Source: "filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )",
									Start: ast.Position{
										Column: 6,
										Line:   11,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   11,
										},
										Source: "filter",
										Start: ast.Position{
											Column: 6,
											Line:   11,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   12,
							},
							Source: "testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
							Start: ast.Position{
								Column: 8,
								Line:   9,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   12,
									},
									Source: "rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\"",
									Start: ast.Position{
										Column: 12,
										Line:   12,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   12,
										},
										Source: "rowKey:[\"_time\"]",
										Start: ast.Position{
											Column: 12,
											Line:   12,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   12,
											},
											Source: "rowKey",
											Start: ast.Position{
												Column: 12,
												Line:   12,
											},
										},
									},
									Name: "rowKey",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   12,
											},
											Source: "[\"_time\"]",
											Start: ast.Position{
												Column: 19,
												Line:   12,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   12,
												},
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   12,
												},
											},
										},
										Value: "_time",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   12,
										},
										Source: "columnKey: [\"_field\"]",
										Start: ast.Position{
											Column: 30,
											Line:   12,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   12,
											},
											Source: "columnKey",
											Start: ast.Position{
												Column: 30,
												Line:   12,
											},
										},
									},
									Name: "columnKey",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   12,
											},
											Source: "[\"_field\"]",
											Start: ast.Position{
												Column: 41,
												Line:   12,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   12,
												},
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 42,
													Line:   12,
												},
											},
										},
										Value: "_field",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   12,
										},
										Source: "valueColumn: \"_value\"",
										Start: ast.Position{
											Column: 53,
											Line:   12,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 64,
												Line:   12,
											},
											Source: "valueColumn",
											Start: ast.Position{
												Column: 53,
												Line:   12,
											},
										},
									},
									Name: "valueColumn",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   12,
											},
											Source: "\"_value\"",
											Start: ast.Position{
												Column: 66,
												Line:   12,
											},
										},
									},
									Value: "_value",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   12,
								},
								Source: "pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
								Start: ast.Position{
									Column: 6,
									Line:   12,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   12,
									},
									Source: "pivot",
									Start: ast.Position{
										Column: 6,
										Line:   12,
									},
								},
							},
							Name: "pivot",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 74,
							Line:   13,
						},
						Source: "testLoadData(file: \"task_per_line.in.csv\")\r\n  |> range(start: 2018-10-02T17:55:11.520461Z)\r\n  |> filter(fn: (r) => r._measurement == \"records\" and r.taskID == \"02bac3c8f0f37000\" )\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> pivot(rowKey:[\"runID\"], columnKey: [\"status\"], valueColumn: \"_time\")",
						Start: ast.Position{
							Column: 8,
							Line:   9,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   13,
								},
								Source: "rowKey:[\"runID\"], columnKey: [\"status\"], valueColumn: \"_time\"",
								Start: ast.Position{
									Column: 12,
									Line:   13,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   13,
									},
									Source: "rowKey:[\"runID\"]",
									Start: ast.Position{
										Column: 12,
										Line:   13,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   13,
										},
										Source: "rowKey",
										Start: ast.Position{
											Column: 12,
											Line:   13,
										},
									},
								},
								Name: "rowKey",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   13,
										},
										Source: "[\"runID\"]",
										Start: ast.Position{
											Column: 19,
											Line:   13,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   13,
											},
											Source: "\"runID\"",
											Start: ast.Position{
												Column: 20,
												Line:   13,
											},
										},
									},
									Value: "runID",
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   13,
									},
									Source: "columnKey: [\"status\"]",
									Start: ast.Position{
										Column: 30,
										Line:   13,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   13,
										},
										Source: "columnKey",
										Start: ast.Position{
											Column: 30,
											Line:   13,
										},
									},
								},
								Name: "columnKey",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   13,
										},
										Source: "[\"status\"]",
										Start: ast.Position{
											Column: 41,
											Line:   13,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   13,
											},
											Source: "\"status\"",
											Start: ast.Position{
												Column: 42,
												Line:   13,
											},
										},
									},
									Value: "status",
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 73,
										Line:   13,
									},
									Source: "valueColumn: \"_time\"",
									Start: ast.Position{
										Column: 53,
										Line:   13,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   13,
										},
										Source: "valueColumn",
										Start: ast.Position{
											Column: 53,
											Line:   13,
										},
									},
								},
								Name: "valueColumn",
							},
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 73,
											Line:   13,
										},
										Source: "\"_time\"",
										Start: ast.Position{
											Column: 66,
											Line:   13,
										},
									},
								},
								Value: "_time",
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 74,
								Line:   13,
							},
							Source: "pivot(rowKey:[\"runID\"], columnKey: [\"status\"], valueColumn: \"_time\")",
							Start: ast.Position{
								Column: 6,
								Line:   13,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   13,
								},
								Source: "pivot",
								Start: ast.Position{
									Column: 6,
									Line:   13,
								},
							},
						},
						Name: "pivot",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 114,
						Line:   16,
					},
					Source: "got = join(tables: {main: main, supl: supl}, on: [\"_start\", \"_stop\", \"orgID\", \"taskID\", \"runID\", \"_measurement\"])",
					Start: ast.Position{
						Column: 1,
						Line:   16,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   16,
						},
						Source: "got",
						Start: ast.Position{
							Column: 1,
							Line:   16,
						},
					},
				},
				Name: "got",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 113,
								Line:   16,
							},
							Source: "tables: {main: main, supl: supl}, on: [\"_start\", \"_stop\", \"orgID\", \"taskID\", \"runID\", \"_measurement\"]",
							Start: ast.Position{
								Column: 12,
								Line:   16,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   16,
								},
								Source: "tables: {main: main, supl: supl}",
								Start: ast.Position{
									Column: 12,
									Line:   16,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   16,
									},
									Source: "tables",
									Start: ast.Position{
										Column: 12,
										Line:   16,
									},
								},
							},
							Name: "tables",
						},
						Value: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   16,
									},
									Source: "{main: main, supl: supl}",
									Start: ast.Position{
										Column: 20,
										Line:   16,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   16,
										},
										Source: "main: main",
										Start: ast.Position{
											Column: 21,
											Line:   16,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   16,
											},
											Source: "main",
											Start: ast.Position{
												Column: 21,
												Line:   16,
											},
										},
									},
									Name: "main",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   16,
											},
											Source: "main",
											Start: ast.Position{
												Column: 27,
												Line:   16,
											},
										},
									},
									Name: "main",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   16,
										},
										Source: "supl: supl",
										Start: ast.Position{
											Column: 33,
											Line:   16,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   16,
											},
											Source: "supl",
											Start: ast.Position{
												Column: 33,
												Line:   16,
											},
										},
									},
									Name: "supl",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   16,
											},
											Source: "supl",
											Start: ast.Position{
												Column: 39,
												Line:   16,
											},
										},
									},
									Name: "supl",
								},
							}},
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 113,
									Line:   16,
								},
								Source: "on: [\"_start\", \"_stop\", \"orgID\", \"taskID\", \"runID\", \"_measurement\"]",
								Start: ast.Position{
									Column: 46,
									Line:   16,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   16,
									},
									Source: "on",
									Start: ast.Position{
										Column: 46,
										Line:   16,
									},
								},
							},
							Name: "on",
						},
						Value: &ast.ArrayExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 113,
										Line:   16,
									},
									Source: "[\"_start\", \"_stop\", \"orgID\", \"taskID\", \"runID\", \"_measurement\"]",
									Start: ast.Position{
										Column: 50,
										Line:   16,
									},
								},
							},
							Elements: []ast.Expression{&ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   16,
										},
										Source: "\"_start\"",
										Start: ast.Position{
											Column: 51,
											Line:   16,
										},
									},
								},
								Value: "_start",
							}, &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   16,
										},
										Source: "\"_stop\"",
										Start: ast.Position{
											Column: 61,
											Line:   16,
										},
									},
								},
								Value: "_stop",
							}, &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 77,
											Line:   16,
										},
										Source: "\"orgID\"",
										Start: ast.Position{
											Column: 70,
											Line:   16,
										},
									},
								},
								Value: "orgID",
							}, &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 87,
											Line:   16,
										},
										Source: "\"taskID\"",
										Start: ast.Position{
											Column: 79,
											Line:   16,
										},
									},
								},
								Value: "taskID",
							}, &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 96,
											Line:   16,
										},
										Source: "\"runID\"",
										Start: ast.Position{
											Column: 89,
											Line:   16,
										},
									},
								},
								Value: "runID",
							}, &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 112,
											Line:   16,
										},
										Source: "\"_measurement\"",
										Start: ast.Position{
											Column: 98,
											Line:   16,
										},
									},
								},
								Value: "_measurement",
							}},
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 114,
							Line:   16,
						},
						Source: "join(tables: {main: main, supl: supl}, on: [\"_start\", \"_stop\", \"orgID\", \"taskID\", \"runID\", \"_measurement\"])",
						Start: ast.Position{
							Column: 7,
							Line:   16,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   16,
							},
							Source: "join",
							Start: ast.Position{
								Column: 7,
								Line:   16,
							},
						},
					},
					Name: "join",
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 51,
						Line:   17,
					},
					Source: "want = testLoadData(file: \"task_per_line.out.csv\")",
					Start: ast.Position{
						Column: 1,
						Line:   17,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   17,
						},
						Source: "want",
						Start: ast.Position{
							Column: 1,
							Line:   17,
						},
					},
				},
				Name: "want",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   17,
							},
							Source: "file: \"task_per_line.out.csv\"",
							Start: ast.Position{
								Column: 21,
								Line:   17,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   17,
								},
								Source: "file: \"task_per_line.out.csv\"",
								Start: ast.Position{
									Column: 21,
									Line:   17,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   17,
									},
									Source: "file",
									Start: ast.Position{
										Column: 21,
										Line:   17,
									},
								},
							},
							Name: "file",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   17,
									},
									Source: "\"task_per_line.out.csv\"",
									Start: ast.Position{
										Column: 27,
										Line:   17,
									},
								},
							},
							Value: "task_per_line.out.csv",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 51,
							Line:   17,
						},
						Source: "testLoadData(file: \"task_per_line.out.csv\")",
						Start: ast.Position{
							Column: 8,
							Line:   17,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   17,
							},
							Source: "testLoadData",
							Start: ast.Position{
								Column: 8,
								Line:   17,
							},
						},
					},
					Name: "testLoadData",
				},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 58,
						Line:   18,
					},
					Source: "assertEquals(name: \"task_per_line\", want: want, got: got)",
					Start: ast.Position{
						Column: 1,
						Line:   18,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 57,
								Line:   18,
							},
							Source: "name: \"task_per_line\", want: want, got: got",
							Start: ast.Position{
								Column: 14,
								Line:   18,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   18,
								},
								Source: "name: \"task_per_line\"",
								Start: ast.Position{
									Column: 14,
									Line:   18,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   18,
									},
									Source: "name",
									Start: ast.Position{
										Column: 14,
										Line:   18,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   18,
									},
									Source: "\"task_per_line\"",
									Start: ast.Position{
										Column: 20,
										Line:   18,
									},
								},
							},
							Value: "task_per_line",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   18,
								},
								Source: "want: want",
								Start: ast.Position{
									Column: 37,
									Line:   18,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   18,
									},
									Source: "want",
									Start: ast.Position{
										Column: 37,
										Line:   18,
									},
								},
							},
							Name: "want",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   18,
									},
									Source: "want",
									Start: ast.Position{
										Column: 43,
										Line:   18,
									},
								},
							},
							Name: "want",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   18,
								},
								Source: "got: got",
								Start: ast.Position{
									Column: 49,
									Line:   18,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   18,
									},
									Source: "got",
									Start: ast.Position{
										Column: 49,
										Line:   18,
									},
								},
							},
							Name: "got",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   18,
									},
									Source: "got",
									Start: ast.Position{
										Column: 54,
										Line:   18,
									},
								},
							},
							Name: "got",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 58,
							Line:   18,
						},
						Source: "assertEquals(name: \"task_per_line\", want: want, got: got)",
						Start: ast.Position{
							Column: 1,
							Line:   18,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   18,
							},
							Source: "assertEquals",
							Start: ast.Position{
								Column: 1,
								Line:   18,
							},
						},
					},
					Name: "assertEquals",
				},
			},
		}},
		Imports: nil,
		Name:    "task_per_line.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 57,
					Line:   11,
				},
				Source: "option task = {\n    name: \"test\",\n    every: 10m,\n}\n\nfrom(bucket: \"test\")\n    |> range(start:2018-05-22T19:53:26Z)\n    |> window(every: task.every)\n    |> group(by: [\"_field\", \"host\"])\n    |> sum()\n    |> to(bucket: \"test\", tagColumns:[\"host\", \"_field\"])",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   4,
						},
						Source: "task = {\n    name: \"test\",\n    every: 10m,\n}",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   1,
							},
							Source: "task",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Name: "task",
				},
				Init: &ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   4,
							},
							Source: "{\n    name: \"test\",\n    every: 10m,\n}",
							Start: ast.Position{
								Column: 15,
								Line:   1,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   2,
								},
								Source: "name: \"test\"",
								Start: ast.Position{
									Column: 5,
									Line:   2,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   2,
									},
									Source: "name",
									Start: ast.Position{
										Column: 5,
										Line:   2,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   2,
									},
									Source: "\"test\"",
									Start: ast.Position{
										Column: 11,
										Line:   2,
									},
								},
							},
							Value: "test",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   3,
								},
								Source: "every: 10m",
								Start: ast.Position{
									Column: 5,
									Line:   3,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   3,
									},
									Source: "every",
									Start: ast.Position{
										Column: 5,
										Line:   3,
									},
								},
							},
							Name: "every",
						},
						Value: &ast.DurationLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   3,
									},
									Source: "10m",
									Start: ast.Position{
										Column: 12,
										Line:   3,
									},
								},
							},
							Values: []ast.Duration{ast.Duration{
								Magnitude: int64(10),
								Unit:      "m",
							}},
						},
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   4,
					},
					Source: "option task = {\n    name: \"test\",\n    every: 10m,\n}",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 57,
						Line:   11,
					},
					Source: "from(bucket: \"test\")\n    |> range(start:2018-05-22T19:53:26Z)\n    |> window(every: task.every)\n    |> group(by: [\"_field\", \"host\"])\n    |> sum()\n    |> to(bucket: \"test\", tagColumns:[\"host\", \"_field\"])",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   6,
												},
												Source: "bucket: \"test\"",
												Start: ast.Position{
													Column: 6,
													Line:   6,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   6,
													},
													Source: "bucket: \"test\"",
													Start: ast.Position{
														Column: 6,
														Line:   6,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   6,
														},
														Source: "bucket",
														Start: ast.Position{
															Column: 6,
															Line:   6,
														},
													},
												},
												Name: "bucket",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   6,
														},
														Source: "\"test\"",
														Start: ast.Position{
															Column: 14,
															Line:   6,
														},
													},
												},
												Value: "test",
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   6,
											},
											Source: "from(bucket: \"test\")",
											Start: ast.Position{
												Column: 1,
												Line:   6,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 5,
													Line:   6,
												},
												Source: "from",
												Start: ast.Position{
													Column: 1,
													Line:   6,
												},
											},
										},
										Name: "from",
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   7,
										},
										Source: "from(bucket: \"test\")\n    |> range(start:2018-05-22T19:53:26Z)",
										Start: ast.Position{
											Column: 1,
											Line:   6,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   7,
												},
												Source: "start:2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 14,
													Line:   7,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   7,
													},
													Source: "start:2018-05-22T19:53:26Z",
													Start: ast.Position{
														Column: 14,
														Line:   7,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   7,
														},
														Source: "start",
														Start: ast.Position{
															Column: 14,
															Line:   7,
														},
													},
												},
												Name: "start",
											},
											Value: &ast.DateTimeLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   7,
														},
														Source: "2018-05-22T19:53:26Z",
														Start: ast.Position{
															Column: 20,
															Line:   7,
														},
													},
												},
												Value: time.Time{},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   7,
											},
											Source: "range(start:2018-05-22T19:53:26Z)",
											Start: ast.Position{
												Column: 8,
												Line:   7,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   7,
												},
												Source: "range",
												Start: ast.Position{
													Column: 8,
													Line:   7,
												},
											},
										},
										Name: "range",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   8,
									},
									Source: "from(bucket: \"test\")\n    |> range(start:2018-05-22T19:53:26Z)\n    |> window(every: task.every)",
									Start: ast.Position{
										Column: 1,
										Line:   6,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   8,
											},
											Source: "every: task.every",
											Start: ast.Position{
												Column: 15,
												Line:   8,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   8,
												},
												Source: "every: task.every",
												Start: ast.Position{
													Column: 15,
													Line:   8,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   8,
													},
													Source: "every",
													Start: ast.Position{
														Column: 15,
														Line:   8,
													},
												},
											},
											Name: "every",
										},
										Value: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   8,
													},
													Source: "task.every",
													Start: ast.Position{
														Column: 22,
														Line:   8,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   8,
														},
														Source: "task",
														Start: ast.Position{
															Column: 22,
															Line:   8,
														},
													},
												},
												Name: "task",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   8,
														},
														Source: "every",
														Start: ast.Position{
															Column: 27,
															Line:   8,
														},
													},
												},
												Name: "every",
											},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   8,
										},
										Source: "window(every: task.every)",
										Start: ast.Position{
											Column: 8,
											Line:   8,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   8,
											},
											Source: "window",
											Start: ast.Position{
												Column: 8,
												Line:   8,
											},
										},
									},
									Name: "window",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   9,
								},
								Source: "from(bucket: \"test\")\n    |> range(start:2018-05-22T19:53:26Z)\n    |> window(every: task.every)\n    |> group(by: [\"_field\", \"host\"])",
								Start: ast.Position{
									Column: 1,
									Line:   6,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   9,
										},
										Source: "by: [\"_field\", \"host\"]",
										Start: ast.Position{
											Column: 14,
											Line:   9,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   9,
											},
											Source: "by: [\"_field\", \"host\"]",
											Start: ast.Position{
												Column: 14,
												Line:   9,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   9,
												},
												Source: "by",
												Start: ast.Position{
													Column: 14,
													Line:   9,
												},
											},
										},
										Name: "by",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   9,
												},
												Source: "[\"_field\", \"host\"]",
												Start: ast.Position{
													Column: 18,
													Line:   9,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   9,
													},
													Source: "\"_field\"",
													Start: ast.Position{
														Column: 19,
														Line:   9,
													},
												},
											},
											Value: "_field",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   9,
													},
													Source: "\"host\"",
													Start: ast.Position{
														Column: 29,
														Line:   9,
													},
												},
											},
											Value: "host",
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   9,
									},
									Source: "group(by: [\"_field\", \"host\"])",
									Start: ast.Position{
										Column: 8,
										Line:   9,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   9,
										},
										Source: "group",
										Start: ast.Position{
											Column: 8,
											Line:   9,
										},
									},
								},
								Name: "group",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   10,
							},
							Source: "from(bucket: \"test\")\n    |> range(start:2018-05-22T19:53:26Z)\n    |> window(every: task.every)\n    |> group(by: [\"_field\", \"host\"])\n    |> sum()",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   10,
								},
								Source: "sum()",
								Start: ast.Position{
									Column: 8,
									Line:   10,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   10,
									},
									Source: "sum",
									Start: ast.Position{
										Column: 8,
										Line:   10,
									},
								},
							},
							Name: "sum",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 57,
							Line:   11,
						},
						Source: "from(bucket: \"test\")\n    |> range(start:2018-05-22T19:53:26Z)\n    |> window(every: task.every)\n    |> group(by: [\"_field\", \"host\"])\n    |> sum()\n    |> to(bucket: \"test\", tagColumns:[\"host\", \"_field\"])",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   11,
								},
								Source: "bucket: \"test\", tagColumns:[\"host\", \"_field\"]",
								Start: ast.Position{
									Column: 11,
									Line:   11,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   11,
									},
									Source: "bucket: \"test\"",
									Start: ast.Position{
										Column: 11,
										Line:   11,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   11,
										},
										Source: "bucket",
										Start: ast.Position{
											Column: 11,
											Line:   11,
										},
									},
								},
								Name: "bucket",
							},
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   11,
										},
										Source: "\"test\"",
										Start: ast.Position{
											Column: 19,
											Line:   11,
										},
									},
								},
								Value: "test",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   11,
									},
									Source: "tagColumns:[\"host\", \"_field\"]",
									Start: ast.Position{
										Column: 27,
										Line:   11,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   11,
										},
										Source: "tagColumns",
										Start: ast.Position{
											Column: 27,
											Line:   11,
										},
									},
								},
								Name: "tagColumns",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   11,
										},
										Source: "[\"host\", \"_field\"]",
										Start: ast.Position{
											Column: 38,
											Line:   11,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   11,
											},
											Source: "\"host\"",
											Start: ast.Position{
												Column: 39,
												Line:   11,
											},
										},
									},
									Value: "host",
								}, &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   11,
											},
											Source: "\"_field\"",
											Start: ast.Position{
												Column: 47,
												Line:   11,
											},
										},
									},
									Value: "_field",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 57,
								Line:   11,
							},
							Source: "to(bucket: \"test\", tagColumns:[\"host\", \"_field\"])",
							Start: ast.Position{
								Column: 8,
								Line:   11,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   11,
								},
								Source: "to",
								Start: ast.Position{
									Column: 8,
									Line:   11,
								},
							},
						},
						Name: "to",
					},
				},
			},
		}},
		Imports: nil,
		Name:    "to.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 104,
					Line:   6,
				},
				Source: "t_top = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:24.421470485Z)\n    |> top(n:2)\n\ntestingTest(name: \"top\", load: testLoadData, infile: \"top.in.csv\", outfile: \"top.out.csv\", test: t_top)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   4,
					},
					Source: "t_top = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:24.421470485Z)\n    |> top(n:2)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   1,
						},
						Source: "t_top",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_top",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:24.421470485Z)\n    |> top(n:2)",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:24.421470485Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:24.421470485Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:24.421470485Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   3,
												},
												Source: "2018-05-22T19:53:24.421470485Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:24.421470485Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:24.421470485Z)\n    |> top(n:2)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   4,
									},
									Source: "n:2",
									Start: ast.Position{
										Column: 12,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   4,
										},
										Source: "n:2",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   4,
											},
											Source: "n",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   4,
											},
											Source: "2",
											Start: ast.Position{
												Column: 14,
												Line:   4,
											},
										},
									},
									Value: int64(2),
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   4,
								},
								Source: "top(n:2)",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   4,
									},
									Source: "top",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "top",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 104,
						Line:   6,
					},
					Source: "testingTest(name: \"top\", load: testLoadData, infile: \"top.in.csv\", outfile: \"top.out.csv\", test: t_top)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   6,
							},
							Source: "name: \"top\", load: testLoadData, infile: \"top.in.csv\", outfile: \"top.out.csv\", test: t_top",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   6,
								},
								Source: "name: \"top\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   6,
									},
									Source: "\"top\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "top",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 26,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 26,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 32,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   6,
								},
								Source: "infile: \"top.in.csv\"",
								Start: ast.Position{
									Column: 46,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 46,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   6,
									},
									Source: "\"top.in.csv\"",
									Start: ast.Position{
										Column: 54,
										Line:   6,
									},
								},
							},
							Value: "top.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   6,
								},
								Source: "outfile: \"top.out.csv\"",
								Start: ast.Position{
									Column: 68,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 68,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   6,
									},
									Source: "\"top.out.csv\"",
									Start: ast.Position{
										Column: 77,
										Line:   6,
									},
								},
							},
							Value: "top.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   6,
								},
								Source: "test: t_top",
								Start: ast.Position{
									Column: 92,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 92,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   6,
									},
									Source: "t_top",
									Start: ast.Position{
										Column: 98,
										Line:   6,
									},
								},
							},
							Name: "t_top",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 104,
							Line:   6,
						},
						Source: "testingTest(name: \"top\", load: testLoadData, infile: \"top.in.csv\", outfile: \"top.out.csv\", test: t_top)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "top.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 50,
					Line:   15,
				},
				Source: "left = testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)\n    |> filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_guest_nice\")\n    |> drop(columns: [\"_start\", \"_stop\"])\n\nright = testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)\n    |> filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_idle\")\n    |> drop(columns: [\"_start\", \"_stop\"])\n\ngot = union(tables: [left, right])\n    |> sort(columns: [\"_time\"])\n\nwant = testLoadData(file: \"union.out.csv\")\nassertEquals(name: \"union\", want: want, got: got)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 42,
						Line:   4,
					},
					Source: "left = testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)\n    |> filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_guest_nice\")\n    |> drop(columns: [\"_start\", \"_stop\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   1,
						},
						Source: "left",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "left",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   1,
										},
										Source: "file: \"union.in.csv\"",
										Start: ast.Position{
											Column: 21,
											Line:   1,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   1,
											},
											Source: "file: \"union.in.csv\"",
											Start: ast.Position{
												Column: 21,
												Line:   1,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   1,
												},
												Source: "file",
												Start: ast.Position{
													Column: 21,
													Line:   1,
												},
											},
										},
										Name: "file",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   1,
												},
												Source: "\"union.in.csv\"",
												Start: ast.Position{
													Column: 27,
													Line:   1,
												},
											},
										},
										Value: "union.in.csv",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   1,
									},
									Source: "testLoadData(file: \"union.in.csv\")",
									Start: ast.Position{
										Column: 8,
										Line:   1,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   1,
										},
										Source: "testLoadData",
										Start: ast.Position{
											Column: 8,
											Line:   1,
										},
									},
								},
								Name: "testLoadData",
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   2,
								},
								Source: "testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)",
								Start: ast.Position{
									Column: 8,
									Line:   1,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   2,
										},
										Source: "start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z",
										Start: ast.Position{
											Column: 14,
											Line:   2,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   2,
											},
											Source: "start: 2018-05-22T19:53:00Z",
											Start: ast.Position{
												Column: 14,
												Line:   2,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   2,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   2,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   2,
												},
												Source: "2018-05-22T19:53:00Z",
												Start: ast.Position{
													Column: 21,
													Line:   2,
												},
											},
										},
										Value: time.Time{},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   2,
											},
											Source: "stop: 2018-05-22T19:53:50Z",
											Start: ast.Position{
												Column: 43,
												Line:   2,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   2,
												},
												Source: "stop",
												Start: ast.Position{
													Column: 43,
													Line:   2,
												},
											},
										},
										Name: "stop",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   2,
												},
												Source: "2018-05-22T19:53:50Z",
												Start: ast.Position{
													Column: 49,
													Line:   2,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   2,
									},
									Source: "range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)",
									Start: ast.Position{
										Column: 8,
										Line:   2,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   2,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   2,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 86,
								Line:   3,
							},
							Source: "testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)\n    |> filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_guest_nice\")",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 85,
										Line:   3,
									},
									Source: "fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_guest_nice\"",
									Start: ast.Position{
										Column: 15,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 85,
											Line:   3,
										},
										Source: "fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_guest_nice\"",
										Start: ast.Position{
											Column: 15,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   3,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 15,
												Line:   3,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 85,
												Line:   3,
											},
											Source: "(r) => r._field == \"usage_guest\" or r._field == \"usage_guest_nice\"",
											Start: ast.Position{
												Column: 19,
												Line:   3,
											},
										},
									},
									Body: &ast.LogicalExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 85,
													Line:   3,
												},
												Source: "r._field == \"usage_guest\" or r._field == \"usage_guest_nice\"",
												Start: ast.Position{
													Column: 26,
													Line:   3,
												},
											},
										},
										Left: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   3,
													},
													Source: "r._field == \"usage_guest\"",
													Start: ast.Position{
														Column: 26,
														Line:   3,
													},
												},
											},
											Left: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   3,
														},
														Source: "r._field",
														Start: ast.Position{
															Column: 26,
															Line:   3,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 27,
																Line:   3,
															},
															Source: "r",
															Start: ast.Position{
																Column: 26,
																Line:   3,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   3,
															},
															Source: "_field",
															Start: ast.Position{
																Column: 28,
																Line:   3,
															},
														},
													},
													Name: "_field",
												},
											},
											Operator: 14,
											Right: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   3,
														},
														Source: "\"usage_guest\"",
														Start: ast.Position{
															Column: 38,
															Line:   3,
														},
													},
												},
												Value: "usage_guest",
											},
										},
										Operator: 2,
										Right: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 85,
														Line:   3,
													},
													Source: "r._field == \"usage_guest_nice\"",
													Start: ast.Position{
														Column: 55,
														Line:   3,
													},
												},
											},
											Left: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 63,
															Line:   3,
														},
														Source: "r._field",
														Start: ast.Position{
															Column: 55,
															Line:   3,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   3,
															},
															Source: "r",
															Start: ast.Position{
																Column: 55,
																Line:   3,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 63,
																Line:   3,
															},
															Source: "_field",
															Start: ast.Position{
																Column: 57,
																Line:   3,
															},
														},
													},
													Name: "_field",
												},
											},
											Operator: 14,
											Right: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 85,
															Line:   3,
														},
														Source: "\"usage_guest_nice\"",
														Start: ast.Position{
															Column: 67,
															Line:   3,
														},
													},
												},
												Value: "usage_guest_nice",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   3,
												},
												Source: "r",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   3,
													},
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   3,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   3,
								},
								Source: "filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_guest_nice\")",
								Start: ast.Position{
									Column: 8,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   3,
									},
									Source: "filter",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Name: "filter",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 42,
							Line:   4,
						},
						Source: "testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)\n    |> filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_guest_nice\")\n    |> drop(columns: [\"_start\", \"_stop\"])",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   4,
								},
								Source: "columns: [\"_start\", \"_stop\"]",
								Start: ast.Position{
									Column: 13,
									Line:   4,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   4,
									},
									Source: "columns: [\"_start\", \"_stop\"]",
									Start: ast.Position{
										Column: 13,
										Line:   4,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   4,
										},
										Source: "columns",
										Start: ast.Position{
											Column: 13,
											Line:   4,
										},
									},
								},
								Name: "columns",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   4,
										},
										Source: "[\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 22,
											Line:   4,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   4,
											},
											Source: "\"_start\"",
											Start: ast.Position{
												Column: 23,
												Line:   4,
											},
										},
									},
									Value: "_start",
								}, &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   4,
											},
											Source: "\"_stop\"",
											Start: ast.Position{
												Column: 33,
												Line:   4,
											},
										},
									},
									Value: "_stop",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   4,
							},
							Source: "drop(columns: [\"_start\", \"_stop\"])",
							Start: ast.Position{
								Column: 8,
								Line:   4,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   4,
								},
								Source: "drop",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Name: "drop",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 42,
						Line:   9,
					},
					Source: "right = testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)\n    |> filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_idle\")\n    |> drop(columns: [\"_start\", \"_stop\"])",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   6,
						},
						Source: "right",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Name: "right",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   6,
										},
										Source: "file: \"union.in.csv\"",
										Start: ast.Position{
											Column: 22,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   6,
											},
											Source: "file: \"union.in.csv\"",
											Start: ast.Position{
												Column: 22,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   6,
												},
												Source: "file",
												Start: ast.Position{
													Column: 22,
													Line:   6,
												},
											},
										},
										Name: "file",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   6,
												},
												Source: "\"union.in.csv\"",
												Start: ast.Position{
													Column: 28,
													Line:   6,
												},
											},
										},
										Value: "union.in.csv",
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   6,
									},
									Source: "testLoadData(file: \"union.in.csv\")",
									Start: ast.Position{
										Column: 9,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   6,
										},
										Source: "testLoadData",
										Start: ast.Position{
											Column: 9,
											Line:   6,
										},
									},
								},
								Name: "testLoadData",
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   7,
								},
								Source: "testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)",
								Start: ast.Position{
									Column: 9,
									Line:   6,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   7,
										},
										Source: "start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z",
										Start: ast.Position{
											Column: 14,
											Line:   7,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   7,
											},
											Source: "start: 2018-05-22T19:53:50Z",
											Start: ast.Position{
												Column: 14,
												Line:   7,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   7,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   7,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   7,
												},
												Source: "2018-05-22T19:53:50Z",
												Start: ast.Position{
													Column: 21,
													Line:   7,
												},
											},
										},
										Value: time.Time{},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   7,
											},
											Source: "stop: 2018-05-22T19:54:20Z",
											Start: ast.Position{
												Column: 43,
												Line:   7,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   7,
												},
												Source: "stop",
												Start: ast.Position{
													Column: 43,
													Line:   7,
												},
											},
										},
										Name: "stop",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   7,
												},
												Source: "2018-05-22T19:54:20Z",
												Start: ast.Position{
													Column: 49,
													Line:   7,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   7,
									},
									Source: "range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)",
									Start: ast.Position{
										Column: 8,
										Line:   7,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   7,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   7,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 80,
								Line:   8,
							},
							Source: "testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)\n    |> filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_idle\")",
							Start: ast.Position{
								Column: 9,
								Line:   6,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   8,
									},
									Source: "fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_idle\"",
									Start: ast.Position{
										Column: 15,
										Line:   8,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 79,
											Line:   8,
										},
										Source: "fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_idle\"",
										Start: ast.Position{
											Column: 15,
											Line:   8,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   8,
											},
											Source: "fn",
											Start: ast.Position{
												Column: 15,
												Line:   8,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 79,
												Line:   8,
											},
											Source: "(r) => r._field == \"usage_guest\" or r._field == \"usage_idle\"",
											Start: ast.Position{
												Column: 19,
												Line:   8,
											},
										},
									},
									Body: &ast.LogicalExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 79,
													Line:   8,
												},
												Source: "r._field == \"usage_guest\" or r._field == \"usage_idle\"",
												Start: ast.Position{
													Column: 26,
													Line:   8,
												},
											},
										},
										Left: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   8,
													},
													Source: "r._field == \"usage_guest\"",
													Start: ast.Position{
														Column: 26,
														Line:   8,
													},
												},
											},
											Left: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   8,
														},
														Source: "r._field",
														Start: ast.Position{
															Column: 26,
															Line:   8,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 27,
																Line:   8,
															},
															Source: "r",
															Start: ast.Position{
																Column: 26,
																Line:   8,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   8,
															},
															Source: "_field",
															Start: ast.Position{
																Column: 28,
																Line:   8,
															},
														},
													},
													Name: "_field",
												},
											},
											Operator: 14,
											Right: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   8,
														},
														Source: "\"usage_guest\"",
														Start: ast.Position{
															Column: 38,
															Line:   8,
														},
													},
												},
												Value: "usage_guest",
											},
										},
										Operator: 2,
										Right: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 79,
														Line:   8,
													},
													Source: "r._field == \"usage_idle\"",
													Start: ast.Position{
														Column: 55,
														Line:   8,
													},
												},
											},
											Left: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 63,
															Line:   8,
														},
														Source: "r._field",
														Start: ast.Position{
															Column: 55,
															Line:   8,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   8,
															},
															Source: "r",
															Start: ast.Position{
																Column: 55,
																Line:   8,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 63,
																Line:   8,
															},
															Source: "_field",
															Start: ast.Position{
																Column: 57,
																Line:   8,
															},
														},
													},
													Name: "_field",
												},
											},
											Operator: 14,
											Right: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 79,
															Line:   8,
														},
														Source: "\"usage_idle\"",
														Start: ast.Position{
															Column: 67,
															Line:   8,
														},
													},
												},
												Value: "usage_idle",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   8,
												},
												Source: "r",
												Start: ast.Position{
													Column: 20,
													Line:   8,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   8,
													},
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   8,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   8,
								},
								Source: "filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_idle\")",
								Start: ast.Position{
									Column: 8,
									Line:   8,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   8,
									},
									Source: "filter",
									Start: ast.Position{
										Column: 8,
										Line:   8,
									},
								},
							},
							Name: "filter",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 42,
							Line:   9,
						},
						Source: "testLoadData(file: \"union.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)\n    |> filter(fn: (r) => r._field == \"usage_guest\" or r._field == \"usage_idle\")\n    |> drop(columns: [\"_start\", \"_stop\"])",
						Start: ast.Position{
							Column: 9,
							Line:   6,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   9,
								},
								Source: "columns: [\"_start\", \"_stop\"]",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   9,
									},
									Source: "columns: [\"_start\", \"_stop\"]",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   9,
										},
										Source: "columns",
										Start: ast.Position{
											Column: 13,
											Line:   9,
										},
									},
								},
								Name: "columns",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   9,
										},
										Source: "[\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 22,
											Line:   9,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   9,
											},
											Source: "\"_start\"",
											Start: ast.Position{
												Column: 23,
												Line:   9,
											},
										},
									},
									Value: "_start",
								}, &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   9,
											},
											Source: "\"_stop\"",
											Start: ast.Position{
												Column: 33,
												Line:   9,
											},
										},
									},
									Value: "_stop",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   9,
							},
							Source: "drop(columns: [\"_start\", \"_stop\"])",
							Start: ast.Position{
								Column: 8,
								Line:   9,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   9,
								},
								Source: "drop",
								Start: ast.Position{
									Column: 8,
									Line:   9,
								},
							},
						},
						Name: "drop",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   12,
					},
					Source: "got = union(tables: [left, right])\n    |> sort(columns: [\"_time\"])",
					Start: ast.Position{
						Column: 1,
						Line:   11,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   11,
						},
						Source: "got",
						Start: ast.Position{
							Column: 1,
							Line:   11,
						},
					},
				},
				Name: "got",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   11,
								},
								Source: "tables: [left, right]",
								Start: ast.Position{
									Column: 13,
									Line:   11,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   11,
									},
									Source: "tables: [left, right]",
									Start: ast.Position{
										Column: 13,
										Line:   11,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   11,
										},
										Source: "tables",
										Start: ast.Position{
											Column: 13,
											Line:   11,
										},
									},
								},
								Name: "tables",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   11,
										},
										Source: "[left, right]",
										Start: ast.Position{
											Column: 21,
											Line:   11,
										},
									},
								},
								Elements: []ast.Expression{&ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   11,
											},
											Source: "left",
											Start: ast.Position{
												Column: 22,
												Line:   11,
											},
										},
									},
									Name: "left",
								}, &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   11,
											},
											Source: "right",
											Start: ast.Position{
												Column: 28,
												Line:   11,
											},
										},
									},
									Name: "right",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   11,
							},
							Source: "union(tables: [left, right])",
							Start: ast.Position{
								Column: 7,
								Line:   11,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   11,
								},
								Source: "union",
								Start: ast.Position{
									Column: 7,
									Line:   11,
								},
							},
						},
						Name: "union",
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   12,
						},
						Source: "union(tables: [left, right])\n    |> sort(columns: [\"_time\"])",
						Start: ast.Position{
							Column: 7,
							Line:   11,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   12,
								},
								Source: "columns: [\"_time\"]",
								Start: ast.Position{
									Column: 13,
									Line:   12,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   12,
									},
									Source: "columns: [\"_time\"]",
									Start: ast.Position{
										Column: 13,
										Line:   12,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   12,
										},
										Source: "columns",
										Start: ast.Position{
											Column: 13,
											Line:   12,
										},
									},
								},
								Name: "columns",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   12,
										},
										Source: "[\"_time\"]",
										Start: ast.Position{
											Column: 22,
											Line:   12,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   12,
											},
											Source: "\"_time\"",
											Start: ast.Position{
												Column: 23,
												Line:   12,
											},
										},
									},
									Value: "_time",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   12,
							},
							Source: "sort(columns: [\"_time\"])",
							Start: ast.Position{
								Column: 8,
								Line:   12,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   12,
								},
								Source: "sort",
								Start: ast.Position{
									Column: 8,
									Line:   12,
								},
							},
						},
						Name: "sort",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 43,
						Line:   14,
					},
					Source: "want = testLoadData(file: \"union.out.csv\")",
					Start: ast.Position{
						Column: 1,
						Line:   14,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   14,
						},
						Source: "want",
						Start: ast.Position{
							Column: 1,
							Line:   14,
						},
					},
				},
				Name: "want",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   14,
							},
							Source: "file: \"union.out.csv\"",
							Start: ast.Position{
								Column: 21,
								Line:   14,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   14,
								},
								Source: "file: \"union.out.csv\"",
								Start: ast.Position{
									Column: 21,
									Line:   14,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   14,
									},
									Source: "file",
									Start: ast.Position{
										Column: 21,
										Line:   14,
									},
								},
							},
							Name: "file",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   14,
									},
									Source: "\"union.out.csv\"",
									Start: ast.Position{
										Column: 27,
										Line:   14,
									},
								},
							},
							Value: "union.out.csv",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 43,
							Line:   14,
						},
						Source: "testLoadData(file: \"union.out.csv\")",
						Start: ast.Position{
							Column: 8,
							Line:   14,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   14,
							},
							Source: "testLoadData",
							Start: ast.Position{
								Column: 8,
								Line:   14,
							},
						},
					},
					Name: "testLoadData",
				},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 50,
						Line:   15,
					},
					Source: "assertEquals(name: \"union\", want: want, got: got)",
					Start: ast.Position{
						Column: 1,
						Line:   15,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   15,
							},
							Source: "name: \"union\", want: want, got: got",
							Start: ast.Position{
								Column: 14,
								Line:   15,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   15,
								},
								Source: "name: \"union\"",
								Start: ast.Position{
									Column: 14,
									Line:   15,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   15,
									},
									Source: "name",
									Start: ast.Position{
										Column: 14,
										Line:   15,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   15,
									},
									Source: "\"union\"",
									Start: ast.Position{
										Column: 20,
										Line:   15,
									},
								},
							},
							Value: "union",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   15,
								},
								Source: "want: want",
								Start: ast.Position{
									Column: 29,
									Line:   15,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   15,
									},
									Source: "want",
									Start: ast.Position{
										Column: 29,
										Line:   15,
									},
								},
							},
							Name: "want",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   15,
									},
									Source: "want",
									Start: ast.Position{
										Column: 35,
										Line:   15,
									},
								},
							},
							Name: "want",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   15,
								},
								Source: "got: got",
								Start: ast.Position{
									Column: 41,
									Line:   15,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   15,
									},
									Source: "got",
									Start: ast.Position{
										Column: 41,
										Line:   15,
									},
								},
							},
							Name: "got",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   15,
									},
									Source: "got",
									Start: ast.Position{
										Column: 46,
										Line:   15,
									},
								},
							},
							Name: "got",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   15,
						},
						Source: "assertEquals(name: \"union\", want: want, got: got)",
						Start: ast.Position{
							Column: 1,
							Line:   15,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   15,
							},
							Source: "assertEquals",
							Start: ast.Position{
								Column: 1,
								Line:   15,
							},
						},
					},
					Name: "assertEquals",
				},
			},
		}},
		Imports: nil,
		Name:    "union.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 64,
					Line:   16,
				},
				Source: "left = testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n    |> group(columns: [\"host\"])\n    |> drop(columns: [\"_start\", \"_stop\", \"name\"])\n\nright = testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"read_bytes\")\n    |> group(columns: [\"host\"])\n    |> drop(columns: [\"_start\", \"_stop\"])\n\ngot = union(tables: [left, right])\n    |> sort(columns: [\"_time\", \"_field\", \"_value\"])\nwant = testLoadData(file: \"union_heterogeneous.out.csv\")\nassertEquals(name: \"union_heterogeneous\", want: want, got: got)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 50,
						Line:   5,
					},
					Source: "left = testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n    |> group(columns: [\"host\"])\n    |> drop(columns: [\"_start\", \"_stop\", \"name\"])",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   1,
						},
						Source: "left",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "left",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   1,
											},
											Source: "file: \"union_heterogeneous.in.csv\"",
											Start: ast.Position{
												Column: 21,
												Line:   1,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   1,
												},
												Source: "file: \"union_heterogeneous.in.csv\"",
												Start: ast.Position{
													Column: 21,
													Line:   1,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   1,
													},
													Source: "file",
													Start: ast.Position{
														Column: 21,
														Line:   1,
													},
												},
											},
											Name: "file",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 55,
														Line:   1,
													},
													Source: "\"union_heterogeneous.in.csv\"",
													Start: ast.Position{
														Column: 27,
														Line:   1,
													},
												},
											},
											Value: "union_heterogeneous.in.csv",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   1,
										},
										Source: "testLoadData(file: \"union_heterogeneous.in.csv\")",
										Start: ast.Position{
											Column: 8,
											Line:   1,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   1,
											},
											Source: "testLoadData",
											Start: ast.Position{
												Column: 8,
												Line:   1,
											},
										},
									},
									Name: "testLoadData",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   2,
									},
									Source: "testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)",
									Start: ast.Position{
										Column: 8,
										Line:   1,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   2,
											},
											Source: "start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z",
											Start: ast.Position{
												Column: 14,
												Line:   2,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   2,
												},
												Source: "start: 2018-05-22T19:53:00Z",
												Start: ast.Position{
													Column: 14,
													Line:   2,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   2,
													},
													Source: "start",
													Start: ast.Position{
														Column: 14,
														Line:   2,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   2,
													},
													Source: "2018-05-22T19:53:00Z",
													Start: ast.Position{
														Column: 21,
														Line:   2,
													},
												},
											},
											Value: time.Time{},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   2,
												},
												Source: "stop: 2018-05-22T19:53:50Z",
												Start: ast.Position{
													Column: 43,
													Line:   2,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   2,
													},
													Source: "stop",
													Start: ast.Position{
														Column: 43,
														Line:   2,
													},
												},
											},
											Name: "stop",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   2,
													},
													Source: "2018-05-22T19:53:50Z",
													Start: ast.Position{
														Column: 49,
														Line:   2,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   2,
										},
										Source: "range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)",
										Start: ast.Position{
											Column: 8,
											Line:   2,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   2,
											},
											Source: "range",
											Start: ast.Position{
												Column: 8,
												Line:   2,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   3,
								},
								Source: "testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")",
								Start: ast.Position{
									Column: 8,
									Line:   1,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   3,
										},
										Source: "fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\"",
										Start: ast.Position{
											Column: 15,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 78,
												Line:   3,
											},
											Source: "fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\"",
											Start: ast.Position{
												Column: 15,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   3,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 15,
													Line:   3,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 78,
													Line:   3,
												},
												Source: "(r) => r._measurement == \"diskio\" and r._field == \"io_time\"",
												Start: ast.Position{
													Column: 19,
													Line:   3,
												},
											},
										},
										Body: &ast.LogicalExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 78,
														Line:   3,
													},
													Source: "r._measurement == \"diskio\" and r._field == \"io_time\"",
													Start: ast.Position{
														Column: 26,
														Line:   3,
													},
												},
											},
											Left: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   3,
														},
														Source: "r._measurement == \"diskio\"",
														Start: ast.Position{
															Column: 26,
															Line:   3,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   3,
															},
															Source: "r._measurement",
															Start: ast.Position{
																Column: 26,
																Line:   3,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 27,
																	Line:   3,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 26,
																	Line:   3,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   3,
																},
																Source: "_measurement",
																Start: ast.Position{
																	Column: 28,
																	Line:   3,
																},
															},
														},
														Name: "_measurement",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   3,
															},
															Source: "\"diskio\"",
															Start: ast.Position{
																Column: 44,
																Line:   3,
															},
														},
													},
													Value: "diskio",
												},
											},
											Operator: 1,
											Right: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 78,
															Line:   3,
														},
														Source: "r._field == \"io_time\"",
														Start: ast.Position{
															Column: 57,
															Line:   3,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 65,
																Line:   3,
															},
															Source: "r._field",
															Start: ast.Position{
																Column: 57,
																Line:   3,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   3,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 57,
																	Line:   3,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 65,
																	Line:   3,
																},
																Source: "_field",
																Start: ast.Position{
																	Column: 59,
																	Line:   3,
																},
															},
														},
														Name: "_field",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 78,
																Line:   3,
															},
															Source: "\"io_time\"",
															Start: ast.Position{
																Column: 69,
																Line:   3,
															},
														},
													},
													Value: "io_time",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   3,
													},
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   3,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   3,
														},
														Source: "r",
														Start: ast.Position{
															Column: 20,
															Line:   3,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   3,
									},
									Source: "filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   3,
										},
										Source: "filter",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   4,
							},
							Source: "testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n    |> group(columns: [\"host\"])",
							Start: ast.Position{
								Column: 8,
								Line:   1,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   4,
									},
									Source: "columns: [\"host\"]",
									Start: ast.Position{
										Column: 14,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   4,
										},
										Source: "columns: [\"host\"]",
										Start: ast.Position{
											Column: 14,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   4,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 14,
												Line:   4,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   4,
											},
											Source: "[\"host\"]",
											Start: ast.Position{
												Column: 23,
												Line:   4,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   4,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 24,
													Line:   4,
												},
											},
										},
										Value: "host",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   4,
								},
								Source: "group(columns: [\"host\"])",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   4,
									},
									Source: "group",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "group",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   5,
						},
						Source: "testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:00Z, stop: 2018-05-22T19:53:50Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"io_time\")\n    |> group(columns: [\"host\"])\n    |> drop(columns: [\"_start\", \"_stop\", \"name\"])",
						Start: ast.Position{
							Column: 8,
							Line:   1,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   5,
								},
								Source: "columns: [\"_start\", \"_stop\", \"name\"]",
								Start: ast.Position{
									Column: 13,
									Line:   5,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   5,
									},
									Source: "columns: [\"_start\", \"_stop\", \"name\"]",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   5,
										},
										Source: "columns",
										Start: ast.Position{
											Column: 13,
											Line:   5,
										},
									},
								},
								Name: "columns",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   5,
										},
										Source: "[\"_start\", \"_stop\", \"name\"]",
										Start: ast.Position{
											Column: 22,
											Line:   5,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   5,
											},
											Source: "\"_start\"",
											Start: ast.Position{
												Column: 23,
												Line:   5,
											},
										},
									},
									Value: "_start",
								}, &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   5,
											},
											Source: "\"_stop\"",
											Start: ast.Position{
												Column: 33,
												Line:   5,
											},
										},
									},
									Value: "_stop",
								}, &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   5,
											},
											Source: "\"name\"",
											Start: ast.Position{
												Column: 42,
												Line:   5,
											},
										},
									},
									Value: "name",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   5,
							},
							Source: "drop(columns: [\"_start\", \"_stop\", \"name\"])",
							Start: ast.Position{
								Column: 8,
								Line:   5,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   5,
								},
								Source: "drop",
								Start: ast.Position{
									Column: 8,
									Line:   5,
								},
							},
						},
						Name: "drop",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 42,
						Line:   11,
					},
					Source: "right = testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"read_bytes\")\n    |> group(columns: [\"host\"])\n    |> drop(columns: [\"_start\", \"_stop\"])",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   7,
						},
						Source: "right",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "right",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   7,
											},
											Source: "file: \"union_heterogeneous.in.csv\"",
											Start: ast.Position{
												Column: 22,
												Line:   7,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   7,
												},
												Source: "file: \"union_heterogeneous.in.csv\"",
												Start: ast.Position{
													Column: 22,
													Line:   7,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   7,
													},
													Source: "file",
													Start: ast.Position{
														Column: 22,
														Line:   7,
													},
												},
											},
											Name: "file",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 56,
														Line:   7,
													},
													Source: "\"union_heterogeneous.in.csv\"",
													Start: ast.Position{
														Column: 28,
														Line:   7,
													},
												},
											},
											Value: "union_heterogeneous.in.csv",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   7,
										},
										Source: "testLoadData(file: \"union_heterogeneous.in.csv\")",
										Start: ast.Position{
											Column: 9,
											Line:   7,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   7,
											},
											Source: "testLoadData",
											Start: ast.Position{
												Column: 9,
												Line:   7,
											},
										},
									},
									Name: "testLoadData",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   8,
									},
									Source: "testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)",
									Start: ast.Position{
										Column: 9,
										Line:   7,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   8,
											},
											Source: "start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z",
											Start: ast.Position{
												Column: 14,
												Line:   8,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   8,
												},
												Source: "start: 2018-05-22T19:53:50Z",
												Start: ast.Position{
													Column: 14,
													Line:   8,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   8,
													},
													Source: "start",
													Start: ast.Position{
														Column: 14,
														Line:   8,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   8,
													},
													Source: "2018-05-22T19:53:50Z",
													Start: ast.Position{
														Column: 21,
														Line:   8,
													},
												},
											},
											Value: time.Time{},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   8,
												},
												Source: "stop: 2018-05-22T19:54:20Z",
												Start: ast.Position{
													Column: 43,
													Line:   8,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   8,
													},
													Source: "stop",
													Start: ast.Position{
														Column: 43,
														Line:   8,
													},
												},
											},
											Name: "stop",
										},
										Value: &ast.DateTimeLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   8,
													},
													Source: "2018-05-22T19:54:20Z",
													Start: ast.Position{
														Column: 49,
														Line:   8,
													},
												},
											},
											Value: time.Time{},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   8,
										},
										Source: "range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)",
										Start: ast.Position{
											Column: 8,
											Line:   8,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   8,
											},
											Source: "range",
											Start: ast.Position{
												Column: 8,
												Line:   8,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   9,
								},
								Source: "testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"read_bytes\")",
								Start: ast.Position{
									Column: 9,
									Line:   7,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 81,
											Line:   9,
										},
										Source: "fn: (r) => r._measurement == \"diskio\" and r._field == \"read_bytes\"",
										Start: ast.Position{
											Column: 15,
											Line:   9,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 81,
												Line:   9,
											},
											Source: "fn: (r) => r._measurement == \"diskio\" and r._field == \"read_bytes\"",
											Start: ast.Position{
												Column: 15,
												Line:   9,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   9,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 15,
													Line:   9,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 81,
													Line:   9,
												},
												Source: "(r) => r._measurement == \"diskio\" and r._field == \"read_bytes\"",
												Start: ast.Position{
													Column: 19,
													Line:   9,
												},
											},
										},
										Body: &ast.LogicalExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 81,
														Line:   9,
													},
													Source: "r._measurement == \"diskio\" and r._field == \"read_bytes\"",
													Start: ast.Position{
														Column: 26,
														Line:   9,
													},
												},
											},
											Left: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   9,
														},
														Source: "r._measurement == \"diskio\"",
														Start: ast.Position{
															Column: 26,
															Line:   9,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   9,
															},
															Source: "r._measurement",
															Start: ast.Position{
																Column: 26,
																Line:   9,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 27,
																	Line:   9,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 26,
																	Line:   9,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   9,
																},
																Source: "_measurement",
																Start: ast.Position{
																	Column: 28,
																	Line:   9,
																},
															},
														},
														Name: "_measurement",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   9,
															},
															Source: "\"diskio\"",
															Start: ast.Position{
																Column: 44,
																Line:   9,
															},
														},
													},
													Value: "diskio",
												},
											},
											Operator: 1,
											Right: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 81,
															Line:   9,
														},
														Source: "r._field == \"read_bytes\"",
														Start: ast.Position{
															Column: 57,
															Line:   9,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 65,
																Line:   9,
															},
															Source: "r._field",
															Start: ast.Position{
																Column: 57,
																Line:   9,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   9,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 57,
																	Line:   9,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 65,
																	Line:   9,
																},
																Source: "_field",
																Start: ast.Position{
																	Column: 59,
																	Line:   9,
																},
															},
														},
														Name: "_field",
													},
												},
												Operator: 14,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 81,
																Line:   9,
															},
															Source: "\"read_bytes\"",
															Start: ast.Position{
																Column: 69,
																Line:   9,
															},
														},
													},
													Value: "read_bytes",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   9,
													},
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   9,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   9,
														},
														Source: "r",
														Start: ast.Position{
															Column: 20,
															Line:   9,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 82,
										Line:   9,
									},
									Source: "filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"read_bytes\")",
									Start: ast.Position{
										Column: 8,
										Line:   9,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   9,
										},
										Source: "filter",
										Start: ast.Position{
											Column: 8,
											Line:   9,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   10,
							},
							Source: "testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"read_bytes\")\n    |> group(columns: [\"host\"])",
							Start: ast.Position{
								Column: 9,
								Line:   7,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   10,
									},
									Source: "columns: [\"host\"]",
									Start: ast.Position{
										Column: 14,
										Line:   10,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   10,
										},
										Source: "columns: [\"host\"]",
										Start: ast.Position{
											Column: 14,
											Line:   10,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   10,
											},
											Source: "columns",
											Start: ast.Position{
												Column: 14,
												Line:   10,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   10,
											},
											Source: "[\"host\"]",
											Start: ast.Position{
												Column: 23,
												Line:   10,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   10,
												},
												Source: "\"host\"",
												Start: ast.Position{
													Column: 24,
													Line:   10,
												},
											},
										},
										Value: "host",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   10,
								},
								Source: "group(columns: [\"host\"])",
								Start: ast.Position{
									Column: 8,
									Line:   10,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   10,
									},
									Source: "group",
									Start: ast.Position{
										Column: 8,
										Line:   10,
									},
								},
							},
							Name: "group",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 42,
							Line:   11,
						},
						Source: "testLoadData(file: \"union_heterogeneous.in.csv\")\n    |> range(start: 2018-05-22T19:53:50Z, stop: 2018-05-22T19:54:20Z)\n    |> filter(fn: (r) => r._measurement == \"diskio\" and r._field == \"read_bytes\")\n    |> group(columns: [\"host\"])\n    |> drop(columns: [\"_start\", \"_stop\"])",
						Start: ast.Position{
							Column: 9,
							Line:   7,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   11,
								},
								Source: "columns: [\"_start\", \"_stop\"]",
								Start: ast.Position{
									Column: 13,
									Line:   11,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   11,
									},
									Source: "columns: [\"_start\", \"_stop\"]",
									Start: ast.Position{
										Column: 13,
										Line:   11,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   11,
										},
										Source: "columns",
										Start: ast.Position{
											Column: 13,
											Line:   11,
										},
									},
								},
								Name: "columns",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   11,
										},
										Source: "[\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 22,
											Line:   11,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   11,
											},
											Source: "\"_start\"",
											Start: ast.Position{
												Column: 23,
												Line:   11,
											},
										},
									},
									Value: "_start",
								}, &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   11,
											},
											Source: "\"_stop\"",
											Start: ast.Position{
												Column: 33,
												Line:   11,
											},
										},
									},
									Value: "_stop",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   11,
							},
							Source: "drop(columns: [\"_start\", \"_stop\"])",
							Start: ast.Position{
								Column: 8,
								Line:   11,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   11,
								},
								Source: "drop",
								Start: ast.Position{
									Column: 8,
									Line:   11,
								},
							},
						},
						Name: "drop",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 52,
						Line:   14,
					},
					Source: "got = union(tables: [left, right])\n    |> sort(columns: [\"_time\", \"_field\", \"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   13,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   13,
						},
						Source: "got",
						Start: ast.Position{
							Column: 1,
							Line:   13,
						},
					},
				},
				Name: "got",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   13,
								},
								Source: "tables: [left, right]",
								Start: ast.Position{
									Column: 13,
									Line:   13,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   13,
									},
									Source: "tables: [left, right]",
									Start: ast.Position{
										Column: 13,
										Line:   13,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   13,
										},
										Source: "tables",
										Start: ast.Position{
											Column: 13,
											Line:   13,
										},
									},
								},
								Name: "tables",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   13,
										},
										Source: "[left, right]",
										Start: ast.Position{
											Column: 21,
											Line:   13,
										},
									},
								},
								Elements: []ast.Expression{&ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   13,
											},
											Source: "left",
											Start: ast.Position{
												Column: 22,
												Line:   13,
											},
										},
									},
									Name: "left",
								}, &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   13,
											},
											Source: "right",
											Start: ast.Position{
												Column: 28,
												Line:   13,
											},
										},
									},
									Name: "right",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   13,
							},
							Source: "union(tables: [left, right])",
							Start: ast.Position{
								Column: 7,
								Line:   13,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   13,
								},
								Source: "union",
								Start: ast.Position{
									Column: 7,
									Line:   13,
								},
							},
						},
						Name: "union",
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 52,
							Line:   14,
						},
						Source: "union(tables: [left, right])\n    |> sort(columns: [\"_time\", \"_field\", \"_value\"])",
						Start: ast.Position{
							Column: 7,
							Line:   13,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   14,
								},
								Source: "columns: [\"_time\", \"_field\", \"_value\"]",
								Start: ast.Position{
									Column: 13,
									Line:   14,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   14,
									},
									Source: "columns: [\"_time\", \"_field\", \"_value\"]",
									Start: ast.Position{
										Column: 13,
										Line:   14,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   14,
										},
										Source: "columns",
										Start: ast.Position{
											Column: 13,
											Line:   14,
										},
									},
								},
								Name: "columns",
							},
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   14,
										},
										Source: "[\"_time\", \"_field\", \"_value\"]",
										Start: ast.Position{
											Column: 22,
											Line:   14,
										},
									},
								},
								Elements: []ast.Expression{&ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   14,
											},
											Source: "\"_time\"",
											Start: ast.Position{
												Column: 23,
												Line:   14,
											},
										},
									},
									Value: "_time",
								}, &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   14,
											},
											Source: "\"_field\"",
											Start: ast.Position{
												Column: 32,
												Line:   14,
											},
										},
									},
									Value: "_field",
								}, &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   14,
											},
											Source: "\"_value\"",
											Start: ast.Position{
												Column: 42,
												Line:   14,
											},
										},
									},
									Value: "_value",
								}},
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   14,
							},
							Source: "sort(columns: [\"_time\", \"_field\", \"_value\"])",
							Start: ast.Position{
								Column: 8,
								Line:   14,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   14,
								},
								Source: "sort",
								Start: ast.Position{
									Column: 8,
									Line:   14,
								},
							},
						},
						Name: "sort",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 57,
						Line:   15,
					},
					Source: "want = testLoadData(file: \"union_heterogeneous.out.csv\")",
					Start: ast.Position{
						Column: 1,
						Line:   15,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   15,
						},
						Source: "want",
						Start: ast.Position{
							Column: 1,
							Line:   15,
						},
					},
				},
				Name: "want",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 56,
								Line:   15,
							},
							Source: "file: \"union_heterogeneous.out.csv\"",
							Start: ast.Position{
								Column: 21,
								Line:   15,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   15,
								},
								Source: "file: \"union_heterogeneous.out.csv\"",
								Start: ast.Position{
									Column: 21,
									Line:   15,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   15,
									},
									Source: "file",
									Start: ast.Position{
										Column: 21,
										Line:   15,
									},
								},
							},
							Name: "file",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   15,
									},
									Source: "\"union_heterogeneous.out.csv\"",
									Start: ast.Position{
										Column: 27,
										Line:   15,
									},
								},
							},
							Value: "union_heterogeneous.out.csv",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 57,
							Line:   15,
						},
						Source: "testLoadData(file: \"union_heterogeneous.out.csv\")",
						Start: ast.Position{
							Column: 8,
							Line:   15,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   15,
							},
							Source: "testLoadData",
							Start: ast.Position{
								Column: 8,
								Line:   15,
							},
						},
					},
					Name: "testLoadData",
				},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 64,
						Line:   16,
					},
					Source: "assertEquals(name: \"union_heterogeneous\", want: want, got: got)",
					Start: ast.Position{
						Column: 1,
						Line:   16,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 63,
								Line:   16,
							},
							Source: "name: \"union_heterogeneous\", want: want, got: got",
							Start: ast.Position{
								Column: 14,
								Line:   16,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   16,
								},
								Source: "name: \"union_heterogeneous\"",
								Start: ast.Position{
									Column: 14,
									Line:   16,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   16,
									},
									Source: "name",
									Start: ast.Position{
										Column: 14,
										Line:   16,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   16,
									},
									Source: "\"union_heterogeneous\"",
									Start: ast.Position{
										Column: 20,
										Line:   16,
									},
								},
							},
							Value: "union_heterogeneous",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   16,
								},
								Source: "want: want",
								Start: ast.Position{
									Column: 43,
									Line:   16,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   16,
									},
									Source: "want",
									Start: ast.Position{
										Column: 43,
										Line:   16,
									},
								},
							},
							Name: "want",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   16,
									},
									Source: "want",
									Start: ast.Position{
										Column: 49,
										Line:   16,
									},
								},
							},
							Name: "want",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   16,
								},
								Source: "got: got",
								Start: ast.Position{
									Column: 55,
									Line:   16,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   16,
									},
									Source: "got",
									Start: ast.Position{
										Column: 55,
										Line:   16,
									},
								},
							},
							Name: "got",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   16,
									},
									Source: "got",
									Start: ast.Position{
										Column: 60,
										Line:   16,
									},
								},
							},
							Name: "got",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 64,
							Line:   16,
						},
						Source: "assertEquals(name: \"union_heterogeneous\", want: want, got: got)",
						Start: ast.Position{
							Column: 1,
							Line:   16,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   16,
							},
							Source: "assertEquals",
							Start: ast.Position{
								Column: 1,
								Line:   16,
							},
						},
					},
					Name: "assertEquals",
				},
			},
		}},
		Imports: nil,
		Name:    "union_heterogeneous.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 116,
					Line:   5,
				},
				Source: "t_unique = (table=<-) =>\n  table\n  |> unique(column: \"tag0\")\n\ntestingTest(name: \"unique\", load: testLoadData, infile: \"unique.in.csv\", outfile: \"unique.out.csv\", test: t_unique)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 28,
						Line:   3,
					},
					Source: "t_unique = (table=<-) =>\n  table\n  |> unique(column: \"tag0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   1,
						},
						Source: "t_unique",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_unique",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   3,
						},
						Source: "(table=<-) =>\n  table\n  |> unique(column: \"tag0\")",
						Start: ast.Position{
							Column: 12,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   2,
								},
								Source: "table",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   3,
							},
							Source: "table\n  |> unique(column: \"tag0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   3,
									},
									Source: "column: \"tag0\"",
									Start: ast.Position{
										Column: 13,
										Line:   3,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   3,
										},
										Source: "column: \"tag0\"",
										Start: ast.Position{
											Column: 13,
											Line:   3,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   3,
											},
											Source: "column",
											Start: ast.Position{
												Column: 13,
												Line:   3,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   3,
											},
											Source: "\"tag0\"",
											Start: ast.Position{
												Column: 21,
												Line:   3,
											},
										},
									},
									Value: "tag0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   3,
								},
								Source: "unique(column: \"tag0\")",
								Start: ast.Position{
									Column: 6,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   3,
									},
									Source: "unique",
									Start: ast.Position{
										Column: 6,
										Line:   3,
									},
								},
							},
							Name: "unique",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 13,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 13,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 19,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 116,
						Line:   5,
					},
					Source: "testingTest(name: \"unique\", load: testLoadData, infile: \"unique.in.csv\", outfile: \"unique.out.csv\", test: t_unique)",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 115,
								Line:   5,
							},
							Source: "name: \"unique\", load: testLoadData, infile: \"unique.in.csv\", outfile: \"unique.out.csv\", test: t_unique",
							Start: ast.Position{
								Column: 13,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   5,
								},
								Source: "name: \"unique\"",
								Start: ast.Position{
									Column: 13,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   5,
									},
									Source: "\"unique\"",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Value: "unique",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   5,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 29,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   5,
									},
									Source: "load",
									Start: ast.Position{
										Column: 29,
										Line:   5,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   5,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 35,
										Line:   5,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   5,
								},
								Source: "infile: \"unique.in.csv\"",
								Start: ast.Position{
									Column: 49,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   5,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 49,
										Line:   5,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   5,
									},
									Source: "\"unique.in.csv\"",
									Start: ast.Position{
										Column: 57,
										Line:   5,
									},
								},
							},
							Value: "unique.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   5,
								},
								Source: "outfile: \"unique.out.csv\"",
								Start: ast.Position{
									Column: 74,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   5,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 74,
										Line:   5,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   5,
									},
									Source: "\"unique.out.csv\"",
									Start: ast.Position{
										Column: 83,
										Line:   5,
									},
								},
							},
							Value: "unique.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   5,
								},
								Source: "test: t_unique",
								Start: ast.Position{
									Column: 101,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   5,
									},
									Source: "test",
									Start: ast.Position{
										Column: 101,
										Line:   5,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 115,
										Line:   5,
									},
									Source: "t_unique",
									Start: ast.Position{
										Column: 107,
										Line:   5,
									},
								},
							},
							Name: "t_unique",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 116,
							Line:   5,
						},
						Source: "testingTest(name: \"unique\", load: testLoadData, infile: \"unique.in.csv\", outfile: \"unique.out.csv\", test: t_unique)",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   5,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   5,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "unique.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 116,
					Line:   12,
				},
				Source: "t_window = (table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))\n  |> yield(name:\"0\")\n\ntestingTest(name: \"window\", load: testLoadData, infile: \"window.in.csv\", outfile: \"window.out.csv\", test: t_window)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   10,
					},
					Source: "t_window = (table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   1,
						},
						Source: "t_window",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_window",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   10,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 12,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 8,
																Line:   2,
															},
															Source: "table",
															Start: ast.Position{
																Column: 3,
																Line:   2,
															},
														},
													},
													Name: "table",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 67,
															Line:   3,
														},
														Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)",
														Start: ast.Position{
															Column: 3,
															Line:   2,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 66,
																	Line:   3,
																},
																Source: "start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z",
																Start: ast.Position{
																	Column: 12,
																	Line:   3,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   3,
																	},
																	Source: "start:2018-05-22T19:53:00Z",
																	Start: ast.Position{
																		Column: 12,
																		Line:   3,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 17,
																			Line:   3,
																		},
																		Source: "start",
																		Start: ast.Position{
																			Column: 12,
																			Line:   3,
																		},
																	},
																},
																Name: "start",
															},
															Value: &ast.DateTimeLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   3,
																		},
																		Source: "2018-05-22T19:53:00Z",
																		Start: ast.Position{
																			Column: 18,
																			Line:   3,
																		},
																	},
																},
																Value: time.Time{},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 66,
																		Line:   3,
																	},
																	Source: "stop: 2018-05-22T19:55:00Z",
																	Start: ast.Position{
																		Column: 40,
																		Line:   3,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 44,
																			Line:   3,
																		},
																		Source: "stop",
																		Start: ast.Position{
																			Column: 40,
																			Line:   3,
																		},
																	},
																},
																Name: "stop",
															},
															Value: &ast.DateTimeLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 66,
																			Line:   3,
																		},
																		Source: "2018-05-22T19:55:00Z",
																		Start: ast.Position{
																			Column: 46,
																			Line:   3,
																		},
																	},
																},
																Value: time.Time{},
															},
														}},
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 67,
																Line:   3,
															},
															Source: "range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)",
															Start: ast.Position{
																Column: 6,
																Line:   3,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 11,
																	Line:   3,
																},
																Source: "range",
																Start: ast.Position{
																	Column: 6,
																	Line:   3,
																},
															},
														},
														Name: "range",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   4,
													},
													Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])",
													Start: ast.Position{
														Column: 3,
														Line:   2,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   4,
															},
															Source: "columns: [\"_measurement\"]",
															Start: ast.Position{
																Column: 12,
																Line:   4,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   4,
																},
																Source: "columns: [\"_measurement\"]",
																Start: ast.Position{
																	Column: 12,
																	Line:   4,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 19,
																		Line:   4,
																	},
																	Source: "columns",
																	Start: ast.Position{
																		Column: 12,
																		Line:   4,
																	},
																},
															},
															Name: "columns",
														},
														Value: &ast.ArrayExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   4,
																	},
																	Source: "[\"_measurement\"]",
																	Start: ast.Position{
																		Column: 21,
																		Line:   4,
																	},
																},
															},
															Elements: []ast.Expression{&ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 36,
																			Line:   4,
																		},
																		Source: "\"_measurement\"",
																		Start: ast.Position{
																			Column: 22,
																			Line:   4,
																		},
																	},
																},
																Value: "_measurement",
															}},
														},
													}},
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   4,
														},
														Source: "group(columns: [\"_measurement\"])",
														Start: ast.Position{
															Column: 6,
															Line:   4,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   4,
															},
															Source: "group",
															Start: ast.Position{
																Column: 6,
																Line:   4,
															},
														},
													},
													Name: "group",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   5,
												},
												Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s)",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   5,
														},
														Source: "every: 1s",
														Start: ast.Position{
															Column: 13,
															Line:   5,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   5,
															},
															Source: "every: 1s",
															Start: ast.Position{
																Column: 13,
																Line:   5,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   5,
																},
																Source: "every",
																Start: ast.Position{
																	Column: 13,
																	Line:   5,
																},
															},
														},
														Name: "every",
													},
													Value: &ast.DurationLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   5,
																},
																Source: "1s",
																Start: ast.Position{
																	Column: 20,
																	Line:   5,
																},
															},
														},
														Values: []ast.Duration{ast.Duration{
															Magnitude: int64(1),
															Unit:      "s",
														}},
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   5,
													},
													Source: "window(every: 1s)",
													Start: ast.Position{
														Column: 6,
														Line:   5,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   5,
														},
														Source: "window",
														Start: ast.Position{
															Column: 6,
															Line:   5,
														},
													},
												},
												Name: "window",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   6,
											},
											Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s)\n  |> mean()",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   6,
												},
												Source: "mean()",
												Start: ast.Position{
													Column: 6,
													Line:   6,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 10,
														Line:   6,
													},
													Source: "mean",
													Start: ast.Position{
														Column: 6,
														Line:   6,
													},
												},
											},
											Name: "mean",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   7,
										},
										Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   7,
												},
												Source: "column: \"_start\", as: \"_time\"",
												Start: ast.Position{
													Column: 16,
													Line:   7,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   7,
													},
													Source: "column: \"_start\"",
													Start: ast.Position{
														Column: 16,
														Line:   7,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   7,
														},
														Source: "column",
														Start: ast.Position{
															Column: 16,
															Line:   7,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   7,
														},
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 24,
															Line:   7,
														},
													},
												},
												Value: "_start",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   7,
													},
													Source: "as: \"_time\"",
													Start: ast.Position{
														Column: 34,
														Line:   7,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   7,
														},
														Source: "as",
														Start: ast.Position{
															Column: 34,
															Line:   7,
														},
													},
												},
												Name: "as",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   7,
														},
														Source: "\"_time\"",
														Start: ast.Position{
															Column: 38,
															Line:   7,
														},
													},
												},
												Value: "_time",
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   7,
											},
											Source: "duplicate(column: \"_start\", as: \"_time\")",
											Start: ast.Position{
												Column: 6,
												Line:   7,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   7,
												},
												Source: "duplicate",
												Start: ast.Position{
													Column: 6,
													Line:   7,
												},
											},
										},
										Name: "duplicate",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   8,
									},
									Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   8,
											},
											Source: "every: inf",
											Start: ast.Position{
												Column: 13,
												Line:   8,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   8,
												},
												Source: "every: inf",
												Start: ast.Position{
													Column: 13,
													Line:   8,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   8,
													},
													Source: "every",
													Start: ast.Position{
														Column: 13,
														Line:   8,
													},
												},
											},
											Name: "every",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   8,
													},
													Source: "inf",
													Start: ast.Position{
														Column: 20,
														Line:   8,
													},
												},
											},
											Name: "inf",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   8,
										},
										Source: "window(every: inf)",
										Start: ast.Position{
											Column: 6,
											Line:   8,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   8,
											},
											Source: "window",
											Start: ast.Position{
												Column: 6,
												Line:   8,
											},
										},
									},
									Name: "window",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   9,
								},
								Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   9,
										},
										Source: "fn: (r) => ({_time: r._time, mean: r._value}",
										Start: ast.Position{
											Column: 10,
											Line:   9,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   9,
											},
											Source: "fn: (r) => ({_time: r._time, mean: r._value}",
											Start: ast.Position{
												Column: 10,
												Line:   9,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   9,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   9,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   9,
												},
												Source: "(r) => ({_time: r._time, mean: r._value}",
												Start: ast.Position{
													Column: 14,
													Line:   9,
												},
											},
										},
										Body: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   9,
													},
													Source: "{_time: r._time, mean: r._value}",
													Start: ast.Position{
														Column: 22,
														Line:   9,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   9,
														},
														Source: "_time: r._time",
														Start: ast.Position{
															Column: 23,
															Line:   9,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   9,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 23,
																Line:   9,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   9,
															},
															Source: "r._time",
															Start: ast.Position{
																Column: 30,
																Line:   9,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   9,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   9,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   9,
																},
																Source: "_time",
																Start: ast.Position{
																	Column: 32,
																	Line:   9,
																},
															},
														},
														Name: "_time",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   9,
														},
														Source: "mean: r._value",
														Start: ast.Position{
															Column: 39,
															Line:   9,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   9,
															},
															Source: "mean",
															Start: ast.Position{
																Column: 39,
																Line:   9,
															},
														},
													},
													Name: "mean",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   9,
															},
															Source: "r._value",
															Start: ast.Position{
																Column: 45,
																Line:   9,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   9,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 45,
																	Line:   9,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   9,
																},
																Source: "_value",
																Start: ast.Position{
																	Column: 47,
																	Line:   9,
																},
															},
														},
														Name: "_value",
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   9,
													},
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   9,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   9,
														},
														Source: "r",
														Start: ast.Position{
															Column: 15,
															Line:   9,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   9,
									},
									Source: "map(fn: (r) => ({_time: r._time, mean: r._value}))",
									Start: ast.Position{
										Column: 6,
										Line:   9,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   9,
										},
										Source: "map",
										Start: ast.Position{
											Column: 6,
											Line:   9,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   10,
							},
							Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   10,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   10,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   10,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   10,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   10,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   10,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   10,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   10,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   10,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   10,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   10,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   10,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 13,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 13,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 19,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 116,
						Line:   12,
					},
					Source: "testingTest(name: \"window\", load: testLoadData, infile: \"window.in.csv\", outfile: \"window.out.csv\", test: t_window)",
					Start: ast.Position{
						Column: 1,
						Line:   12,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 115,
								Line:   12,
							},
							Source: "name: \"window\", load: testLoadData, infile: \"window.in.csv\", outfile: \"window.out.csv\", test: t_window",
							Start: ast.Position{
								Column: 13,
								Line:   12,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   12,
								},
								Source: "name: \"window\"",
								Start: ast.Position{
									Column: 13,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   12,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   12,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   12,
									},
									Source: "\"window\"",
									Start: ast.Position{
										Column: 19,
										Line:   12,
									},
								},
							},
							Value: "window",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   12,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 29,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   12,
									},
									Source: "load",
									Start: ast.Position{
										Column: 29,
										Line:   12,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   12,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 35,
										Line:   12,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   12,
								},
								Source: "infile: \"window.in.csv\"",
								Start: ast.Position{
									Column: 49,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   12,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 49,
										Line:   12,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   12,
									},
									Source: "\"window.in.csv\"",
									Start: ast.Position{
										Column: 57,
										Line:   12,
									},
								},
							},
							Value: "window.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   12,
								},
								Source: "outfile: \"window.out.csv\"",
								Start: ast.Position{
									Column: 74,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   12,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 74,
										Line:   12,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   12,
									},
									Source: "\"window.out.csv\"",
									Start: ast.Position{
										Column: 83,
										Line:   12,
									},
								},
							},
							Value: "window.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   12,
								},
								Source: "test: t_window",
								Start: ast.Position{
									Column: 101,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   12,
									},
									Source: "test",
									Start: ast.Position{
										Column: 101,
										Line:   12,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 115,
										Line:   12,
									},
									Source: "t_window",
									Start: ast.Position{
										Column: 107,
										Line:   12,
									},
								},
							},
							Name: "t_window",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 116,
							Line:   12,
						},
						Source: "testingTest(name: \"window\", load: testLoadData, infile: \"window.in.csv\", outfile: \"window.out.csv\", test: t_window)",
						Start: ast.Position{
							Column: 1,
							Line:   12,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   12,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   12,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "window.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 196,
					Line:   6,
				},
				Source: "t_window_default_start_align = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:30Z, stop: 2018-05-22T19:59:00Z)\n    |> window(every:1m)\n\ntestingTest(name: \"window_default_start_align\", load: testLoadData, infile: \"window_default_start_align.in.csv\", outfile: \"window_default_start_align.out.csv\", test: t_window_default_start_align)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 24,
						Line:   4,
					},
					Source: "t_window_default_start_align = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:30Z, stop: 2018-05-22T19:59:00Z)\n    |> window(every:1m)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   1,
						},
						Source: "t_window_default_start_align",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_window_default_start_align",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 24,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:30Z, stop: 2018-05-22T19:59:00Z)\n    |> window(every:1m)",
						Start: ast.Position{
							Column: 32,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:30Z, stop: 2018-05-22T19:59:00Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:30Z, stop: 2018-05-22T19:59:00Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:30Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:53:30Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   3,
											},
											Source: "stop: 2018-05-22T19:59:00Z",
											Start: ast.Position{
												Column: 42,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   3,
												},
												Source: "stop",
												Start: ast.Position{
													Column: 42,
													Line:   3,
												},
											},
										},
										Name: "stop",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 68,
													Line:   3,
												},
												Source: "2018-05-22T19:59:00Z",
												Start: ast.Position{
													Column: 48,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:30Z, stop: 2018-05-22T19:59:00Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:30Z, stop: 2018-05-22T19:59:00Z)\n    |> window(every:1m)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   4,
									},
									Source: "every:1m",
									Start: ast.Position{
										Column: 15,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   4,
										},
										Source: "every:1m",
										Start: ast.Position{
											Column: 15,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   4,
											},
											Source: "every",
											Start: ast.Position{
												Column: 15,
												Line:   4,
											},
										},
									},
									Name: "every",
								},
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   4,
											},
											Source: "1m",
											Start: ast.Position{
												Column: 21,
												Line:   4,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(1),
										Unit:      "m",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   4,
								},
								Source: "window(every:1m)",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   4,
									},
									Source: "window",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "window",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 41,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 33,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 33,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 41,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 39,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 196,
						Line:   6,
					},
					Source: "testingTest(name: \"window_default_start_align\", load: testLoadData, infile: \"window_default_start_align.in.csv\", outfile: \"window_default_start_align.out.csv\", test: t_window_default_start_align)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 195,
								Line:   6,
							},
							Source: "name: \"window_default_start_align\", load: testLoadData, infile: \"window_default_start_align.in.csv\", outfile: \"window_default_start_align.out.csv\", test: t_window_default_start_align",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   6,
								},
								Source: "name: \"window_default_start_align\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   6,
									},
									Source: "\"window_default_start_align\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "window_default_start_align",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 49,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 49,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 55,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 112,
									Line:   6,
								},
								Source: "infile: \"window_default_start_align.in.csv\"",
								Start: ast.Position{
									Column: 69,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 69,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 112,
										Line:   6,
									},
									Source: "\"window_default_start_align.in.csv\"",
									Start: ast.Position{
										Column: 77,
										Line:   6,
									},
								},
							},
							Value: "window_default_start_align.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 159,
									Line:   6,
								},
								Source: "outfile: \"window_default_start_align.out.csv\"",
								Start: ast.Position{
									Column: 114,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 121,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 114,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 159,
										Line:   6,
									},
									Source: "\"window_default_start_align.out.csv\"",
									Start: ast.Position{
										Column: 123,
										Line:   6,
									},
								},
							},
							Value: "window_default_start_align.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 195,
									Line:   6,
								},
								Source: "test: t_window_default_start_align",
								Start: ast.Position{
									Column: 161,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 165,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 161,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 195,
										Line:   6,
									},
									Source: "t_window_default_start_align",
									Start: ast.Position{
										Column: 167,
										Line:   6,
									},
								},
							},
							Name: "t_window_default_start_align",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 196,
							Line:   6,
						},
						Source: "testingTest(name: \"window_default_start_align\", load: testLoadData, infile: \"window_default_start_align.in.csv\", outfile: \"window_default_start_align.out.csv\", test: t_window_default_start_align)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "window_default_start_align.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 176,
					Line:   6,
				},
				Source: "t_window_generate_empty = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z, stop: 2018-05-22T19:55:00Z)\n\t|> window(every: 30s, createEmpty: true)\n\ntestingTest(name: \"window_generate_empty\", load: testLoadData, infile: \"window_generate_empty.in.csv\", outfile: \"window_generate_empty.out.csv\", test: t_window_generate_empty)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 42,
						Line:   4,
					},
					Source: "t_window_generate_empty = (table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z, stop: 2018-05-22T19:55:00Z)\n\t|> window(every: 30s, createEmpty: true)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 24,
							Line:   1,
						},
						Source: "t_window_generate_empty",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_window_generate_empty",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 42,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n\t|> range(start:2018-05-22T19:53:26Z, stop: 2018-05-22T19:55:00Z)\n\t|> window(every: 30s, createEmpty: true)",
						Start: ast.Position{
							Column: 27,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   3,
								},
								Source: "table\n\t|> range(start:2018-05-22T19:53:26Z, stop: 2018-05-22T19:55:00Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:26Z, stop: 2018-05-22T19:55:00Z",
										Start: ast.Position{
											Column: 11,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:26Z",
											Start: ast.Position{
												Column: 11,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 11,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   3,
												},
												Source: "2018-05-22T19:53:26Z",
												Start: ast.Position{
													Column: 17,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   3,
											},
											Source: "stop: 2018-05-22T19:55:00Z",
											Start: ast.Position{
												Column: 39,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   3,
												},
												Source: "stop",
												Start: ast.Position{
													Column: 39,
													Line:   3,
												},
											},
										},
										Name: "stop",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   3,
												},
												Source: "2018-05-22T19:55:00Z",
												Start: ast.Position{
													Column: 45,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:26Z, stop: 2018-05-22T19:55:00Z)",
									Start: ast.Position{
										Column: 5,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 5,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   4,
							},
							Source: "table\n\t|> range(start:2018-05-22T19:53:26Z, stop: 2018-05-22T19:55:00Z)\n\t|> window(every: 30s, createEmpty: true)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   4,
									},
									Source: "every: 30s, createEmpty: true",
									Start: ast.Position{
										Column: 12,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   4,
										},
										Source: "every: 30s",
										Start: ast.Position{
											Column: 12,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   4,
											},
											Source: "every",
											Start: ast.Position{
												Column: 12,
												Line:   4,
											},
										},
									},
									Name: "every",
								},
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   4,
											},
											Source: "30s",
											Start: ast.Position{
												Column: 19,
												Line:   4,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(30),
										Unit:      "s",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   4,
										},
										Source: "createEmpty: true",
										Start: ast.Position{
											Column: 24,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   4,
											},
											Source: "createEmpty",
											Start: ast.Position{
												Column: 24,
												Line:   4,
											},
										},
									},
									Name: "createEmpty",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   4,
											},
											Source: "true",
											Start: ast.Position{
												Column: 37,
												Line:   4,
											},
										},
									},
									Name: "true",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   4,
								},
								Source: "window(every: 30s, createEmpty: true)",
								Start: ast.Position{
									Column: 5,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   4,
									},
									Source: "window",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Name: "window",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 28,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 28,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 34,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 176,
						Line:   6,
					},
					Source: "testingTest(name: \"window_generate_empty\", load: testLoadData, infile: \"window_generate_empty.in.csv\", outfile: \"window_generate_empty.out.csv\", test: t_window_generate_empty)",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 175,
								Line:   6,
							},
							Source: "name: \"window_generate_empty\", load: testLoadData, infile: \"window_generate_empty.in.csv\", outfile: \"window_generate_empty.out.csv\", test: t_window_generate_empty",
							Start: ast.Position{
								Column: 13,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   6,
								},
								Source: "name: \"window_generate_empty\"",
								Start: ast.Position{
									Column: 13,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   6,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   6,
									},
									Source: "\"window_generate_empty\"",
									Start: ast.Position{
										Column: 19,
										Line:   6,
									},
								},
							},
							Value: "window_generate_empty",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   6,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 44,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   6,
									},
									Source: "load",
									Start: ast.Position{
										Column: 44,
										Line:   6,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   6,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 50,
										Line:   6,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 102,
									Line:   6,
								},
								Source: "infile: \"window_generate_empty.in.csv\"",
								Start: ast.Position{
									Column: 64,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   6,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 64,
										Line:   6,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   6,
									},
									Source: "\"window_generate_empty.in.csv\"",
									Start: ast.Position{
										Column: 72,
										Line:   6,
									},
								},
							},
							Value: "window_generate_empty.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 144,
									Line:   6,
								},
								Source: "outfile: \"window_generate_empty.out.csv\"",
								Start: ast.Position{
									Column: 104,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   6,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 104,
										Line:   6,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 144,
										Line:   6,
									},
									Source: "\"window_generate_empty.out.csv\"",
									Start: ast.Position{
										Column: 113,
										Line:   6,
									},
								},
							},
							Value: "window_generate_empty.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 175,
									Line:   6,
								},
								Source: "test: t_window_generate_empty",
								Start: ast.Position{
									Column: 146,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 150,
										Line:   6,
									},
									Source: "test",
									Start: ast.Position{
										Column: 146,
										Line:   6,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 175,
										Line:   6,
									},
									Source: "t_window_generate_empty",
									Start: ast.Position{
										Column: 152,
										Line:   6,
									},
								},
							},
							Name: "t_window_generate_empty",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 176,
							Line:   6,
						},
						Source: "testingTest(name: \"window_generate_empty\", load: testLoadData, infile: \"window_generate_empty.in.csv\", outfile: \"window_generate_empty.out.csv\", test: t_window_generate_empty)",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   6,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   6,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "window_generate_empty.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 192,
					Line:   9,
				},
				Source: "t_window_group_mean_ungroup = (table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"name\"])\n  |> window(every:1s)\n  |> mean()\n  |> group()\n\ntestingTest(name: \"window_group_mean_ungroup\", load: testLoadData, infile: \"window_group_mean_ungroup.in.csv\", outfile: \"window_group_mean_ungroup.out.csv\", test: t_window_group_mean_ungroup)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   7,
					},
					Source: "t_window_group_mean_ungroup = (table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"name\"])\n  |> window(every:1s)\n  |> mean()\n  |> group()",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   1,
						},
						Source: "t_window_group_mean_ungroup",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_window_group_mean_ungroup",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"name\"])\n  |> window(every:1s)\n  |> mean()\n  |> group()",
						Start: ast.Position{
							Column: 31,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   3,
											},
											Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   3,
													},
													Source: "start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z",
													Start: ast.Position{
														Column: 12,
														Line:   3,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   3,
														},
														Source: "start:2018-05-22T19:53:00Z",
														Start: ast.Position{
															Column: 12,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   3,
															},
															Source: "start",
															Start: ast.Position{
																Column: 12,
																Line:   3,
															},
														},
													},
													Name: "start",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   3,
															},
															Source: "2018-05-22T19:53:00Z",
															Start: ast.Position{
																Column: 18,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 66,
															Line:   3,
														},
														Source: "stop: 2018-05-22T19:55:00Z",
														Start: ast.Position{
															Column: 40,
															Line:   3,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   3,
															},
															Source: "stop",
															Start: ast.Position{
																Column: 40,
																Line:   3,
															},
														},
													},
													Name: "stop",
												},
												Value: &ast.DateTimeLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 66,
																Line:   3,
															},
															Source: "2018-05-22T19:55:00Z",
															Start: ast.Position{
																Column: 46,
																Line:   3,
															},
														},
													},
													Value: time.Time{},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 67,
													Line:   3,
												},
												Source: "range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)",
												Start: ast.Position{
													Column: 6,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   3,
													},
													Source: "range",
													Start: ast.Position{
														Column: 6,
														Line:   3,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   4,
										},
										Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"name\"])",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   4,
												},
												Source: "columns: [\"name\"]",
												Start: ast.Position{
													Column: 12,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   4,
													},
													Source: "columns: [\"name\"]",
													Start: ast.Position{
														Column: 12,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   4,
														},
														Source: "columns",
														Start: ast.Position{
															Column: 12,
															Line:   4,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   4,
														},
														Source: "[\"name\"]",
														Start: ast.Position{
															Column: 21,
															Line:   4,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   4,
															},
															Source: "\"name\"",
															Start: ast.Position{
																Column: 22,
																Line:   4,
															},
														},
													},
													Value: "name",
												}},
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   4,
											},
											Source: "group(columns: [\"name\"])",
											Start: ast.Position{
												Column: 6,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   4,
												},
												Source: "group",
												Start: ast.Position{
													Column: 6,
													Line:   4,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   5,
									},
									Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"name\"])\n  |> window(every:1s)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   5,
											},
											Source: "every:1s",
											Start: ast.Position{
												Column: 13,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   5,
												},
												Source: "every:1s",
												Start: ast.Position{
													Column: 13,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   5,
													},
													Source: "every",
													Start: ast.Position{
														Column: 13,
														Line:   5,
													},
												},
											},
											Name: "every",
										},
										Value: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   5,
													},
													Source: "1s",
													Start: ast.Position{
														Column: 19,
														Line:   5,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(1),
												Unit:      "s",
											}},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   5,
										},
										Source: "window(every:1s)",
										Start: ast.Position{
											Column: 6,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   5,
											},
											Source: "window",
											Start: ast.Position{
												Column: 6,
												Line:   5,
											},
										},
									},
									Name: "window",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   6,
								},
								Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"name\"])\n  |> window(every:1s)\n  |> mean()",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   6,
									},
									Source: "mean()",
									Start: ast.Position{
										Column: 6,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   6,
										},
										Source: "mean",
										Start: ast.Position{
											Column: 6,
											Line:   6,
										},
									},
								},
								Name: "mean",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   7,
							},
							Source: "table\n  |> range(start:2018-05-22T19:53:00Z, stop: 2018-05-22T19:55:00Z)\n  |> group(columns: [\"name\"])\n  |> window(every:1s)\n  |> mean()\n  |> group()",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   7,
								},
								Source: "group()",
								Start: ast.Position{
									Column: 6,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									Source: "group",
									Start: ast.Position{
										Column: 6,
										Line:   7,
									},
								},
							},
							Name: "group",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 32,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 32,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 38,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 192,
						Line:   9,
					},
					Source: "testingTest(name: \"window_group_mean_ungroup\", load: testLoadData, infile: \"window_group_mean_ungroup.in.csv\", outfile: \"window_group_mean_ungroup.out.csv\", test: t_window_group_mean_ungroup)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 191,
								Line:   9,
							},
							Source: "name: \"window_group_mean_ungroup\", load: testLoadData, infile: \"window_group_mean_ungroup.in.csv\", outfile: \"window_group_mean_ungroup.out.csv\", test: t_window_group_mean_ungroup",
							Start: ast.Position{
								Column: 13,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   9,
								},
								Source: "name: \"window_group_mean_ungroup\"",
								Start: ast.Position{
									Column: 13,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   9,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   9,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   9,
									},
									Source: "\"window_group_mean_ungroup\"",
									Start: ast.Position{
										Column: 19,
										Line:   9,
									},
								},
							},
							Value: "window_group_mean_ungroup",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   9,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 48,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   9,
									},
									Source: "load",
									Start: ast.Position{
										Column: 48,
										Line:   9,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   9,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 54,
										Line:   9,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   9,
								},
								Source: "infile: \"window_group_mean_ungroup.in.csv\"",
								Start: ast.Position{
									Column: 68,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   9,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 68,
										Line:   9,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 110,
										Line:   9,
									},
									Source: "\"window_group_mean_ungroup.in.csv\"",
									Start: ast.Position{
										Column: 76,
										Line:   9,
									},
								},
							},
							Value: "window_group_mean_ungroup.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 156,
									Line:   9,
								},
								Source: "outfile: \"window_group_mean_ungroup.out.csv\"",
								Start: ast.Position{
									Column: 112,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 119,
										Line:   9,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 112,
										Line:   9,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 156,
										Line:   9,
									},
									Source: "\"window_group_mean_ungroup.out.csv\"",
									Start: ast.Position{
										Column: 121,
										Line:   9,
									},
								},
							},
							Value: "window_group_mean_ungroup.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 191,
									Line:   9,
								},
								Source: "test: t_window_group_mean_ungroup",
								Start: ast.Position{
									Column: 158,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 162,
										Line:   9,
									},
									Source: "test",
									Start: ast.Position{
										Column: 158,
										Line:   9,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 191,
										Line:   9,
									},
									Source: "t_window_group_mean_ungroup",
									Start: ast.Position{
										Column: 164,
										Line:   9,
									},
								},
							},
							Name: "t_window_group_mean_ungroup",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 192,
							Line:   9,
						},
						Source: "testingTest(name: \"window_group_mean_ungroup\", load: testLoadData, infile: \"window_group_mean_ungroup.in.csv\", outfile: \"window_group_mean_ungroup.out.csv\", test: t_window_group_mean_ungroup)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   9,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "window_group_mean_ungroup.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 144,
					Line:   12,
				},
				Source: "t_window_offset = (table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s, start: 2)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))\n  |> yield(name:\"0\")\n\ntestingTest(name: \"window_offset\", load: testLoadData, infile: \"window_offset.in.csv\", outfile: \"window_offset.out.csv\", test: t_window_offset)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   10,
					},
					Source: "t_window_offset = (table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s, start: 2)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))\n  |> yield(name:\"0\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						Source: "t_window_offset",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_window_offset",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   10,
						},
						Source: "(table=<-) =>\n  table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s, start: 2)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))\n  |> yield(name:\"0\")",
						Start: ast.Position{
							Column: 19,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 8,
																Line:   2,
															},
															Source: "table",
															Start: ast.Position{
																Column: 3,
																Line:   2,
															},
														},
													},
													Name: "table",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 65,
															Line:   3,
														},
														Source: "table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)",
														Start: ast.Position{
															Column: 3,
															Line:   2,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 64,
																	Line:   3,
																},
																Source: "start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z",
																Start: ast.Position{
																	Column: 12,
																	Line:   3,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   3,
																	},
																	Source: "start:2018-05-22T19:53:00Z",
																	Start: ast.Position{
																		Column: 12,
																		Line:   3,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 17,
																			Line:   3,
																		},
																		Source: "start",
																		Start: ast.Position{
																			Column: 12,
																			Line:   3,
																		},
																	},
																},
																Name: "start",
															},
															Value: &ast.DateTimeLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   3,
																		},
																		Source: "2018-05-22T19:53:00Z",
																		Start: ast.Position{
																			Column: 18,
																			Line:   3,
																		},
																	},
																},
																Value: time.Time{},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 64,
																		Line:   3,
																	},
																	Source: "stop:2018-05-22T19:55:00Z",
																	Start: ast.Position{
																		Column: 39,
																		Line:   3,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   3,
																		},
																		Source: "stop",
																		Start: ast.Position{
																			Column: 39,
																			Line:   3,
																		},
																	},
																},
																Name: "stop",
															},
															Value: &ast.DateTimeLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 64,
																			Line:   3,
																		},
																		Source: "2018-05-22T19:55:00Z",
																		Start: ast.Position{
																			Column: 44,
																			Line:   3,
																		},
																	},
																},
																Value: time.Time{},
															},
														}},
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 65,
																Line:   3,
															},
															Source: "range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)",
															Start: ast.Position{
																Column: 6,
																Line:   3,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 11,
																	Line:   3,
																},
																Source: "range",
																Start: ast.Position{
																	Column: 6,
																	Line:   3,
																},
															},
														},
														Name: "range",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   4,
													},
													Source: "table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])",
													Start: ast.Position{
														Column: 3,
														Line:   2,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   4,
															},
															Source: "columns: [\"_measurement\"]",
															Start: ast.Position{
																Column: 12,
																Line:   4,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   4,
																},
																Source: "columns: [\"_measurement\"]",
																Start: ast.Position{
																	Column: 12,
																	Line:   4,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 19,
																		Line:   4,
																	},
																	Source: "columns",
																	Start: ast.Position{
																		Column: 12,
																		Line:   4,
																	},
																},
															},
															Name: "columns",
														},
														Value: &ast.ArrayExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   4,
																	},
																	Source: "[\"_measurement\"]",
																	Start: ast.Position{
																		Column: 21,
																		Line:   4,
																	},
																},
															},
															Elements: []ast.Expression{&ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 36,
																			Line:   4,
																		},
																		Source: "\"_measurement\"",
																		Start: ast.Position{
																			Column: 22,
																			Line:   4,
																		},
																	},
																},
																Value: "_measurement",
															}},
														},
													}},
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   4,
														},
														Source: "group(columns: [\"_measurement\"])",
														Start: ast.Position{
															Column: 6,
															Line:   4,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   4,
															},
															Source: "group",
															Start: ast.Position{
																Column: 6,
																Line:   4,
															},
														},
													},
													Name: "group",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   5,
												},
												Source: "table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s, start: 2)",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   5,
														},
														Source: "every: 1s, start: 2",
														Start: ast.Position{
															Column: 13,
															Line:   5,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   5,
															},
															Source: "every: 1s",
															Start: ast.Position{
																Column: 13,
																Line:   5,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   5,
																},
																Source: "every",
																Start: ast.Position{
																	Column: 13,
																	Line:   5,
																},
															},
														},
														Name: "every",
													},
													Value: &ast.DurationLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   5,
																},
																Source: "1s",
																Start: ast.Position{
																	Column: 20,
																	Line:   5,
																},
															},
														},
														Values: []ast.Duration{ast.Duration{
															Magnitude: int64(1),
															Unit:      "s",
														}},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   5,
															},
															Source: "start: 2",
															Start: ast.Position{
																Column: 24,
																Line:   5,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 29,
																	Line:   5,
																},
																Source: "start",
																Start: ast.Position{
																	Column: 24,
																	Line:   5,
																},
															},
														},
														Name: "start",
													},
													Value: &ast.IntegerLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 32,
																	Line:   5,
																},
																Source: "2",
																Start: ast.Position{
																	Column: 31,
																	Line:   5,
																},
															},
														},
														Value: int64(2),
													},
												}},
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   5,
													},
													Source: "window(every: 1s, start: 2)",
													Start: ast.Position{
														Column: 6,
														Line:   5,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   5,
														},
														Source: "window",
														Start: ast.Position{
															Column: 6,
															Line:   5,
														},
													},
												},
												Name: "window",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   6,
											},
											Source: "table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s, start: 2)\n  |> mean()",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   6,
												},
												Source: "mean()",
												Start: ast.Position{
													Column: 6,
													Line:   6,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 10,
														Line:   6,
													},
													Source: "mean",
													Start: ast.Position{
														Column: 6,
														Line:   6,
													},
												},
											},
											Name: "mean",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   7,
										},
										Source: "table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s, start: 2)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   7,
												},
												Source: "column: \"_start\", as: \"_time\"",
												Start: ast.Position{
													Column: 16,
													Line:   7,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   7,
													},
													Source: "column: \"_start\"",
													Start: ast.Position{
														Column: 16,
														Line:   7,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   7,
														},
														Source: "column",
														Start: ast.Position{
															Column: 16,
															Line:   7,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   7,
														},
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 24,
															Line:   7,
														},
													},
												},
												Value: "_start",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   7,
													},
													Source: "as: \"_time\"",
													Start: ast.Position{
														Column: 34,
														Line:   7,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   7,
														},
														Source: "as",
														Start: ast.Position{
															Column: 34,
															Line:   7,
														},
													},
												},
												Name: "as",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   7,
														},
														Source: "\"_time\"",
														Start: ast.Position{
															Column: 38,
															Line:   7,
														},
													},
												},
												Value: "_time",
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   7,
											},
											Source: "duplicate(column: \"_start\", as: \"_time\")",
											Start: ast.Position{
												Column: 6,
												Line:   7,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   7,
												},
												Source: "duplicate",
												Start: ast.Position{
													Column: 6,
													Line:   7,
												},
											},
										},
										Name: "duplicate",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   8,
									},
									Source: "table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s, start: 2)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   8,
											},
											Source: "every: inf",
											Start: ast.Position{
												Column: 13,
												Line:   8,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   8,
												},
												Source: "every: inf",
												Start: ast.Position{
													Column: 13,
													Line:   8,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   8,
													},
													Source: "every",
													Start: ast.Position{
														Column: 13,
														Line:   8,
													},
												},
											},
											Name: "every",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   8,
													},
													Source: "inf",
													Start: ast.Position{
														Column: 20,
														Line:   8,
													},
												},
											},
											Name: "inf",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   8,
										},
										Source: "window(every: inf)",
										Start: ast.Position{
											Column: 6,
											Line:   8,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   8,
											},
											Source: "window",
											Start: ast.Position{
												Column: 6,
												Line:   8,
											},
										},
									},
									Name: "window",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   9,
								},
								Source: "table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s, start: 2)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   9,
										},
										Source: "fn: (r) => ({_time: r._time, mean: r._value}",
										Start: ast.Position{
											Column: 10,
											Line:   9,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   9,
											},
											Source: "fn: (r) => ({_time: r._time, mean: r._value}",
											Start: ast.Position{
												Column: 10,
												Line:   9,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   9,
												},
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   9,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   9,
												},
												Source: "(r) => ({_time: r._time, mean: r._value}",
												Start: ast.Position{
													Column: 14,
													Line:   9,
												},
											},
										},
										Body: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   9,
													},
													Source: "{_time: r._time, mean: r._value}",
													Start: ast.Position{
														Column: 22,
														Line:   9,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   9,
														},
														Source: "_time: r._time",
														Start: ast.Position{
															Column: 23,
															Line:   9,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   9,
															},
															Source: "_time",
															Start: ast.Position{
																Column: 23,
																Line:   9,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   9,
															},
															Source: "r._time",
															Start: ast.Position{
																Column: 30,
																Line:   9,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   9,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   9,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   9,
																},
																Source: "_time",
																Start: ast.Position{
																	Column: 32,
																	Line:   9,
																},
															},
														},
														Name: "_time",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   9,
														},
														Source: "mean: r._value",
														Start: ast.Position{
															Column: 39,
															Line:   9,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   9,
															},
															Source: "mean",
															Start: ast.Position{
																Column: 39,
																Line:   9,
															},
														},
													},
													Name: "mean",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   9,
															},
															Source: "r._value",
															Start: ast.Position{
																Column: 45,
																Line:   9,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   9,
																},
																Source: "r",
																Start: ast.Position{
																	Column: 45,
																	Line:   9,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   9,
																},
																Source: "_value",
																Start: ast.Position{
																	Column: 47,
																	Line:   9,
																},
															},
														},
														Name: "_value",
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   9,
													},
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   9,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   9,
														},
														Source: "r",
														Start: ast.Position{
															Column: 15,
															Line:   9,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   9,
									},
									Source: "map(fn: (r) => ({_time: r._time, mean: r._value}))",
									Start: ast.Position{
										Column: 6,
										Line:   9,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   9,
										},
										Source: "map",
										Start: ast.Position{
											Column: 6,
											Line:   9,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   10,
							},
							Source: "table\n  |> range(start:2018-05-22T19:53:00Z,stop:2018-05-22T19:55:00Z)\n  |> group(columns: [\"_measurement\"])\n  |> window(every: 1s, start: 2)\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> window(every: inf)\n  |> map(fn: (r) => ({_time: r._time, mean: r._value}))\n  |> yield(name:\"0\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   10,
									},
									Source: "name:\"0\"",
									Start: ast.Position{
										Column: 12,
										Line:   10,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   10,
										},
										Source: "name:\"0\"",
										Start: ast.Position{
											Column: 12,
											Line:   10,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   10,
											},
											Source: "name",
											Start: ast.Position{
												Column: 12,
												Line:   10,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   10,
											},
											Source: "\"0\"",
											Start: ast.Position{
												Column: 17,
												Line:   10,
											},
										},
									},
									Value: "0",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   10,
								},
								Source: "yield(name:\"0\")",
								Start: ast.Position{
									Column: 6,
									Line:   10,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   10,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 6,
										Line:   10,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 20,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 20,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 26,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 144,
						Line:   12,
					},
					Source: "testingTest(name: \"window_offset\", load: testLoadData, infile: \"window_offset.in.csv\", outfile: \"window_offset.out.csv\", test: t_window_offset)",
					Start: ast.Position{
						Column: 1,
						Line:   12,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 143,
								Line:   12,
							},
							Source: "name: \"window_offset\", load: testLoadData, infile: \"window_offset.in.csv\", outfile: \"window_offset.out.csv\", test: t_window_offset",
							Start: ast.Position{
								Column: 13,
								Line:   12,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   12,
								},
								Source: "name: \"window_offset\"",
								Start: ast.Position{
									Column: 13,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   12,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   12,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   12,
									},
									Source: "\"window_offset\"",
									Start: ast.Position{
										Column: 19,
										Line:   12,
									},
								},
							},
							Value: "window_offset",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   12,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 36,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   12,
									},
									Source: "load",
									Start: ast.Position{
										Column: 36,
										Line:   12,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   12,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 42,
										Line:   12,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   12,
								},
								Source: "infile: \"window_offset.in.csv\"",
								Start: ast.Position{
									Column: 56,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   12,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 56,
										Line:   12,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   12,
									},
									Source: "\"window_offset.in.csv\"",
									Start: ast.Position{
										Column: 64,
										Line:   12,
									},
								},
							},
							Value: "window_offset.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 120,
									Line:   12,
								},
								Source: "outfile: \"window_offset.out.csv\"",
								Start: ast.Position{
									Column: 88,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   12,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 88,
										Line:   12,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 120,
										Line:   12,
									},
									Source: "\"window_offset.out.csv\"",
									Start: ast.Position{
										Column: 97,
										Line:   12,
									},
								},
							},
							Value: "window_offset.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 143,
									Line:   12,
								},
								Source: "test: t_window_offset",
								Start: ast.Position{
									Column: 122,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 126,
										Line:   12,
									},
									Source: "test",
									Start: ast.Position{
										Column: 122,
										Line:   12,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 143,
										Line:   12,
									},
									Source: "t_window_offset",
									Start: ast.Position{
										Column: 128,
										Line:   12,
									},
								},
							},
							Name: "t_window_offset",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 144,
							Line:   12,
						},
						Source: "testingTest(name: \"window_offset\", load: testLoadData, infile: \"window_offset.in.csv\", outfile: \"window_offset.out.csv\", test: t_window_offset)",
						Start: ast.Position{
							Column: 1,
							Line:   12,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   12,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   12,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "window_offset.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 164,
					Line:   5,
				},
				Source: "t_window_start_bound = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:00Z)\n    |> window(start:2018-05-22T19:53:30Z,every: 1m)\ntestingTest(name: \"window_start_bound\", load: testLoadData, infile: \"window_start_bound.in.csv\", outfile: \"window_start_bound.out.csv\", test: t_window_start_bound)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 52,
						Line:   4,
					},
					Source: "t_window_start_bound = (table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:00Z)\n    |> window(start:2018-05-22T19:53:30Z,every: 1m)",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   1,
						},
						Source: "t_window_start_bound",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_window_start_bound",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 52,
							Line:   4,
						},
						Source: "(table=<-) =>\n  table\n    |> range(start:2018-05-22T19:53:00Z)\n    |> window(start:2018-05-22T19:53:30Z,every: 1m)",
						Start: ast.Position{
							Column: 24,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   2,
									},
									Source: "table",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   3,
								},
								Source: "table\n    |> range(start:2018-05-22T19:53:00Z)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   3,
										},
										Source: "start:2018-05-22T19:53:00Z",
										Start: ast.Position{
											Column: 14,
											Line:   3,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   3,
											},
											Source: "start:2018-05-22T19:53:00Z",
											Start: ast.Position{
												Column: 14,
												Line:   3,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   3,
												},
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   3,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   3,
												},
												Source: "2018-05-22T19:53:00Z",
												Start: ast.Position{
													Column: 20,
													Line:   3,
												},
											},
										},
										Value: time.Time{},
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   3,
									},
									Source: "range(start:2018-05-22T19:53:00Z)",
									Start: ast.Position{
										Column: 8,
										Line:   3,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   3,
										},
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   3,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   4,
							},
							Source: "table\n    |> range(start:2018-05-22T19:53:00Z)\n    |> window(start:2018-05-22T19:53:30Z,every: 1m)",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   4,
									},
									Source: "start:2018-05-22T19:53:30Z,every: 1m",
									Start: ast.Position{
										Column: 15,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   4,
										},
										Source: "start:2018-05-22T19:53:30Z",
										Start: ast.Position{
											Column: 15,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   4,
											},
											Source: "start",
											Start: ast.Position{
												Column: 15,
												Line:   4,
											},
										},
									},
									Name: "start",
								},
								Value: &ast.DateTimeLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   4,
											},
											Source: "2018-05-22T19:53:30Z",
											Start: ast.Position{
												Column: 21,
												Line:   4,
											},
										},
									},
									Value: time.Time{},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   4,
										},
										Source: "every: 1m",
										Start: ast.Position{
											Column: 42,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   4,
											},
											Source: "every",
											Start: ast.Position{
												Column: 42,
												Line:   4,
											},
										},
									},
									Name: "every",
								},
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   4,
											},
											Source: "1m",
											Start: ast.Position{
												Column: 49,
												Line:   4,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(1),
										Unit:      "m",
									}},
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   4,
								},
								Source: "window(start:2018-05-22T19:53:30Z,every: 1m)",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   4,
									},
									Source: "window",
									Start: ast.Position{
										Column: 8,
										Line:   4,
									},
								},
							},
							Name: "window",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 25,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 25,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 31,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 164,
						Line:   5,
					},
					Source: "testingTest(name: \"window_start_bound\", load: testLoadData, infile: \"window_start_bound.in.csv\", outfile: \"window_start_bound.out.csv\", test: t_window_start_bound)",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 163,
								Line:   5,
							},
							Source: "name: \"window_start_bound\", load: testLoadData, infile: \"window_start_bound.in.csv\", outfile: \"window_start_bound.out.csv\", test: t_window_start_bound",
							Start: ast.Position{
								Column: 13,
								Line:   5,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   5,
								},
								Source: "name: \"window_start_bound\"",
								Start: ast.Position{
									Column: 13,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   5,
									},
									Source: "name",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   5,
									},
									Source: "\"window_start_bound\"",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Value: "window_start_bound",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   5,
								},
								Source: "load: testLoadData",
								Start: ast.Position{
									Column: 41,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   5,
									},
									Source: "load",
									Start: ast.Position{
										Column: 41,
										Line:   5,
									},
								},
							},
							Name: "load",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   5,
									},
									Source: "testLoadData",
									Start: ast.Position{
										Column: 47,
										Line:   5,
									},
								},
							},
							Name: "testLoadData",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   5,
								},
								Source: "infile: \"window_start_bound.in.csv\"",
								Start: ast.Position{
									Column: 61,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   5,
									},
									Source: "infile",
									Start: ast.Position{
										Column: 61,
										Line:   5,
									},
								},
							},
							Name: "infile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   5,
									},
									Source: "\"window_start_bound.in.csv\"",
									Start: ast.Position{
										Column: 69,
										Line:   5,
									},
								},
							},
							Value: "window_start_bound.in.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   5,
								},
								Source: "outfile: \"window_start_bound.out.csv\"",
								Start: ast.Position{
									Column: 98,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 105,
										Line:   5,
									},
									Source: "outfile",
									Start: ast.Position{
										Column: 98,
										Line:   5,
									},
								},
							},
							Name: "outfile",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 135,
										Line:   5,
									},
									Source: "\"window_start_bound.out.csv\"",
									Start: ast.Position{
										Column: 107,
										Line:   5,
									},
								},
							},
							Value: "window_start_bound.out.csv",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 163,
									Line:   5,
								},
								Source: "test: t_window_start_bound",
								Start: ast.Position{
									Column: 137,
									Line:   5,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   5,
									},
									Source: "test",
									Start: ast.Position{
										Column: 137,
										Line:   5,
									},
								},
							},
							Name: "test",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 163,
										Line:   5,
									},
									Source: "t_window_start_bound",
									Start: ast.Position{
										Column: 143,
										Line:   5,
									},
								},
							},
							Name: "t_window_start_bound",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 164,
							Line:   5,
						},
						Source: "testingTest(name: \"window_start_bound\", load: testLoadData, infile: \"window_start_bound.in.csv\", outfile: \"window_start_bound.out.csv\", test: t_window_start_bound)",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   5,
							},
							Source: "testingTest",
							Start: ast.Position{
								Column: 1,
								Line:   5,
							},
						},
					},
					Name: "testingTest",
				},
			},
		}},
		Imports: nil,
		Name:    "window_start_bound.flux",
		Package: nil,
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 62,
					Line:   11,
				},
				Source: "t_yield = (table=<-) =>\n  table\n    |> sort()\n    |> limit(n: 3)\n    |> yield(name: \"1: lowest 3\")\n    |> sample(n: 2, pos: 1)\n    |> yield(name: \"2: 2nd row\")\n\nindata = testLoadData(file: \"yield.in.csv\")\ngot = indata |> t_yield() |> yield(name: \"5\")\nwant = testLoadData(file: \"yield.out.csv\") |> yield(name:\"6\")",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 33,
						Line:   7,
					},
					Source: "t_yield = (table=<-) =>\n  table\n    |> sort()\n    |> limit(n: 3)\n    |> yield(name: \"1: lowest 3\")\n    |> sample(n: 2, pos: 1)\n    |> yield(name: \"2: 2nd row\")",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   1,
						},
						Source: "t_yield",
						Start: ast.Position{
							Column: 1,
							Line:   1,
						},
					},
				},
				Name: "t_yield",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   7,
						},
						Source: "(table=<-) =>\n  table\n    |> sort()\n    |> limit(n: 3)\n    |> yield(name: \"1: lowest 3\")\n    |> sample(n: 2, pos: 1)\n    |> yield(name: \"2: 2nd row\")",
						Start: ast.Position{
							Column: 11,
							Line:   1,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   2,
												},
												Source: "table",
												Start: ast.Position{
													Column: 3,
													Line:   2,
												},
											},
										},
										Name: "table",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   3,
											},
											Source: "table\n    |> sort()",
											Start: ast.Position{
												Column: 3,
												Line:   2,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   3,
												},
												Source: "sort()",
												Start: ast.Position{
													Column: 8,
													Line:   3,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 12,
														Line:   3,
													},
													Source: "sort",
													Start: ast.Position{
														Column: 8,
														Line:   3,
													},
												},
											},
											Name: "sort",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   4,
										},
										Source: "table\n    |> sort()\n    |> limit(n: 3)",
										Start: ast.Position{
											Column: 3,
											Line:   2,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   4,
												},
												Source: "n: 3",
												Start: ast.Position{
													Column: 14,
													Line:   4,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   4,
													},
													Source: "n: 3",
													Start: ast.Position{
														Column: 14,
														Line:   4,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   4,
														},
														Source: "n",
														Start: ast.Position{
															Column: 14,
															Line:   4,
														},
													},
												},
												Name: "n",
											},
											Value: &ast.IntegerLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   4,
														},
														Source: "3",
														Start: ast.Position{
															Column: 17,
															Line:   4,
														},
													},
												},
												Value: int64(3),
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   4,
											},
											Source: "limit(n: 3)",
											Start: ast.Position{
												Column: 8,
												Line:   4,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   4,
												},
												Source: "limit",
												Start: ast.Position{
													Column: 8,
													Line:   4,
												},
											},
										},
										Name: "limit",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   5,
									},
									Source: "table\n    |> sort()\n    |> limit(n: 3)\n    |> yield(name: \"1: lowest 3\")",
									Start: ast.Position{
										Column: 3,
										Line:   2,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   5,
											},
											Source: "name: \"1: lowest 3\"",
											Start: ast.Position{
												Column: 14,
												Line:   5,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   5,
												},
												Source: "name: \"1: lowest 3\"",
												Start: ast.Position{
													Column: 14,
													Line:   5,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   5,
													},
													Source: "name",
													Start: ast.Position{
														Column: 14,
														Line:   5,
													},
												},
											},
											Name: "name",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   5,
													},
													Source: "\"1: lowest 3\"",
													Start: ast.Position{
														Column: 20,
														Line:   5,
													},
												},
											},
											Value: "1: lowest 3",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   5,
										},
										Source: "yield(name: \"1: lowest 3\")",
										Start: ast.Position{
											Column: 8,
											Line:   5,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   5,
											},
											Source: "yield",
											Start: ast.Position{
												Column: 8,
												Line:   5,
											},
										},
									},
									Name: "yield",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   6,
								},
								Source: "table\n    |> sort()\n    |> limit(n: 3)\n    |> yield(name: \"1: lowest 3\")\n    |> sample(n: 2, pos: 1)",
								Start: ast.Position{
									Column: 3,
									Line:   2,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   6,
										},
										Source: "n: 2, pos: 1",
										Start: ast.Position{
											Column: 15,
											Line:   6,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   6,
											},
											Source: "n: 2",
											Start: ast.Position{
												Column: 15,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   6,
												},
												Source: "n",
												Start: ast.Position{
													Column: 15,
													Line:   6,
												},
											},
										},
										Name: "n",
									},
									Value: &ast.IntegerLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   6,
												},
												Source: "2",
												Start: ast.Position{
													Column: 18,
													Line:   6,
												},
											},
										},
										Value: int64(2),
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   6,
											},
											Source: "pos: 1",
											Start: ast.Position{
												Column: 21,
												Line:   6,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   6,
												},
												Source: "pos",
												Start: ast.Position{
													Column: 21,
													Line:   6,
												},
											},
										},
										Name: "pos",
									},
									Value: &ast.IntegerLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   6,
												},
												Source: "1",
												Start: ast.Position{
													Column: 26,
													Line:   6,
												},
											},
										},
										Value: int64(1),
									},
								}},
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   6,
									},
									Source: "sample(n: 2, pos: 1)",
									Start: ast.Position{
										Column: 8,
										Line:   6,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   6,
										},
										Source: "sample",
										Start: ast.Position{
											Column: 8,
											Line:   6,
										},
									},
								},
								Name: "sample",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   7,
							},
							Source: "table\n    |> sort()\n    |> limit(n: 3)\n    |> yield(name: \"1: lowest 3\")\n    |> sample(n: 2, pos: 1)\n    |> yield(name: \"2: 2nd row\")",
							Start: ast.Position{
								Column: 3,
								Line:   2,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   7,
									},
									Source: "name: \"2: 2nd row\"",
									Start: ast.Position{
										Column: 14,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   7,
										},
										Source: "name: \"2: 2nd row\"",
										Start: ast.Position{
											Column: 14,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   7,
											},
											Source: "name",
											Start: ast.Position{
												Column: 14,
												Line:   7,
											},
										},
									},
									Name: "name",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   7,
											},
											Source: "\"2: 2nd row\"",
											Start: ast.Position{
												Column: 20,
												Line:   7,
											},
										},
									},
									Value: "2: 2nd row",
								},
							}},
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   7,
								},
								Source: "yield(name: \"2: 2nd row\")",
								Start: ast.Position{
									Column: 8,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   7,
									},
									Source: "yield",
									Start: ast.Position{
										Column: 8,
										Line:   7,
									},
								},
							},
							Name: "yield",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "table=<-",
							Start: ast.Position{
								Column: 12,
								Line:   1,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   1,
								},
								Source: "table",
								Start: ast.Position{
									Column: 12,
									Line:   1,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   1,
							},
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   1,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 44,
						Line:   9,
					},
					Source: "indata = testLoadData(file: \"yield.in.csv\")",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   9,
						},
						Source: "indata",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Name: "indata",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   9,
							},
							Source: "file: \"yield.in.csv\"",
							Start: ast.Position{
								Column: 23,
								Line:   9,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   9,
								},
								Source: "file: \"yield.in.csv\"",
								Start: ast.Position{
									Column: 23,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   9,
									},
									Source: "file",
									Start: ast.Position{
										Column: 23,
										Line:   9,
									},
								},
							},
							Name: "file",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   9,
									},
									Source: "\"yield.in.csv\"",
									Start: ast.Position{
										Column: 29,
										Line:   9,
									},
								},
							},
							Value: "yield.in.csv",
						},
					}},
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 44,
							Line:   9,
						},
						Source: "testLoadData(file: \"yield.in.csv\")",
						Start: ast.Position{
							Column: 10,
							Line:   9,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   9,
							},
							Source: "testLoadData",
							Start: ast.Position{
								Column: 10,
								Line:   9,
							},
						},
					},
					Name: "testLoadData",
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 46,
						Line:   10,
					},
					Source: "got = indata |> t_yield() |> yield(name: \"5\")",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   10,
						},
						Source: "got",
						Start: ast.Position{
							Column: 1,
							Line:   10,
						},
					},
				},
				Name: "got",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   10,
								},
								Source: "indata",
								Start: ast.Position{
									Column: 7,
									Line:   10,
								},
							},
						},
						Name: "indata",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   10,
							},
							Source: "indata |> t_yield()",
							Start: ast.Position{
								Column: 7,
								Line:   10,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   10,
								},
								Source: "t_yield()",
								Start: ast.Position{
									Column: 17,
									Line:   10,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   10,
									},
									Source: "t_yield",
									Start: ast.Position{
										Column: 17,
										Line:   10,
									},
								},
							},
							Name: "t_yield",
						},
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 46,
							Line:   10,
						},
						Source: "indata |> t_yield() |> yield(name: \"5\")",
						Start: ast.Position{
							Column: 7,
							Line:   10,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   10,
								},
								Source: "name: \"5\"",
								Start: ast.Position{
									Column: 36,
									Line:   10,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   10,
									},
									Source: "name: \"5\"",
									Start: ast.Position{
										Column: 36,
										Line:   10,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   10,
										},
										Source: "name",
										Start: ast.Position{
											Column: 36,
											Line:   10,
										},
									},
								},
								Name: "name",
							},
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   10,
										},
										Source: "\"5\"",
										Start: ast.Position{
											Column: 42,
											Line:   10,
										},
									},
								},
								Value: "5",
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 46,
								Line:   10,
							},
							Source: "yield(name: \"5\")",
							Start: ast.Position{
								Column: 30,
								Line:   10,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   10,
								},
								Source: "yield",
								Start: ast.Position{
									Column: 30,
									Line:   10,
								},
							},
						},
						Name: "yield",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 62,
						Line:   11,
					},
					Source: "want = testLoadData(file: \"yield.out.csv\") |> yield(name:\"6\")",
					Start: ast.Position{
						Column: 1,
						Line:   11,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   11,
						},
						Source: "want",
						Start: ast.Position{
							Column: 1,
							Line:   11,
						},
					},
				},
				Name: "want",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   11,
								},
								Source: "file: \"yield.out.csv\"",
								Start: ast.Position{
									Column: 21,
									Line:   11,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   11,
									},
									Source: "file: \"yield.out.csv\"",
									Start: ast.Position{
										Column: 21,
										Line:   11,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   11,
										},
										Source: "file",
										Start: ast.Position{
											Column: 21,
											Line:   11,
										},
									},
								},
								Name: "file",
							},
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   11,
										},
										Source: "\"yield.out.csv\"",
										Start: ast.Position{
											Column: 27,
											Line:   11,
										},
									},
								},
								Value: "yield.out.csv",
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   11,
							},
							Source: "testLoadData(file: \"yield.out.csv\")",
							Start: ast.Position{
								Column: 8,
								Line:   11,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   11,
								},
								Source: "testLoadData",
								Start: ast.Position{
									Column: 8,
									Line:   11,
								},
							},
						},
						Name: "testLoadData",
					},
				},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 62,
							Line:   11,
						},
						Source: "testLoadData(file: \"yield.out.csv\") |> yield(name:\"6\")",
						Start: ast.Position{
							Column: 8,
							Line:   11,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   11,
								},
								Source: "name:\"6\"",
								Start: ast.Position{
									Column: 53,
									Line:   11,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   11,
									},
									Source: "name:\"6\"",
									Start: ast.Position{
										Column: 53,
										Line:   11,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   11,
										},
										Source: "name",
										Start: ast.Position{
											Column: 53,
											Line:   11,
										},
									},
								},
								Name: "name",
							},
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   11,
										},
										Source: "\"6\"",
										Start: ast.Position{
											Column: 58,
											Line:   11,
										},
									},
								},
								Value: "6",
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 62,
								Line:   11,
							},
							Source: "yield(name:\"6\")",
							Start: ast.Position{
								Column: 47,
								Line:   11,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   11,
								},
								Source: "yield",
								Start: ast.Position{
									Column: 47,
									Line:   11,
								},
							},
						},
						Name: "yield",
					},
				},
			},
		}},
		Imports: nil,
		Name:    "yield.flux",
		Package: nil,
	}},
	Package: "main",
	Path:    "tests/testdata",
}
